{"version":3,"file":"http.client.js","sourceRoot":"","sources":["../../../../../../packages/theme/services/http/http.client.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { tap, catchError } from 'rxjs/operators';\nimport 'rxjs/add/observable/throw';\nimport * as parse from 'date-fns/parse';\n\n/**\n * 封装HttpClient，主要解决：\n * + 优化HttpClient在参数上便利性\n * + 统一实现 loading\n * + 统一处理时间格式问题\n */\n@Injectable()\n// tslint:disable-next-line:class-name\nexport class _HttpClient {\n  constructor(private http: HttpClient) {}\n\n  private _loading = false;\n\n  /** 是否正在加载中 */\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  parseParams(params: any): HttpParams {\n    let ret = new HttpParams();\n    // tslint:disable-next-line:forin\n    for (const key in params) {\n      let _data = params[key];\n      // 将时间转化为：时间戳 (秒)\n      if (_data instanceof Date) {\n        _data = _data.valueOf();\n      }\n      ret = ret.set(key, _data);\n    }\n    return ret;\n  }\n\n  appliedUrl(url: string, params?: any) {\n    if (!params) return url;\n    url += ~url.indexOf('?') ? '' : '?';\n    const arr: string[] = [];\n    // tslint:disable-next-line:forin\n    for (const key in params) {\n      arr.push(`${key}=${params[key]}`);\n    }\n    return url + arr.join('&');\n  }\n\n  begin() {\n    // console.time('http');\n    setTimeout(() => (this._loading = true));\n  }\n\n  end() {\n    // console.timeEnd('http');\n    setTimeout(() => (this._loading = false));\n  }\n\n  // region: get\n\n  /**\n   * GET：返回一个 `T` 类型\n   */\n  get<T>(\n    url: string,\n    params?: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body';\n      reportProgress?: boolean;\n      responseType: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * GET：返回一个 `string` 类型\n   */\n  get(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body';\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * GET：返回一个 `JSON` 类型\n   */\n  get(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe: 'response';\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * GET：返回一个 `JSON` 类型\n   */\n  get<T>(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe: 'response';\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<T>>;\n\n  /**\n   * GET：返回一个 `any` 类型\n   */\n  get(\n    url: string,\n    params?: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any>;\n\n  /**\n   * GET 请求\n   */\n  get(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any> {\n    return this.request(\n      'GET',\n      url,\n      Object.assign(\n        {\n          params,\n        },\n        options,\n      ),\n    );\n  }\n\n  // endregion\n\n  // region: post\n\n  /**\n   * POST：返回一个 `string` 类型\n   */\n  post(\n    url: string,\n    body: any,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body';\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * POST：返回一个 `JSON` 类型\n   */\n  post(\n    url: string,\n    body: any,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe: 'response';\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * POST：返回一个 `JSON` 类型\n   */\n  post<T>(\n    url: string,\n    body?: any,\n    params?: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe: 'response';\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<T>;\n\n  /**\n   * POST：返回一个 `any` 类型\n   */\n  post(\n    url: string,\n    body?: any,\n    params?: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any>;\n\n  /**\n   * POST 请求\n   */\n  post(\n    url: string,\n    body: any,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any> {\n    return this.request(\n      'POST',\n      url,\n      Object.assign(\n        {\n          body,\n          params,\n        },\n        options,\n      ),\n    );\n  }\n\n  // endregion\n\n  // region: delete\n\n  /**\n   * DELETE：返回一个 `string` 类型\n   */\n  delete(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body';\n      reportProgress?: boolean;\n      responseType: 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<string>;\n\n  /**\n   * POST：返回一个 `JSON` 类型\n   */\n  delete(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe: 'response';\n      reportProgress?: boolean;\n      responseType?: 'json';\n      withCredentials?: boolean;\n    },\n  ): Observable<HttpResponse<Object>>;\n\n  /**\n   * POST：返回一个 `any` 类型\n   */\n  delete(\n    url: string,\n    params?: any,\n    options?: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any>;\n\n  /**\n   * POST 请求\n   */\n  delete(\n    url: string,\n    params: any,\n    options: {\n      headers?: HttpHeaders | { [header: string]: string | string[] };\n      observe?: 'body' | 'events' | 'response';\n      reportProgress?: boolean;\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      withCredentials?: boolean;\n    },\n  ): Observable<any> {\n    return this.request(\n      'DELETE',\n      url,\n      Object.assign(\n        {\n          params,\n        },\n        options,\n      ),\n    );\n  }\n\n  // endregion\n\n  /**\n   * `jsonp` 请求\n   *\n   * @param url URL地址\n   * @param params 请求参数\n   * @param callbackParam CALLBACK值，默认：JSONP_CALLBACK\n   */\n  jsonp(\n    url: string,\n    params?: any,\n    callbackParam: string = 'JSONP_CALLBACK',\n  ): Observable<any> {\n    return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(\n      tap(() => {\n        this.end();\n      }),\n      catchError(res => {\n        this.end();\n        return Observable.throw(res);\n      }),\n    );\n  }\n\n  /**\n   * `patch` 请求\n   *\n   * @param url URL地址\n   * @param body 请求参数\n   */\n  patch(url: string, body?: any, params?: any): Observable<any> {\n    return this.request(\n      'PATCH',\n      url,\n      Object.assign({\n        params,\n        body: body || null,\n      }),\n    );\n  }\n\n  /**\n   * `put` 请求\n   *\n   * @param url URL地址\n   * @param body 请求参数\n   */\n  put(url: string, body?: any, params?: any): Observable<any> {\n    return this.request(\n      'PUT',\n      url,\n      Object.assign({\n        params,\n        body: body || null,\n      }),\n    );\n  }\n\n  /**\n   * `request` 请求\n   *\n   * @param method 请求方法类型\n   * @param url URL地址\n   * @param options 参数\n   */\n  request<R>(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n    },\n  ): Observable<R>;\n  /**\n   * `request` 请求\n   *\n   * @param method 请求方法类型\n   * @param url URL地址\n   * @param options 参数\n   */\n  request(\n    method: string,\n    url: string,\n    options?: {\n      body?: any;\n      headers?:\n        | HttpHeaders\n        | {\n            [header: string]: string | string[];\n          };\n      observe?: 'body' | 'events' | 'response';\n      params?:\n        | HttpParams\n        | {\n            [param: string]: string | string[];\n          };\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n      reportProgress?: boolean;\n      withCredentials?: boolean;\n    },\n  ): Observable<any> {\n    this.begin();\n    if (options) {\n      if (options.params) options.params = this.parseParams(options.params);\n    }\n    return this.http.request(method, url, options).pipe(\n      tap(() => {\n        this.end();\n      }),\n      catchError(res => {\n        this.end();\n        return Observable.throw(res);\n      }),\n    );\n  }\n}\n"]}