{"version":3,"file":"modal.helper.js","sourceRoot":"","sources":["../../../../../../packages/theme/services/modal/modal.helper.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,OAAO,EAAE,cAAc,EAA0B,MAAM,eAAe,CAAC;;;;;IASrE,qBAAoB,GAAmB;QAAnB,QAAG,GAAH,GAAG,CAAgB;sBAFtB,GAAG;KAEuB;IAE3C;;;;;;;;;;;;;;;;OAgBG;;;;;;;;;;;;;;;;;;;IACH,0BAAI;;;;;;;;;;;;;;;;;;IAAJ,UACE,IAAS,EACT,MAAY,EACZ,IAAsC,EACtC,OAAgC;QAJlC,iBA+BC;QA5BC,qBAAA,EAAA,WAAsC;QAGtC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC/C,qBAAI,GAAG,GAAG,EAAE;YACV,KAAK,GAAG,EAAE,CAAC;YACb,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC7B,KAAK,GAAM,IAAI,OAAI,CAAC;iBACrB;gBAAC,IAAI,CAAC,CAAC;oBACN,GAAG,GAAG,WAAS,IAAM,CAAC;iBACvB;aACF;YACD,qBAAM,cAAc,GAA2B;gBAC7C,eAAe,EAAE,GAAG;gBACpB,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;gBAClC,QAAQ,EAAE,IAAI;gBACd,iBAAiB,EAAE,MAAM;gBACzB,QAAQ,EAAE,EAAE,KAAI,CAAC,MAAM;aACxB,CAAC;YACF,qBAAM,OAAO,GAAG,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;YACxE,qBAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,UAAC,GAAQ;gBACxD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnB,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACpB,WAAW,CAAC,WAAW,EAAE,CAAC;aAC3B,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED;;OAEG;;;;;;;;;IACH,4BAAM;;;;;;;;IAAN,UACE,IAAS,EACT,MAAY,EACZ,IAAsC,EACtC,OAAa;QADb,qBAAA,EAAA,WAAsC;QAGtC,MAAM,CAAC,IAAI,CAAC,IAAI,CACd,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,MAAM,CAAC,MAAM,CACX;YACE,YAAY,EAAE,KAAK;SACpB,EACD,OAAO,CACR,CACF,CAAC;KACH;;gBA5EF,UAAU;;;;gBALF,cAAc;;sBAJvB;;SAUa,WAAW","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { filter, tap } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { NzModalService, ModalOptionsForService } from 'ng-zorro-antd';\r\n\r\n/**\r\n * 对话框辅助类\r\n */\r\n@Injectable()\r\nexport class ModalHelper {\r\n  private zIndex = 500;\r\n\r\n  constructor(private srv: NzModalService) {}\r\n\r\n  /**\r\n   * 打开对话框\r\n   * this.modalHelper.open(FormEditComponent, { i }).subscribe(res => this.load());\r\n   *\r\n   * 对于组件的成功&关闭的处理说明：\r\n   * 成功：\r\n   *  this.NzModalRef.close(data);\r\n   *  this.NzModalRef.close();\r\n   *\r\n   * 关闭：\r\n   * this.NzModalRef.destroy();\r\n   *\r\n   * @param comp 组件\r\n   * @param params 组件参数\r\n   * @param size 大小；例如：lg、600，默认：lg\r\n   * @param options 对话框 `ModalOptionsForService` 参数\r\n   */\r\n  open(\r\n    comp: any,\r\n    params?: any,\r\n    size: 'sm' | 'lg' | '' | number = 'lg',\r\n    options?: ModalOptionsForService,\r\n  ): Observable<any> {\r\n    return Observable.create((observer: Observer<any>) => {\r\n      let cls = '',\r\n        width = '';\r\n      if (size) {\r\n        if (typeof size === 'number') {\r\n          width = `${size}px`;\r\n        } else {\r\n          cls = `modal-${size}`;\r\n        }\r\n      }\r\n      const defaultOptions: ModalOptionsForService = {\r\n        nzWrapClassName: cls,\r\n        nzContent: comp,\r\n        nzWidth: width ? width : undefined,\r\n        nzFooter: null,\r\n        nzComponentParams: params,\r\n        nzZIndex: ++this.zIndex,\r\n      };\r\n      const subject = this.srv.create(Object.assign(defaultOptions, options));\r\n      const afterClose$ = subject.afterClose.subscribe((res: any) => {\r\n        observer.next(res);\r\n        observer.complete();\r\n        afterClose$.unsubscribe();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 静态框，点击蒙层不允许关闭\r\n   */\r\n  static(\r\n    comp: any,\r\n    params?: any,\r\n    size: 'sm' | 'lg' | '' | number = 'lg',\r\n    options?: any,\r\n  ): Observable<any> {\r\n    return this.open(\r\n      comp,\r\n      params,\r\n      size,\r\n      Object.assign(\r\n        {\r\n          maskClosable: false,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n}\r\n"]}