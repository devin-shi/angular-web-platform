{"version":3,"file":"cache.umd.min.js","sources":["../../../../packages/cache/src/interface.ts","../../../../packages/cache/cache.config.ts","../../../../packages/cache/src/cache.service.ts","../../../../packages/cache/src/local-storage-cache.service.ts","../../../../packages/cache/cache.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface ICache {\r\n  v: any;\r\n  /** 过期时间戳，`0` 表示不过期 */\r\n  e: number;\r\n}\r\n\r\nexport const DC_STORE_STORAGE_TOKEN = new InjectionToken<ICacheStore>(\r\n  'DC_STORE_STORAGE_TOKEN',\r\n);\r\n\r\nexport interface ICacheStore {\r\n  get(key: string): ICache;\r\n\r\n  set(key: string, value: ICache): boolean;\r\n\r\n  remove(key: string);\r\n}\r\n\r\nexport type CacheNotifyType = 'set' | 'remove' | 'expire';\r\n\r\nexport interface CacheNotifyResult {\r\n  type: CacheNotifyType;\r\n  value?: any;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DelonCacheConfig {\r\n  /**\r\n   * 缓存模式，默认：`promise`\r\n   * - `promise` 约定模式，允许 `key` 作为 http 获取数据\r\n   * - `none` 正常模式\r\n   */\r\n  mode?: 'promise' | 'none' = 'promise';\r\n  /**\r\n   * 重命名返回参数，例如：\r\n   * - `null` 返回体为内容\r\n   * - `list` 返回体应 `{ list: [] }`\r\n   * - `result.list` 返回体应 `{ result: { list: [] } }`\r\n   */\r\n  reName?: string | string[] = '';\r\n  /**\r\n   * 持久化数据键值前缀\r\n   */\r\n  prefix?: string = '';\r\n  /**\r\n   * 持久化数据元数据存储键名\r\n   */\r\n  meta_key?: string = '__cache_meta';\r\n}\r\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as addSeconds from 'date-fns/add_seconds';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\nimport {\r\n  DC_STORE_STORAGE_TOKEN,\r\n  ICacheStore,\r\n  ICache,\r\n  CacheNotifyResult,\r\n  CacheNotifyType,\r\n} from './interface';\r\nimport { DelonCacheConfig } from '../cache.config';\r\n\r\n@Injectable()\r\nexport class CacheService implements OnDestroy {\r\n  private readonly memory: Map<string, ICache> = new Map<string, ICache>();\r\n  private readonly notifyBuffer: Map<\r\n    string,\r\n    BehaviorSubject<CacheNotifyResult>\r\n  > = new Map<string, BehaviorSubject<CacheNotifyResult>>();\r\n  private meta: Set<string> = new Set<string>();\r\n  private freq_tick = 3000;\r\n  private freq_time: any;\r\n\r\n  constructor(\r\n    private options: DelonCacheConfig,\r\n    @Inject(DC_STORE_STORAGE_TOKEN) private store: ICacheStore,\r\n    private http: HttpClient,\r\n  ) {\r\n    this.loadMeta();\r\n    this.startExpireNotify();\r\n  }\r\n\r\n  _deepGet(obj: any, path: string[], defaultValue?: any) {\r\n    if (!obj) return defaultValue;\r\n    if (path.length <= 1) {\r\n      const checkObj = path.length ? obj[path[0]] : obj;\r\n      return typeof checkObj === 'undefined' ? defaultValue : checkObj;\r\n    }\r\n    return path.reduce((o, k) => o[k], obj) || defaultValue;\r\n  }\r\n\r\n  // region: meta\r\n\r\n  private pushMeta(key: string) {\r\n    if (this.meta.has(key)) return;\r\n    this.meta.add(key);\r\n    this.saveMeta();\r\n  }\r\n\r\n  private removeMeta(key: string) {\r\n    if (!this.meta.has(key)) return;\r\n    this.meta.delete(key);\r\n    this.saveMeta();\r\n  }\r\n\r\n  private loadMeta() {\r\n    const ret = this.store.get(this.options.meta_key);\r\n    if (ret && ret.v) {\r\n      (ret.v as string[]).forEach(key => this.meta.add(key));\r\n    }\r\n  }\r\n\r\n  private saveMeta() {\r\n    const metaData: string[] = [];\r\n    this.meta.forEach(key => metaData.push(key));\r\n    this.store.set(this.options.meta_key, { v: metaData, e: 0 });\r\n  }\r\n\r\n  getMeta() {\r\n    return this.meta;\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: set\r\n\r\n  /**\r\n   * 持久化缓存 `Observable` 对象，例如：\r\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\r\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\r\n   */\r\n  set<T>(\r\n    key: string,\r\n    data: Observable<T>,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): Observable<T>;\r\n  /**\r\n   * 持久化缓存 `Observable` 对象，例如：\r\n   * - `set('data/1', this.http.get('data/1')).subscribe()`\r\n   * - `set('data/1', this.http.get('data/1'), { expire: 10 }).subscribe()`\r\n   */\r\n  set(\r\n    key: string,\r\n    data: Observable<any>,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): Observable<any>;\r\n  /**\r\n   * 持久化缓存基础对象，例如：\r\n   * - `set('data/1', 1)`\r\n   * - `set('data/1', 1, { expire: 10 })`\r\n   */\r\n  set(\r\n    key: string,\r\n    data: Object,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): void;\r\n  /**\r\n   * 指定缓存类型进行缓存对象，例如内存缓存：\r\n   * - `set('data/1', 1, { type: 'm' })`\r\n   * - `set('data/1', 1, { type: 'm', expire: 10 })`\r\n   */\r\n  set(\r\n    key: string,\r\n    data: Object,\r\n    options: { type: 'm' | 's'; expire?: number },\r\n  ): void;\r\n  /**\r\n   * 缓存对象\r\n   */\r\n  set(\r\n    key: string,\r\n    data: any | Observable<any>,\r\n    options: {\r\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\r\n      type?: 'm' | 's';\r\n      /**\r\n       * 过期时间，单位 `秒`\r\n       */\r\n      expire?: number;\r\n    } = {},\r\n  ): any {\r\n    // expire\r\n    let e = 0;\r\n    if (options.expire) {\r\n      e = addSeconds(new Date(), options.expire).valueOf();\r\n    }\r\n    if (!(data instanceof Observable)) {\r\n      this.save(options.type, key, { v: data, e });\r\n      return;\r\n    }\r\n    return data.pipe(\r\n      tap((v: any) => {\r\n        this.save(options.type, key, { v, e });\r\n      }),\r\n    );\r\n  }\r\n\r\n  private save(type: 'm' | 's', key: string, value: ICache) {\r\n    if (type === 'm') {\r\n      this.memory.set(key, value);\r\n    } else {\r\n      this.store.set(this.options.prefix + key, value);\r\n      this.pushMeta(key);\r\n    }\r\n    this.runNotify(key, 'set');\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: get\r\n\r\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\r\n  get<T>(\r\n    key: string,\r\n    options?: {\r\n      mode: 'promise';\r\n      type?: 'm' | 's';\r\n      expire?: number;\r\n    },\r\n  ): Observable<T>;\r\n  /** 获取缓存数据，若 `key` 不存在则 `key` 作为HTTP请求缓存后返回 */\r\n  get(\r\n    key: string,\r\n    options?: {\r\n      mode: 'promise';\r\n      type?: 'm' | 's';\r\n      expire?: number;\r\n    },\r\n  ): Observable<any>;\r\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\r\n  get(\r\n    key: string,\r\n    options: {\r\n      mode: 'none';\r\n      type?: 'm' | 's';\r\n      expire?: number;\r\n    },\r\n  ): any;\r\n  get(\r\n    key: string,\r\n    options: {\r\n      mode?: 'promise' | 'none';\r\n      type?: 'm' | 's';\r\n      expire?: number;\r\n    } = {},\r\n  ): Observable<any> | any {\r\n    const isPromise =\r\n      options.mode !== 'none' && this.options.mode === 'promise';\r\n    const value: ICache = this.memory.has(key)\r\n      ? this.memory.get(key)\r\n      : this.store.get(this.options.prefix + key);\r\n    if (!value || (value.e && value.e > 0 && value.e < new Date().valueOf())) {\r\n      if (isPromise) {\r\n        return this.http\r\n          .get(key)\r\n          .pipe(\r\n            map((ret: any) =>\r\n              this._deepGet(ret, this.options.reName as string[], null),\r\n            ),\r\n            tap(v => this.set(key, v)),\r\n          );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    return isPromise ? of(value.v) : value.v;\r\n  }\r\n\r\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\r\n  getNone<T>(key: string): T;\r\n  /** 获取缓存数据，若 `key` 不存在或已过期则返回 null */\r\n  getNone(key: string): any {\r\n    return this.get(key, { mode: 'none' });\r\n  }\r\n\r\n  /**\r\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\r\n   */\r\n  tryGet<T>(\r\n    key: string,\r\n    data: Observable<T>,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): Observable<T>;\r\n  /**\r\n   * 获取缓存，若不存在则设置持久化缓存 `Observable` 对象\r\n   */\r\n  tryGet(\r\n    key: string,\r\n    data: Observable<any>,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): Observable<any>;\r\n  /**\r\n   * 获取缓存，若不存在则设置持久化缓存基础对象\r\n   */\r\n  tryGet(\r\n    key: string,\r\n    data: Object,\r\n    options?: { type?: 's'; expire?: number },\r\n  ): any;\r\n  /**\r\n   * 获取缓存，若不存在则设置指定缓存类型进行缓存对象\r\n   */\r\n  tryGet(\r\n    key: string,\r\n    data: Object,\r\n    options: { type: 'm' | 's'; expire?: number },\r\n  ): any;\r\n\r\n  /**\r\n   * 获取缓存，若不存在则设置缓存对象\r\n   */\r\n  tryGet(\r\n    key: string,\r\n    data: any | Observable<any>,\r\n    options: {\r\n      /** 存储类型，'m' 表示内存，'s' 表示持久 */\r\n      type?: 'm' | 's';\r\n      /**\r\n       * 过期时间，单位 `秒`\r\n       */\r\n      expire?: number;\r\n    } = {},\r\n  ): any {\r\n    const ret = this.getNone(key);\r\n    if (ret === null) {\r\n      if (!(data instanceof Observable)) {\r\n        this.set(key, data, <any>options);\r\n        return data;\r\n      }\r\n\r\n      return this.set(key, data as Observable<any>, <any>options);\r\n    }\r\n    return of(ret);\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: has\r\n\r\n  /** 是否缓存 `key` */\r\n  has(key: string): boolean {\r\n    return this.memory.has(key) || this.meta.has(key);\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: remove\r\n\r\n  private _remove(key: string, needNotify: boolean) {\r\n    if (needNotify) this.runNotify(key, 'remove');\r\n    if (this.memory.has(key)) {\r\n      this.memory.delete(key);\r\n      return;\r\n    }\r\n    this.store.remove(this.options.prefix + key);\r\n    this.removeMeta(key);\r\n  }\r\n\r\n  /** 移除缓存 */\r\n  remove(key: string) {\r\n    this._remove(key, true);\r\n  }\r\n\r\n  /** 清空所有缓存 */\r\n  clear() {\r\n    this.notifyBuffer.forEach((v, k) => this.runNotify(k, 'remove'));\r\n    this.memory.clear();\r\n    this.meta.forEach(key => this.store.remove(this.options.prefix + key));\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: notify\r\n\r\n  /**\r\n   * 设置监听频率，单位：毫秒且最低 `20ms`，默认：`3000ms`\r\n   */\r\n  set freq(value: number) {\r\n    this.freq_tick = Math.max(20, value);\r\n    this.abortExpireNotify();\r\n    this.startExpireNotify();\r\n  }\r\n\r\n  private startExpireNotify() {\r\n    this.checkExpireNotify();\r\n    this.runExpireNotify();\r\n  }\r\n\r\n  private runExpireNotify() {\r\n    this.freq_time = setTimeout(() => {\r\n      this.checkExpireNotify();\r\n      this.runExpireNotify();\r\n    }, this.freq_tick);\r\n  }\r\n\r\n  private checkExpireNotify() {\r\n    const removed: string[] = [];\r\n    this.notifyBuffer.forEach((v, key) => {\r\n      if (this.has(key) && this.getNone(key) === null) removed.push(key);\r\n    });\r\n    removed.forEach(key => {\r\n      this.runNotify(key, 'expire');\r\n      this._remove(key, false);\r\n    });\r\n  }\r\n\r\n  private abortExpireNotify() {\r\n    clearTimeout(this.freq_time);\r\n  }\r\n\r\n  private runNotify(key: string, type: CacheNotifyType) {\r\n    if (!this.notifyBuffer.has(key)) return;\r\n    this.notifyBuffer.get(key).next({ type, value: this.getNone(key) });\r\n  }\r\n\r\n  /**\r\n   * `key` 监听，当 `key` 变更、过期、移除时通知，注意以下若干细节：\r\n   *\r\n   * - 调用后除再次调用 `cancelNotify` 否则永远不过期\r\n   * - 监听器每 `freq` (默认：3秒) 执行一次过期检查\r\n   */\r\n  notify(key: string): Observable<CacheNotifyResult> {\r\n    if (!this.notifyBuffer.has(key)) {\r\n      const change$ = new BehaviorSubject<CacheNotifyResult>(this.getNone(key));\r\n      this.notifyBuffer.set(key, change$);\r\n    }\r\n    return this.notifyBuffer.get(key).asObservable();\r\n  }\r\n\r\n  /**\r\n   * 取消 `key` 监听\r\n   */\r\n  cancelNotify(key: string): void {\r\n    if (!this.notifyBuffer.has(key)) return;\r\n    this.notifyBuffer.get(key).unsubscribe();\r\n    this.notifyBuffer.delete(key);\r\n  }\r\n\r\n  /** `key` 是否已经监听 */\r\n  hasNotify(key: string): boolean {\r\n    return this.notifyBuffer.has(key);\r\n  }\r\n\r\n  /** 清空所有 `key` 的监听 */\r\n  clearNotify(): void {\r\n    this.notifyBuffer.forEach(v => v.unsubscribe());\r\n    this.notifyBuffer.clear();\r\n  }\r\n\r\n  // endregion\r\n\r\n  ngOnDestroy(): void {\r\n    this.memory.clear();\r\n    this.abortExpireNotify();\r\n    this.clearNotify();\r\n  }\r\n}\r\n","import { ICacheStore, ICache } from './interface';\r\n\r\nexport class LocalStorageCacheService implements ICacheStore {\r\n  get(key: string): ICache {\r\n    return JSON.parse(localStorage.getItem(key) || 'null') || null;\r\n  }\r\n\r\n  set(key: string, value: ICache): boolean {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n    return true;\r\n  }\r\n\r\n  remove(key: string) {\r\n    localStorage.removeItem(key);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { DC_STORE_STORAGE_TOKEN, ICacheStore } from './src/interface';\r\nimport { DelonCacheConfig } from './cache.config';\r\nimport { CacheService } from './src/cache.service';\r\nimport { LocalStorageCacheService } from './src/local-storage-cache.service';\r\n\r\n@NgModule({})\r\nexport class DelonCacheModule {\r\n  static forRoot(options?: DelonCacheConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: DelonCacheModule,\r\n      providers: [\r\n        DelonCacheConfig,\r\n        CacheService,\r\n        { provide: DC_STORE_STORAGE_TOKEN, useClass: LocalStorageCacheService },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"names":["DC_STORE_STORAGE_TOKEN","InjectionToken","Injectable","options","store","http","this","Map","Set","loadMeta","startExpireNotify","CacheService","obj","path","defaultValue","length","checkObj","reduce","o","k","key","meta","has","add","saveMeta","delete","ret","get","meta_key","v","forEach","_this","metaData","push","set","e","data","expire","addSeconds","Date","valueOf","Observable","pipe","tap","save","type","value","memory","prefix","pushMeta","runNotify","isPromise","mode","map","_deepGet","of","getNone","needNotify","remove","removeMeta","_remove","notifyBuffer","clear","Object","freq_tick","Math","max","abortExpireNotify","checkExpireNotify","runExpireNotify","freq_time","setTimeout","removed","clearTimeout","next","change$","BehaviorSubject","asObservable","unsubscribe","clearNotify","DelonCacheConfig","Inject","HttpClient","LocalStorageCacheService","JSON","parse","localStorage","getItem","setItem","stringify","removeItem","DelonCacheModule","ngModule","providers","provide","useClass","NgModule"],"mappings":"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"}