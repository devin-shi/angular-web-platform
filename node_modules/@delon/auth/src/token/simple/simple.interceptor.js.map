{"version":3,"file":"simple.interceptor.js","sourceRoot":"","sources":["../../../../../../packages/auth/token/simple/simple.interceptor.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,UAAU,EAAY,MAAM,eAAe,CAAC;AAMrD,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;;IAGT,6CAAe;;;;;;;;IACpD,kCAAM;;;;IAAN,UAAO,OAAwB;QAC7B,IAAI,CAAC,KAAK,qBAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAsB,CAAA,CAAC;QAC3E,MAAM,CAAC,CACL,IAAI,CAAC,KAAK;YACV,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CACtE,CAAC;KACH;;;;;;IAED,kCAAM;;;;;IAAN,UAAO,GAAqB,EAAE,OAAwB;QAAtD,iBA2BC;QA1BC,qBAAM,KAAK,GAAG,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAC/C,gBAAgB,EAChB,UAAC,CAAS,EAAE,CAAC,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAb,CAAa,CAChC,CAAC;QACF,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACjC,KAAK,QAAQ;gBACX,qBAAM,GAAG,GAAG,EAAE,CAAC;gBACf,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;gBACpC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;oBACd,UAAU,EAAE,GAAG;iBAChB,CAAC,CAAC;gBACH,KAAK,CAAC;YACR,KAAK,MAAM;gBACT,qBAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;gBAC5B,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;gBACrC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;oBACd,IAAI,EAAE,IAAI;iBACX,CAAC,CAAC;gBACH,KAAK,CAAC;YACR,KAAK,KAAK;gBACR,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;oBACd,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC;iBACzD,CAAC,CAAC;gBACH,KAAK,CAAC;SACT;QACD,MAAM,CAAC,GAAG,CAAC;KACZ;;gBArCF,UAAU;;4BATX;EAUuC,eAAe;SAAzC,iBAAiB","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpRequest } from '@angular/common/http';\r\n\r\nimport { DelonAuthConfig } from '../../auth.config';\r\nimport { SimpleTokenModel } from './simple.model';\r\nimport { BaseInterceptor } from '../base.interceptor';\r\nimport { DA_SERVICE_TOKEN } from '../interface';\r\n\r\n@Injectable()\r\nexport class SimpleInterceptor extends BaseInterceptor {\r\n  isAuth(options: DelonAuthConfig): boolean {\r\n    this.model = this.injector.get(DA_SERVICE_TOKEN).get() as SimpleTokenModel;\r\n    return (\r\n      this.model &&\r\n      (typeof this.model.token === 'string' && this.model.token.length > 0)\r\n    );\r\n  }\r\n\r\n  setReq(req: HttpRequest<any>, options: DelonAuthConfig): HttpRequest<any> {\r\n    const token = options.token_send_template.replace(\r\n      /\\$\\{([\\w]+)\\}/g,\r\n      (_: string, g) => this.model[g],\r\n    );\r\n    switch (options.token_send_place) {\r\n      case 'header':\r\n        const obj = {};\r\n        obj[options.token_send_key] = token;\r\n        req = req.clone({\r\n          setHeaders: obj,\r\n        });\r\n        break;\r\n      case 'body':\r\n        const body = req.body || {};\r\n        body[options.token_send_key] = token;\r\n        req = req.clone({\r\n          body: body,\r\n        });\r\n        break;\r\n      case 'url':\r\n        req = req.clone({\r\n          params: req.params.append(options.token_send_key, token),\r\n        });\r\n        break;\r\n    }\r\n    return req;\r\n  }\r\n}\r\n"]}