{"version":3,"file":"token.service.js","sourceRoot":"","sources":["../../../../../packages/auth/token/token.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAY,MAAM,EAAE,MAAM,eAAe,CAAC;AAE7D,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,cAAc,EAAU,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;;IAU/C,sBACU,SACwB;QADxB,YAAO,GAAP,OAAO;QACiB,UAAK,GAAL,KAAK;uBARS,IAAI,eAAe,CAEjE,IAAI,CAAC;KAOH;IAEJ,sBAAI,mCAAS;;;;QAAb;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;SAC/B;;;OAAA;IAED,sBAAI,kCAAQ;;;;QAIZ;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC;SAC9B;;;;;QAND,UAAa,GAAW;YACtB,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACtB;;;OAAA;;;;;IAMD,0BAAG;;;;IAAH,UAAI,IAAiB;QACnB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KACrD;;;;;;IAGD,0BAAG;;;;;IAAH,UAA2B,IAAoB;QAC7C,qBAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAC,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAM,EAAC,CAAC,CAAC,CAAC,mBAAC,IAAS,EAAC,CAAC;KACpE;;;;IAED,4BAAK;;;IAAL;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC3C;;;;IAED,6BAAM;;;IAAN;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KACnC;;gBA3CF,UAAU;;;;gBAFF,eAAe;gDAYnB,MAAM,SAAC,cAAc;;uBAlB1B;;SASa,YAAY","sourcesContent":["import { Injectable, Optional, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { share } from 'rxjs/operators';\r\nimport { ITokenService, ITokenModel } from './interface';\r\nimport { DA_STORE_TOKEN, IStore } from '../store/interface';\r\nimport { DelonAuthConfig } from '../auth.config';\r\n\r\n@Injectable()\r\nexport class TokenService implements ITokenService {\r\n  private change$: BehaviorSubject<ITokenModel> = new BehaviorSubject<\r\n    ITokenModel\r\n  >(null);\r\n  private data: ITokenModel;\r\n  private _redirect: string;\r\n\r\n  constructor(\r\n    private options: DelonAuthConfig,\r\n    @Inject(DA_STORE_TOKEN) private store: IStore,\r\n  ) {}\r\n\r\n  get login_url(): string {\r\n    return this.options.login_url;\r\n  }\r\n\r\n  set redirect(url: string) {\r\n    this._redirect = url;\r\n  }\r\n\r\n  get redirect() {\r\n    return this._redirect || '/';\r\n  }\r\n\r\n  set(data: ITokenModel): boolean {\r\n    this.change$.next(data);\r\n    return this.store.set(this.options.store_key, data);\r\n  }\r\n\r\n  get(type?: any);\r\n  get<T extends ITokenModel>(type?: { new (): T }): T {\r\n    const data = this.store.get(this.options.store_key);\r\n    return type ? (Object.assign(new type(), data) as T) : (data as T);\r\n  }\r\n\r\n  clear() {\r\n    this.change$.next(null);\r\n    this.store.remove(this.options.store_key);\r\n  }\r\n\r\n  change(): Observable<ITokenModel> {\r\n    return this.change$.pipe(share());\r\n  }\r\n}\r\n"]}