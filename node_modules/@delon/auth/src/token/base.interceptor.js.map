{"version":3,"file":"base.interceptor.js","sourceRoot":"","sources":["../../../../../packages/auth/token/base.interceptor.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAc,QAAQ,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAWL,iBAAiB,GAClB,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAK7C,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAG3C,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;;;;;IAGrC,yBAAkC;QAAA,aAAQ,GAAR,QAAQ;KAAc;;;;;;IAWxD,mCAAS;;;;;IAAT,UACE,GAAqB,EACrB,IAAiB;QAFnB,iBAmDC;QAzCC,qBAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAC3B,IAAI,eAAe,EAAE,EACrB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CACzC,CAAC;QACF,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpB,GAAG,CAAC,oCAAe,OAAO,CAAC,OAAmB;gBAAzC,IAAM,IAAI,SAAA;gBACb,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjD;SACF;QAED,EAAE,CAAC,CACD,OAAO,CAAC,mBAAmB;YAC3B,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAC5C,CAAC,CAAC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACzB;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACjC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,OAAO,CAAC,sBAAsB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC5C,UAAU,CAAC;oBACT,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBAC5C,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC;qBAC7D;oBAAC,IAAI,CAAC,CAAC;wBACN,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;qBACzD;iBACF,CAAC,CAAC;aACJ;;YAED,qBAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,EAAE,CAAC;gBAAC,EAAE,CAAC,GAAG,EAAE,CAAC;YACjB,MAAM,CAAC,IAAI,UAAU,CAAC,UAAC,QAAkC;gBACvD,qBAAM,GAAG,GAAG,IAAI,iBAAiB,CAAC;oBAChC,MAAM,EAAE,GAAG;oBACX,UAAU,EAAE,yDAAyD;iBACtE,CAAC,CAAC;gBACH,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC,CAAC;SACJ;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACzB;;;gBAzFkB,QAAQ,uBA2Bd,QAAQ;;0BA3BvB;;SA0BsB,eAAe","sourcesContent":["import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpSentEvent,\r\n  HttpHeaderResponse,\r\n  HttpProgressEvent,\r\n  HttpResponse,\r\n  HttpUserEvent,\r\n  HttpHeaders,\r\n  HttpEvent,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { _throw } from 'rxjs/observable/throw';\r\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\n\r\nimport { _HttpClient } from '@delon/theme';\r\n\r\nimport { ITokenModel } from './interface';\r\nimport { DelonAuthConfig } from '../auth.config';\r\nimport { WINDOW } from '../win_tokens';\r\n\r\nexport abstract class BaseInterceptor implements HttpInterceptor {\r\n  constructor(@Optional() protected injector: Injector) {}\r\n\r\n  protected model: ITokenModel;\r\n\r\n  abstract isAuth(options: DelonAuthConfig): boolean;\r\n\r\n  abstract setReq(\r\n    req: HttpRequest<any>,\r\n    options: DelonAuthConfig,\r\n  ): HttpRequest<any>;\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n  ): Observable<\r\n    | HttpSentEvent\r\n    | HttpHeaderResponse\r\n    | HttpProgressEvent\r\n    | HttpResponse<any>\r\n    | HttpUserEvent<any>\r\n  > {\r\n    const options = Object.assign(\r\n      new DelonAuthConfig(),\r\n      this.injector.get(DelonAuthConfig, null),\r\n    );\r\n    if (options.ignores) {\r\n      for (const item of options.ignores as RegExp[]) {\r\n        if (item.test(req.url)) return next.handle(req);\r\n      }\r\n    }\r\n\r\n    if (\r\n      options.allow_anonymous_key &&\r\n      req.params.has(options.allow_anonymous_key)\r\n    ) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    if (this.isAuth(options)) {\r\n      req = this.setReq(req, options);\r\n    } else {\r\n      if (options.token_invalid_redirect === true) {\r\n        setTimeout(() => {\r\n          if (/^https?:\\/\\//g.test(options.login_url)) {\r\n            this.injector.get(WINDOW).location.href = options.login_url;\r\n          } else {\r\n            this.injector.get(Router).navigate([options.login_url]);\r\n          }\r\n        });\r\n      }\r\n      // observer.error：会导倒后续拦截器无法触发，因此，需要处理 `_HttpClient` 状态问题\r\n      const hc = this.injector.get(_HttpClient, null);\r\n      if (hc) hc.end();\r\n      return new Observable((observer: Observer<HttpEvent<any>>) => {\r\n        const res = new HttpErrorResponse({\r\n          status: 401,\r\n          statusText: `From Simple Intercept --> http://ng-alain.com/docs/auth`,\r\n        });\r\n        observer.error(res);\r\n      });\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n"]}