/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injector, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { HttpErrorResponse, } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { _HttpClient } from '@delon/theme';
import { DelonAuthConfig } from '../auth.config';
import { WINDOW } from '../win_tokens';
/**
 * @abstract
 */
var BaseInterceptor = /** @class */ (function () {
    function BaseInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    BaseInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        var /** @type {?} */ options = Object.assign(new DelonAuthConfig(), this.injector.get(DelonAuthConfig, null));
        if (options.ignores) {
            for (var _i = 0, _a = /** @type {?} */ (options.ignores); _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.test(req.url))
                    return next.handle(req);
            }
        }
        if (options.allow_anonymous_key &&
            req.params.has(options.allow_anonymous_key)) {
            return next.handle(req);
        }
        if (this.isAuth(options)) {
            req = this.setReq(req, options);
        }
        else {
            if (options.token_invalid_redirect === true) {
                setTimeout(function () {
                    if (/^https?:\/\//g.test(options.login_url)) {
                        _this.injector.get(WINDOW).location.href = options.login_url;
                    }
                    else {
                        _this.injector.get(Router).navigate([options.login_url]);
                    }
                });
            }
            // observer.error：会导倒后续拦截器无法触发，因此，需要处理 `_HttpClient` 状态问题
            var /** @type {?} */ hc = this.injector.get(_HttpClient, null);
            if (hc)
                hc.end();
            return new Observable(function (observer) {
                var /** @type {?} */ res = new HttpErrorResponse({
                    status: 401,
                    statusText: "From Simple Intercept --> http://ng-alain.com/docs/auth",
                });
                observer.error(res);
            });
        }
        return next.handle(req);
    };
    /** @nocollapse */
    BaseInterceptor.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Optional },] },
    ]; };
    return BaseInterceptor;
}());
export { BaseInterceptor };
function BaseInterceptor_tsickle_Closure_declarations() {
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BaseInterceptor.ctorParameters;
    /** @type {?} */
    BaseInterceptor.prototype.model;
    /** @type {?} */
    BaseInterceptor.prototype.injector;
    /**
     * @abstract
     * @param {?} options
     * @return {?}
     */
    BaseInterceptor.prototype.isAuth = function (options) { };
    /**
     * @abstract
     * @param {?} req
     * @param {?} options
     * @return {?}
     */
    BaseInterceptor.prototype.setReq = function (req, options) { };
}
//# sourceMappingURL=base.interceptor.js.map