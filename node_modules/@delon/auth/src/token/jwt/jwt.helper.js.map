{"version":3,"file":"jwt.helper.js","sourceRoot":"","sources":["../../../../../../packages/auth/token/jwt/jwt.helper.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAAM,0BAA0B,GAAW;IACzC,qBAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACvD,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1B,KAAK,CAAC,EAAE,CAAC;YACP,KAAK,CAAC;SACP;QACD,KAAK,CAAC,EAAE,CAAC;YACP,MAAM,IAAI,IAAI,CAAC;YACf,KAAK,CAAC;SACP;QACD,KAAK,CAAC,EAAE,CAAC;YACP,MAAM,IAAI,GAAG,CAAC;YACd,KAAK,CAAC;SACP;QACD,SAAS,CAAC;YACR,MAAM,IAAI,KAAK,CACb,mEAAmE,CACpE,CAAC;SACH;KACF;IACD,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACjC;;;;;AAED,mBAAmB,GAAW;IAC5B,qBAAM,KAAK,GACT,mEAAmE,CAAC;IACtE,qBAAI,MAAM,GAAW,EAAE,CAAC;IAExB,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAErC,GAAG,CAAC,CAAC;;IAEH,qBAAI,EAAE,GAAW,CAAC,mBAAE,EAAE,SAAK,mBAAE,MAAM,SAAK,mBAAE,GAAG,GAAW,CAAC;;IAEzD,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;;IAE5B,CAAC,MAAM;QACP,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;;;YAG1C,EAAE,EAAE,GAAG,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC,EACL,CAAC;;QAED,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC;IACD,MAAM,CAAC,MAAM,CAAC;CACf;;;;;AAGD,0BAA0B,GAAQ;IAChC,MAAM,CAAC,kBAAkB,CACvB,KAAK,CAAC,SAAS,CAAC,GAAG;SAChB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,UAAC,CAAM;QAC3B,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;SACD,IAAI,CAAC,EAAE,CAAC,CACZ,CAAC;CACH","sourcesContent":["export function urlBase64Decode(str: string): string {\r\n  let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n  switch (output.length % 4) {\r\n    case 0: {\r\n      break;\r\n    }\r\n    case 2: {\r\n      output += '==';\r\n      break;\r\n    }\r\n    case 3: {\r\n      output += '=';\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error(\r\n        `'atob' failed: The string to be decoded is not correctly encoded.`,\r\n      );\r\n    }\r\n  }\r\n  return b64DecodeUnicode(output);\r\n}\r\n\r\nfunction b64decode(str: string): string {\r\n  const chars =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n  let output: string = '';\r\n\r\n  str = String(str).replace(/=+$/, '');\r\n\r\n  for (\r\n    // initialize result and counters\r\n    let bc: number = 0, bs: any, buffer: any, idx: number = 0;\r\n    // get next character\r\n    (buffer = str.charAt(idx++));\r\n    // character found in table? initialize bit storage and add its ascii value;\r\n    ~buffer &&\r\n    ((bs = bc % 4 ? bs * 64 + buffer : buffer),\r\n    // and if not first of each 4 characters,\r\n    // convert the first 8 bits to one ascii character\r\n    bc++ % 4)\r\n      ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\r\n      : 0\r\n  ) {\r\n    // try to find character in table (0-63, not found => -1)\r\n    buffer = chars.indexOf(buffer);\r\n  }\r\n  return output;\r\n}\r\n\r\n// https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\r\nfunction b64DecodeUnicode(str: any) {\r\n  return decodeURIComponent(\r\n    Array.prototype.map\r\n      .call(b64decode(str), (c: any) => {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join(''),\r\n  );\r\n}\r\n"]}