{"version":3,"file":"social.service.js","sourceRoot":"","sources":["../../../../../packages/auth/social/social.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { Injectable, Inject, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport {\r\n  ITokenModel,\r\n  ITokenService,\r\n  DA_SERVICE_TOKEN,\r\n} from '../token/interface';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nconst OPENTYPE = '_delonAuthSocialType';\r\nconst HREFCALLBACK = '_delonAuthSocialCallbackByHref';\r\n\r\nexport type SocialOpenType = 'href' | 'window';\r\n\r\n@Injectable()\r\nexport class SocialService implements OnDestroy {\r\n  private _win: Window;\r\n  private _win$: any;\r\n  private observer: Observer<ITokenModel>;\r\n\r\n  constructor(\r\n    @Inject(DA_SERVICE_TOKEN) private tokenService: ITokenService,\r\n    @Inject(DOCUMENT) private doc: any,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  /**\r\n   * 使用窗体打开授权页，返回值是 `Observable<ITokenModel>` 用于订阅授权后返回的结果\r\n   * @param url 获取授权地址\r\n   * @param callback 回调路由地址\r\n   * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值\r\n   */\r\n  login(\r\n    url: string,\r\n    callback?: string,\r\n    options?: {\r\n      type?: 'window';\r\n      windowFeatures?: string;\r\n    },\r\n  ): Observable<ITokenModel>;\r\n\r\n  /**\r\n   * 跳转至授权页\r\n   * @param url 获取授权地址\r\n   * @param callback 回调路由地址\r\n   */\r\n  login(\r\n    url: string,\r\n    callback?: string,\r\n    options?: {\r\n      type?: 'href';\r\n    },\r\n  ): void;\r\n\r\n  /**\r\n   * 跳转至登录页，若为 `type=window` 时，返回值是 `Observable<ITokenModel>`\r\n   * @param url 获取授权地址\r\n   * @param callback 当 `type=href` 成功时的回调路由地址\r\n   * @param options.type 打开方式，默认 `window`\r\n   * @param options.windowFeatures 等同 `window.open` 的 `features` 参数值\r\n   */\r\n  login(\r\n    url: string,\r\n    callback: string = '/',\r\n    options: {\r\n      type?: SocialOpenType;\r\n      windowFeatures?: string;\r\n    } = {},\r\n  ): Observable<ITokenModel> | void {\r\n    options = Object.assign(\r\n      {\r\n        type: 'window',\r\n        windowFeatures:\r\n          'location=yes,height=570,width=520,scrollbars=yes,status=yes',\r\n      },\r\n      options,\r\n    );\r\n    localStorage.setItem(OPENTYPE, options.type);\r\n    localStorage.setItem(HREFCALLBACK, callback);\r\n    if (options.type === 'href') {\r\n      this.doc.location.href = url;\r\n      return;\r\n    }\r\n\r\n    this._win = window.open(url, '_blank', options.windowFeatures);\r\n    this._win$ = setInterval(() => {\r\n      if (this._win && this._win.closed) {\r\n        this.ngOnDestroy();\r\n\r\n        let model = this.tokenService.get();\r\n        if (model && !model.token) model = null;\r\n\r\n        // 触发变更通知\r\n        if (model) {\r\n          this.tokenService.set(model);\r\n        }\r\n\r\n        this.observer.next(model);\r\n        this.observer.complete();\r\n      }\r\n    }, 100);\r\n    return Observable.create((observer: Observer<ITokenModel>) => {\r\n      this.observer = observer;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 授权成功后的回调处理\r\n   *\r\n   * @param rawData 指定回调认证信息，为空时从根据当前URL解析\r\n   */\r\n  callback(rawData?: string | ITokenModel): ITokenModel {\r\n    // from uri\r\n    if (!rawData && this.router.url.indexOf('?') === -1) {\r\n      throw new Error(`url muse contain a ?`);\r\n    }\r\n    // parse\r\n    let data: ITokenModel = { token: `` };\r\n    if (typeof rawData === 'string') {\r\n      const rightUrl = rawData.split('?')[1].split('#')[0];\r\n      data = <any>this.router.parseUrl('./?' + rightUrl).queryParams;\r\n    } else {\r\n      data = rawData;\r\n    }\r\n\r\n    if (!data || !data.token) throw new Error(`invalide token data`);\r\n    this.tokenService.set(data);\r\n\r\n    const url = localStorage.getItem(HREFCALLBACK) || '/';\r\n    localStorage.removeItem(HREFCALLBACK);\r\n    const type = localStorage.getItem(OPENTYPE);\r\n    localStorage.removeItem(OPENTYPE);\r\n    if (type === 'window') {\r\n      window.close();\r\n    } else {\r\n      this.router.navigateByUrl(url);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearInterval(this._win$);\r\n    this._win$ = null;\r\n  }\r\n}\r\n"]}