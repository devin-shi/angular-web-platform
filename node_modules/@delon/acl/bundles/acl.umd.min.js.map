{"version":3,"file":"acl.umd.min.js","sources":["../../../../packages/acl/services/acl.service.ts","../../../../packages/acl/directives/acl.directive.ts","../../../../packages/acl/acl.config.ts","../../../../packages/acl/services/acl-guard.ts","../../../../packages/acl/acl.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { ACLType, ACLCanType } from './acl.type';\n\n/**\n * 访问控制服务\n */\n@Injectable()\nexport class ACLService {\n  private roles: string[] = [];\n  private abilities: (number | string)[] = [];\n  private full = false;\n  private aclChange: BehaviorSubject<ACLType | boolean> = new BehaviorSubject<\n    ACLType | boolean\n  >(null);\n\n  /** ACL变更通知 */\n  get change(): Observable<ACLType | boolean> {\n    return this.aclChange.asObservable();\n  }\n\n  /** 获取所有数据 */\n  get data() {\n    return {\n      full: this.full,\n      roles: this.roles,\n      abilities: this.abilities,\n    };\n  }\n\n  private parseACLType(val: string | string[] | ACLType): ACLType {\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      return <ACLType>val;\n    }\n    if (Array.isArray(val)) {\n      return <ACLType>{ role: <string[]>val };\n    }\n    return <ACLType>{\n      role: [val],\n    };\n  }\n\n  /**\n   * 设置当前用户角色或权限能力（会先清除所有）\n   */\n  set(value: ACLType) {\n    this.abilities = [];\n    this.roles = [];\n    this.add(value);\n    this.aclChange.next(value);\n  }\n\n  /**\n   * 标识当前用户为全量，即不受限\n   */\n  setFull(val: boolean) {\n    this.full = val;\n    this.aclChange.next(val);\n  }\n\n  /**\n   * 设置当前用户权限能力（会先清除所有）\n   */\n  setAbility(abilities: (number | string)[]) {\n    this.set(<ACLType>{ ability: abilities });\n  }\n\n  /**\n   * 设置当前用户角色（会先清除所有）\n   */\n  setRole(roles: string[]) {\n    this.set(<ACLType>{ role: roles });\n  }\n\n  /**\n   * 为当前用户增加角色或权限能力\n   */\n  add(value: ACLType) {\n    if (value.role && value.role.length > 0) {\n      this.roles.push(...value.role);\n    }\n    if (value.ability && value.ability.length > 0) {\n      this.abilities.push(...value.ability);\n    }\n  }\n\n  /**\n   * 为当前用户附加角色\n   */\n  attachRole(roles: string[]) {\n    for (const val of roles) {\n      if (!this.roles.includes(val)) {\n        this.roles.push(val);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n\n  /**\n   * 为当前用户附加权限\n   */\n  attachAbility(abilities: (number | string)[]) {\n    for (const val of abilities) {\n      if (!this.abilities.includes(val)) {\n        this.abilities.push(val);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n\n  /**\n   * 为当前用户移除角色\n   */\n  removeRole(roles: string[]) {\n    for (const val of roles) {\n      const idx = this.roles.indexOf(val);\n      if (idx !== -1) {\n        this.roles.splice(idx, 1);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n\n  /**\n   * 为当前用户移除权限\n   */\n  removeAbility(abilities: (number | string)[]) {\n    for (const val of abilities) {\n      const idx = this.abilities.indexOf(val);\n      if (idx !== -1) {\n        this.abilities.splice(idx, 1);\n      }\n    }\n    this.aclChange.next(this.data);\n  }\n\n  /**\n   * 当前用户是否有对应角色，其实 `number` 表示Ability\n   *\n   * - 当 `full: true` 或参数 `null` 时返回 `true`\n   * - 若使用 `ACLType` 参数，可以指定 `mode` 校验模式\n   */\n  can(roleOrAbility: ACLCanType): boolean {\n    if (this.full === true || !roleOrAbility) {\n      return true;\n    }\n\n    let t: ACLType = {};\n    if (typeof roleOrAbility === 'number') {\n      t = { ability: [roleOrAbility] };\n    } else if (\n      Array.isArray(roleOrAbility) &&\n      roleOrAbility.length > 0 &&\n      typeof roleOrAbility[0] === 'number'\n    ) {\n      t = { ability: roleOrAbility };\n    } else {\n      t = this.parseACLType(roleOrAbility);\n    }\n\n    if (t.role) {\n      if (t.mode === 'allOf') return t.role.every(v => this.roles.includes(v));\n      else return t.role.some(v => this.roles.includes(v));\n    }\n    if (t.ability) {\n      if (t.mode === 'allOf')\n        return (t.ability as any[]).every(v => this.abilities.includes(v));\n      else return (t.ability as any[]).some(v => this.abilities.includes(v));\n    }\n    return false;\n  }\n\n  /** @inner */\n  parseAbility(value: ACLCanType): ACLCanType {\n    if (\n      typeof value === 'number' ||\n      typeof value === 'string' ||\n      Array.isArray(value)\n    ) {\n      value = <ACLType>{ ability: Array.isArray(value) ? value : [value] };\n    }\n    delete value.role;\n    return value;\n  }\n\n  /**\n   * 当前用户是否有对应权限点\n   */\n  canAbility(value: ACLCanType): boolean {\n    return this.can(this.parseAbility(value));\n  }\n}\n","import {\r\n  Directive,\r\n  Input,\r\n  ElementRef,\r\n  Renderer2,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { ACLService } from '../services/acl.service';\r\nimport { ACLCanType } from '../services/acl.type';\r\n\r\n@Directive({\r\n  selector: '[acl]',\r\n})\r\nexport class ACLDirective implements OnDestroy {\r\n  private _value: any;\r\n  private change$: Subscription;\r\n\r\n  @Input('acl')\r\n  set acl(value: ACLCanType) {\r\n    this.set(value);\r\n  }\r\n\r\n  @Input('acl-ability')\r\n  set ability(value: ACLCanType) {\r\n    this.set(this.srv.parseAbility(value));\r\n  }\r\n\r\n  private set(value: ACLCanType) {\r\n    const CLS = 'acl__hide';\r\n    const el = this.el.nativeElement;\r\n    if (this.srv.can(value)) {\r\n      this.renderer.removeClass(el, CLS);\r\n    } else {\r\n      this.renderer.addClass(el, CLS);\r\n    }\r\n    this._value = value;\r\n  }\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private srv: ACLService,\r\n  ) {\r\n    this.change$ = <any>this.srv.change.subscribe(() => this.set(this._value));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.change$.unsubscribe();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DelonACLConfig {\r\n  /**\r\n   * 路由守卫失败后跳转，默认：`/403`\r\n   */\r\n  guard_url? = '/403';\r\n}\r\n","import {\r\n  CanActivate,\r\n  CanActivateChild,\r\n  CanLoad,\r\n  ActivatedRouteSnapshot,\r\n  Route,\r\n  RouterStateSnapshot,\r\n  Router,\r\n} from '@angular/router';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ACLService } from './acl.service';\r\nimport { ACLCanType } from './acl.type';\r\nimport { DelonACLConfig } from '../acl.config';\r\n\r\n@Injectable()\r\nexport class ACLGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  constructor(\r\n    private srv: ACLService,\r\n    private router: Router,\r\n    private options: DelonACLConfig,\r\n  ) {}\r\n\r\n  private process(\r\n    guard: ACLCanType | Observable<ACLCanType>,\r\n  ): Observable<boolean> {\r\n    return (guard && guard instanceof Observable\r\n      ? guard\r\n      : of(\r\n          typeof guard !== 'undefined' && guard !== null\r\n            ? (guard as ACLCanType)\r\n            : null,\r\n        )\r\n    ).pipe(\r\n      map(v => this.srv.can(v)),\r\n      tap(v => {\r\n        if (v) return;\r\n        this.router.navigateByUrl(this.options.guard_url);\r\n      }),\r\n    );\r\n  }\r\n\r\n  // lazy loading\r\n  canLoad(route: Route): Observable<boolean> {\r\n    return this.process((route.data && route.data.guard) || null);\r\n  }\r\n  // all children route\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot,\r\n  ): Observable<boolean> {\r\n    return this.canActivate(childRoute, state);\r\n  }\r\n  // route\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot,\r\n  ): Observable<boolean> {\r\n    return this.process((route.data && route.data.guard) || null);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DelonACLConfig } from './acl.config';\r\nimport { ACLGuard } from './services/acl-guard';\r\n\r\n// region: import\r\nimport { ACLService } from './services/acl.service';\r\nconst SERVICES = [ACLService, ACLGuard];\r\n\r\n// components\r\n\r\nimport { ACLDirective } from './directives/acl.directive';\r\nconst COMPONENTS = [ACLDirective];\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n})\r\nexport class DelonACLModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: DelonACLModule,\r\n      providers: [DelonACLConfig, ...SERVICES],\r\n    };\r\n  }\r\n}\r\n"],"names":["BehaviorSubject","Object","ACLService","this","aclChange","asObservable","full","roles","abilities","val","Array","isArray","role","value","add","next","set","ability","length","_a","push","_b","roles_1","_i","includes","data","abilities_1","roles_2","idx","indexOf","splice","abilities_2","roleOrAbility","t","parseACLType","mode","every","v","_this","some","can","parseAbility","Injectable","el","renderer","srv","change$","change","subscribe","_value","ACLDirective","CLS","nativeElement","removeClass","addClass","unsubscribe","Directive","selector","ElementRef","Renderer2","Input","router","options","ACLGuard","guard","Observable","of","pipe","map","tap","navigateByUrl","guard_url","route","process","childRoute","state","canActivate","Router","DelonACLConfig","SERVICES","COMPONENTS","DelonACLModule","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}