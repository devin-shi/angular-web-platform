{"version":3,"file":"acl.directive.js","sourceRoot":"","sources":["../../../../../packages/acl/directives/acl.directive.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,SAAS,GAEV,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;;IA+BnD,sBACU,IACA,UACA;QAHV,iBAMC;QALS,OAAE,GAAF,EAAE;QACF,aAAQ,GAAR,QAAQ;QACR,QAAG,GAAH,GAAG;QAEX,IAAI,CAAC,OAAO,qBAAQ,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,EAArB,CAAqB,CAAC,CAAA,CAAC;KAC5E;0BA1BG,6BAAG;;;;;kBAAC,KAAiB;YACvB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;;;;0BAId,iCAAO;;;;;kBAAC,KAAiB;YAC3B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;;;;;;;;IAGjC,0BAAG;;;;cAAC,KAAiB;QAC3B,qBAAM,GAAG,GAAG,WAAW,CAAC;QACxB,qBAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;QACjC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;SACpC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;;;;IAWtB,kCAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;KAC5B;;gBAtCF,SAAS,SAAC;oBACT,QAAQ,EAAE,OAAO;iBAClB;;;;gBAVC,UAAU;gBACV,SAAS;gBAIF,UAAU;;;wBAUhB,KAAK,SAAC,KAAK;4BAKX,KAAK,SAAC,aAAa;;uBAvBtB;;SAca,YAAY","sourcesContent":["import {\r\n  Directive,\r\n  Input,\r\n  ElementRef,\r\n  Renderer2,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { ACLService } from '../services/acl.service';\r\nimport { ACLCanType } from '../services/acl.type';\r\n\r\n@Directive({\r\n  selector: '[acl]',\r\n})\r\nexport class ACLDirective implements OnDestroy {\r\n  private _value: any;\r\n  private change$: Subscription;\r\n\r\n  @Input('acl')\r\n  set acl(value: ACLCanType) {\r\n    this.set(value);\r\n  }\r\n\r\n  @Input('acl-ability')\r\n  set ability(value: ACLCanType) {\r\n    this.set(this.srv.parseAbility(value));\r\n  }\r\n\r\n  private set(value: ACLCanType) {\r\n    const CLS = 'acl__hide';\r\n    const el = this.el.nativeElement;\r\n    if (this.srv.can(value)) {\r\n      this.renderer.removeClass(el, CLS);\r\n    } else {\r\n      this.renderer.addClass(el, CLS);\r\n    }\r\n    this._value = value;\r\n  }\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    private srv: ACLService,\r\n  ) {\r\n    this.change$ = <any>this.srv.change.subscribe(() => this.set(this._value));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.change$.unsubscribe();\r\n  }\r\n}\r\n"]}