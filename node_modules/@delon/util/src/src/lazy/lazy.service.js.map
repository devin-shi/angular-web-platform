{"version":3,"file":"lazy.service.js","sourceRoot":"","sources":["../../../../../../packages/util/src/lazy/lazy.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { share, filter } from 'rxjs/operators';\r\n\r\nexport interface LazyResult {\r\n  path: string;\r\n  loaded: boolean;\r\n  status: 'ok' | 'error';\r\n}\r\n\r\n@Injectable()\r\nexport class LazyService {\r\n  private list: any = {};\r\n  private cached: any = {};\r\n  private _notify: BehaviorSubject<LazyResult[]> = new BehaviorSubject<\r\n    LazyResult[]\r\n  >([]);\r\n\r\n  constructor(@Inject(DOCUMENT) private doc: any) {}\r\n\r\n  get change(): Observable<LazyResult[]> {\r\n    return this._notify\r\n      .asObservable()\r\n      .pipe(share(), filter(ls => ls.length !== 0));\r\n  }\r\n\r\n  clear(): void {\r\n    this.list = {};\r\n    this.cached = {};\r\n  }\r\n\r\n  load(paths: string | string[]): Promise<LazyResult[]> {\r\n    if (!Array.isArray(paths)) paths = [paths];\r\n\r\n    const promises: Promise<LazyResult>[] = [];\r\n    paths.forEach(path => {\r\n      if (path.includes('.js')) promises.push(this.loadScript(path));\r\n      else promises.push(this.loadStyle(path));\r\n    });\r\n\r\n    return Promise.all(promises).then(res => {\r\n      this._notify.next(res);\r\n      return Promise.resolve(res);\r\n    });\r\n  }\r\n\r\n  loadScript(path: string): Promise<LazyResult> {\r\n    return new Promise(resolve => {\r\n      if (this.list[path] === true) {\r\n        resolve(this.cached[path]);\r\n        return;\r\n      }\r\n\r\n      this.list[path] = true;\r\n      const onSuccess = (item: any) => {\r\n        this.cached[path] = item;\r\n        resolve(item);\r\n      };\r\n\r\n      const node = this.doc.createElement('script');\r\n      node.type = 'text/javascript';\r\n      node.src = path;\r\n      node.charset = 'utf-8';\r\n      if ((<any>node).readyState) {\r\n        // IE\r\n        (<any>node).onreadystatechange = () => {\r\n          if (\r\n            (<any>node).readyState === 'loaded' ||\r\n            (<any>node).readyState === 'complete'\r\n          ) {\r\n            (<any>node).onreadystatechange = null;\r\n            onSuccess({\r\n              path: path,\r\n              loaded: true,\r\n              status: 'ok',\r\n            });\r\n          }\r\n        };\r\n      } else {\r\n        node.onload = () => {\r\n          onSuccess({\r\n            path: path,\r\n            loaded: true,\r\n            status: 'ok',\r\n          });\r\n        };\r\n      }\r\n      node.onerror = (error: any) =>\r\n        onSuccess({\r\n          path: path,\r\n          loaded: false,\r\n          status: 'error',\r\n        });\r\n      this.doc.getElementsByTagName('head')[0].appendChild(node);\r\n    });\r\n  }\r\n\r\n  loadStyle(path: string, rel = 'stylesheet'): Promise<LazyResult> {\r\n    return new Promise(resolve => {\r\n      if (this.list[path] === true) {\r\n        resolve(this.cached[path]);\r\n        return;\r\n      }\r\n\r\n      this.list[path] = true;\r\n      const onSuccess = (item: any) => {\r\n        this.cached[path] = item;\r\n        resolve(item);\r\n      };\r\n\r\n      const node = this.doc.createElement('link');\r\n      node.rel = rel;\r\n      node.type = 'text/css';\r\n      node.href = path;\r\n      this.doc.getElementsByTagName('head')[0].appendChild(node);\r\n      onSuccess({\r\n        path: path,\r\n        loaded: true,\r\n        status: 'ok',\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}