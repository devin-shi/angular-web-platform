{"version":3,"file":"mock.interceptor.js","sourceRoot":"","sources":["../../../../../packages/mock/src/mock.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpSentEvent,\r\n  HttpHeaderResponse,\r\n  HttpProgressEvent,\r\n  HttpResponse,\r\n  HttpUserEvent,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n  HttpEventType,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { delay } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockService } from './mock.service';\r\nimport { MockStatusError } from './status.error';\r\nimport { MockRequest } from './interface';\r\n\r\n@Injectable()\r\nexport class MockInterceptor implements HttpInterceptor {\r\n  constructor(private injector: Injector) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n  ): Observable<\r\n    | HttpSentEvent\r\n    | HttpHeaderResponse\r\n    | HttpProgressEvent\r\n    | HttpResponse<any>\r\n    | HttpUserEvent<any>\r\n  > {\r\n    const src = this.injector.get(MockService);\r\n    const config = Object.assign(\r\n      {\r\n        delay: 300,\r\n        force: false,\r\n        log: true,\r\n      },\r\n      this.injector.get(DelonMockConfig, null),\r\n    );\r\n    const rule = src.getRule(req.method, req.url);\r\n    if (!rule && !config.force) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    let res: any;\r\n    switch (typeof rule.callback) {\r\n      case 'function':\r\n        const mockRequest: MockRequest = {\r\n          original: req,\r\n          body: req.body,\r\n          queryString: {},\r\n          headers: {},\r\n          params: rule.params,\r\n        };\r\n\r\n        req.params\r\n          .keys()\r\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\r\n        req.headers\r\n          .keys()\r\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\r\n\r\n        try {\r\n          res = rule.callback.call(this, mockRequest);\r\n        } catch (e) {\r\n          let errRes: HttpErrorResponse;\r\n          if (e instanceof MockStatusError) {\r\n            errRes = new HttpErrorResponse({\r\n              url: req.url,\r\n              headers: req.headers,\r\n              status: e.status,\r\n              statusText: e.statusText || 'Unknown Error',\r\n              error: e.error,\r\n            });\r\n            if (config.log)\r\n              console.log(\r\n                `%c ðŸ‘½MOCK ${e.status} STATUS `,\r\n                'background:#000;color:#bada55',\r\n                req.url,\r\n                errRes,\r\n                req,\r\n              );\r\n          } else {\r\n            console.error(\r\n              `Please use MockStatusError to throw status error`,\r\n              e,\r\n              req,\r\n            );\r\n          }\r\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\r\n            observer.error(errRes);\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        res = rule.callback;\r\n        break;\r\n    }\r\n\r\n    const response: HttpResponse<any> = new HttpResponse({\r\n      status: 200,\r\n      body: res,\r\n      url: req.url,\r\n    });\r\n    if (config.log)\r\n      console.log(\r\n        '%c ðŸ‘½MOCK ',\r\n        'background:#000;color:#bada55',\r\n        req.url,\r\n        response,\r\n        req,\r\n      );\r\n    return of(response).pipe(delay(config.delay));\r\n  }\r\n}\r\n"]}