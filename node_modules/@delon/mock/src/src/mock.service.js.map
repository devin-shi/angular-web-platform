{"version":3,"file":"mock.service.js","sourceRoot":"","sources":["../../../../../packages/mock/src/mock.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockCachedRule, MockRule } from './interface';\r\n\r\n@Injectable()\r\nexport class MockService implements OnDestroy {\r\n  private cached: MockCachedRule[] = [];\r\n\r\n  constructor(private config: DelonMockConfig) {\r\n    this.applyMock();\r\n    delete this.config.data;\r\n  }\r\n\r\n  // region: parse rule\r\n\r\n  private applyMock() {\r\n    this.cached = [];\r\n    try {\r\n      this.realApplyMock();\r\n    } catch (e) {\r\n      this.outputError(e);\r\n    }\r\n  }\r\n\r\n  private realApplyMock() {\r\n    const data = this.config.data;\r\n    if (!data) return;\r\n    Object.keys(data).forEach((key: string) => {\r\n      const rules = data[key];\r\n      if (!rules) return;\r\n      Object.keys(rules).forEach((ruleKey: string) => {\r\n        const value = rules[ruleKey];\r\n        if (\r\n          !(\r\n            typeof value === 'function' ||\r\n            typeof value === 'object' ||\r\n            typeof value === 'string'\r\n          )\r\n        )\r\n          throw Error(\r\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\r\n          );\r\n        const rule = this.genRule(ruleKey, value);\r\n        if (\r\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\r\n            rule.method,\r\n          ) === -1\r\n        ) {\r\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\r\n        }\r\n        const item = this.cached.find(\r\n          w => w.url === rule.url && w.method === rule.method,\r\n        );\r\n        if (item) {\r\n          item.callback = rule.callback;\r\n        } else {\r\n          this.cached.push(rule);\r\n        }\r\n      });\r\n    });\r\n    // regular ordering\r\n    this.cached.sort(\r\n      (a, b) =>\r\n        (b.martcher || '').toString().length -\r\n        (a.martcher || '').toString().length,\r\n    );\r\n  }\r\n\r\n  private genRule(key: string, callback: any): MockCachedRule {\r\n    let method = 'GET';\r\n    let url = key;\r\n\r\n    if (key.indexOf(' ') > -1) {\r\n      const splited = key.split(' ');\r\n      method = splited[0].toLowerCase();\r\n      url = splited[1];\r\n    }\r\n\r\n    let martcher: RegExp = null;\r\n    let segments: string[] = [];\r\n    if (~url.indexOf(':')) {\r\n      segments = url!\r\n        .split('/')\r\n        .filter(segment => segment.startsWith(':'))\r\n        .map(v => v.substring(1));\r\n      const reStr = url!\r\n        .split('/')\r\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\r\n        .join('/');\r\n      martcher = new RegExp(reStr, 'i');\r\n    } else if (/(\\([^)]+\\))/i.test(url)) {\r\n      martcher = new RegExp(url, 'i');\r\n    }\r\n\r\n    return {\r\n      url,\r\n      martcher,\r\n      segments,\r\n      callback,\r\n      method: method.toUpperCase(),\r\n    };\r\n  }\r\n\r\n  private outputError(error: any) {\r\n    const filePath = error.message.split(': ')[0];\r\n    const errors = error.stack\r\n      .split('\\n')\r\n      .filter(line => line.trim().indexOf('at ') !== 0)\r\n      .map(line => line.replace(`${filePath}: `, ''));\r\n    errors.splice(1, 0, ['']);\r\n\r\n    console.group();\r\n    console.warn(`==========Failed to parse mock config.==========`);\r\n    console.log(errors.join('\\n'));\r\n    console.groupEnd();\r\n\r\n    throw error;\r\n  }\r\n\r\n  // endregion\r\n\r\n  getRule(method: string, url: string): MockRule {\r\n    method = (method || 'GET').toUpperCase();\r\n    const params: any = {};\r\n    const ret =\r\n      this.cached.find(\r\n        w =>\r\n          w.method === method &&\r\n          (w.martcher ? w.martcher.test(url) : w.url === url),\r\n      ) || null;\r\n    if (!ret) return null;\r\n    if (ret.martcher) {\r\n      const execArr = ret.martcher.exec(url);\r\n      execArr.slice(1).map((value: string, index: number) => {\r\n        params[ret.segments[index]] = value;\r\n      });\r\n    }\r\n    return {\r\n      url,\r\n      method: ret.method,\r\n      params,\r\n      callback: ret.callback,\r\n    };\r\n  }\r\n\r\n  clearCache() {\r\n    this.cached = [];\r\n  }\r\n\r\n  get rules() {\r\n    return this.cached;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.clearCache();\r\n  }\r\n}\r\n"]}