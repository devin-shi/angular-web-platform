{"version":3,"file":"mock.umd.min.js","sources":["../../../../packages/mock/src/status.error.ts","../../../../packages/mock/mock.config.ts","../../../../packages/mock/src/mock.service.ts","../../../../packages/mock/src/mock.interceptor.ts","../../../../packages/mock/mock.module.ts"],"sourcesContent":["export class MockStatusError {\r\n  statusText: string;\r\n  constructor(public status: number, public error?: any) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DelonMockConfig {\r\n  /** 规则定义数据 */\r\n  data: any;\r\n  /** 请求延迟，单位：毫秒，默认：`300` */\r\n  delay? = 300;\r\n  /** 是否强制所有请求都Mock，`true` 表示当请求的URL不存在时直接返回 404 错误，`false` 表示未命中时发送真实HTTP请求 */\r\n  force? = false;\r\n  /** 是否打印 Mock 请求信息，弥补浏览器无Network信息 */\r\n  log? = true;\r\n}\r\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockCachedRule, MockRule } from './interface';\r\n\r\n@Injectable()\r\nexport class MockService implements OnDestroy {\r\n  private cached: MockCachedRule[] = [];\r\n\r\n  constructor(private config: DelonMockConfig) {\r\n    this.applyMock();\r\n    delete this.config.data;\r\n  }\r\n\r\n  // region: parse rule\r\n\r\n  private applyMock() {\r\n    this.cached = [];\r\n    try {\r\n      this.realApplyMock();\r\n    } catch (e) {\r\n      this.outputError(e);\r\n    }\r\n  }\r\n\r\n  private realApplyMock() {\r\n    const data = this.config.data;\r\n    if (!data) return;\r\n    Object.keys(data).forEach((key: string) => {\r\n      const rules = data[key];\r\n      if (!rules) return;\r\n      Object.keys(rules).forEach((ruleKey: string) => {\r\n        const value = rules[ruleKey];\r\n        if (\r\n          !(\r\n            typeof value === 'function' ||\r\n            typeof value === 'object' ||\r\n            typeof value === 'string'\r\n          )\r\n        )\r\n          throw Error(\r\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\r\n          );\r\n        const rule = this.genRule(ruleKey, value);\r\n        if (\r\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\r\n            rule.method,\r\n          ) === -1\r\n        ) {\r\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\r\n        }\r\n        const item = this.cached.find(\r\n          w => w.url === rule.url && w.method === rule.method,\r\n        );\r\n        if (item) {\r\n          item.callback = rule.callback;\r\n        } else {\r\n          this.cached.push(rule);\r\n        }\r\n      });\r\n    });\r\n    // regular ordering\r\n    this.cached.sort(\r\n      (a, b) =>\r\n        (b.martcher || '').toString().length -\r\n        (a.martcher || '').toString().length,\r\n    );\r\n  }\r\n\r\n  private genRule(key: string, callback: any): MockCachedRule {\r\n    let method = 'GET';\r\n    let url = key;\r\n\r\n    if (key.indexOf(' ') > -1) {\r\n      const splited = key.split(' ');\r\n      method = splited[0].toLowerCase();\r\n      url = splited[1];\r\n    }\r\n\r\n    let martcher: RegExp = null;\r\n    let segments: string[] = [];\r\n    if (~url.indexOf(':')) {\r\n      segments = url!\r\n        .split('/')\r\n        .filter(segment => segment.startsWith(':'))\r\n        .map(v => v.substring(1));\r\n      const reStr = url!\r\n        .split('/')\r\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\r\n        .join('/');\r\n      martcher = new RegExp(reStr, 'i');\r\n    } else if (/(\\([^)]+\\))/i.test(url)) {\r\n      martcher = new RegExp(url, 'i');\r\n    }\r\n\r\n    return {\r\n      url,\r\n      martcher,\r\n      segments,\r\n      callback,\r\n      method: method.toUpperCase(),\r\n    };\r\n  }\r\n\r\n  private outputError(error: any) {\r\n    const filePath = error.message.split(': ')[0];\r\n    const errors = error.stack\r\n      .split('\\n')\r\n      .filter(line => line.trim().indexOf('at ') !== 0)\r\n      .map(line => line.replace(`${filePath}: `, ''));\r\n    errors.splice(1, 0, ['']);\r\n\r\n    console.group();\r\n    console.warn(`==========Failed to parse mock config.==========`);\r\n    console.log(errors.join('\\n'));\r\n    console.groupEnd();\r\n\r\n    throw error;\r\n  }\r\n\r\n  // endregion\r\n\r\n  getRule(method: string, url: string): MockRule {\r\n    method = (method || 'GET').toUpperCase();\r\n    const params: any = {};\r\n    const ret =\r\n      this.cached.find(\r\n        w =>\r\n          w.method === method &&\r\n          (w.martcher ? w.martcher.test(url) : w.url === url),\r\n      ) || null;\r\n    if (!ret) return null;\r\n    if (ret.martcher) {\r\n      const execArr = ret.martcher.exec(url);\r\n      execArr.slice(1).map((value: string, index: number) => {\r\n        params[ret.segments[index]] = value;\r\n      });\r\n    }\r\n    return {\r\n      url,\r\n      method: ret.method,\r\n      params,\r\n      callback: ret.callback,\r\n    };\r\n  }\r\n\r\n  clearCache() {\r\n    this.cached = [];\r\n  }\r\n\r\n  get rules() {\r\n    return this.cached;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.clearCache();\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpSentEvent,\r\n  HttpHeaderResponse,\r\n  HttpProgressEvent,\r\n  HttpResponse,\r\n  HttpUserEvent,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n  HttpEventType,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { delay } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockService } from './mock.service';\r\nimport { MockStatusError } from './status.error';\r\nimport { MockRequest } from './interface';\r\n\r\n@Injectable()\r\nexport class MockInterceptor implements HttpInterceptor {\r\n  constructor(private injector: Injector) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n  ): Observable<\r\n    | HttpSentEvent\r\n    | HttpHeaderResponse\r\n    | HttpProgressEvent\r\n    | HttpResponse<any>\r\n    | HttpUserEvent<any>\r\n  > {\r\n    const src = this.injector.get(MockService);\r\n    const config = Object.assign(\r\n      {\r\n        delay: 300,\r\n        force: false,\r\n        log: true,\r\n      },\r\n      this.injector.get(DelonMockConfig, null),\r\n    );\r\n    const rule = src.getRule(req.method, req.url);\r\n    if (!rule && !config.force) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    let res: any;\r\n    switch (typeof rule.callback) {\r\n      case 'function':\r\n        const mockRequest: MockRequest = {\r\n          original: req,\r\n          body: req.body,\r\n          queryString: {},\r\n          headers: {},\r\n          params: rule.params,\r\n        };\r\n\r\n        req.params\r\n          .keys()\r\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\r\n        req.headers\r\n          .keys()\r\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\r\n\r\n        try {\r\n          res = rule.callback.call(this, mockRequest);\r\n        } catch (e) {\r\n          let errRes: HttpErrorResponse;\r\n          if (e instanceof MockStatusError) {\r\n            errRes = new HttpErrorResponse({\r\n              url: req.url,\r\n              headers: req.headers,\r\n              status: e.status,\r\n              statusText: e.statusText || 'Unknown Error',\r\n              error: e.error,\r\n            });\r\n            if (config.log)\r\n              console.log(\r\n                `%c 👽MOCK ${e.status} STATUS `,\r\n                'background:#000;color:#bada55',\r\n                req.url,\r\n                errRes,\r\n                req,\r\n              );\r\n          } else {\r\n            console.error(\r\n              `Please use MockStatusError to throw status error`,\r\n              e,\r\n              req,\r\n            );\r\n          }\r\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\r\n            observer.error(errRes);\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        res = rule.callback;\r\n        break;\r\n    }\r\n\r\n    const response: HttpResponse<any> = new HttpResponse({\r\n      status: 200,\r\n      body: res,\r\n      url: req.url,\r\n    });\r\n    if (config.log)\r\n      console.log(\r\n        '%c 👽MOCK ',\r\n        'background:#000;color:#bada55',\r\n        req.url,\r\n        response,\r\n        req,\r\n      );\r\n    return of(response).pipe(delay(config.delay));\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { DelonMockConfig } from './mock.config';\r\nimport { MockService } from './src/mock.service';\r\nimport { MockInterceptor } from './src/mock.interceptor';\r\n\r\n@NgModule({})\r\nexport class DelonMockModule {\r\n  static forRoot(config: DelonMockConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: DelonMockModule,\r\n      providers: [\r\n        MockService,\r\n        { provide: DelonMockConfig, useValue: config },\r\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"names":["MockStatusError","status","error","this","Injectable","config","applyMock","data","MockService","cached","realApplyMock","e","outputError","Object","keys","forEach","key","rules","ruleKey","value","Error","rule","_this","genRule","indexOf","method","item","find","w","url","callback","push","sort","a","b","martcher","toString","length","splited","split","toLowerCase","segments","filter","segment","startsWith","map","v","substring","reStr","join","RegExp","test","toUpperCase","filePath","message","errors","stack","line","trim","replace","splice","console","group","warn","log","groupEnd","params","ret","exec","slice","index","clearCache","DelonMockConfig","injector","MockInterceptor","req","next","res","src","get","assign","delay","force","getRule","handle","mockRequest_1","original","body","queryString","headers","call","errRes_1","HttpErrorResponse","statusText","Observable","observer","response","HttpResponse","of","pipe","Injector","DelonMockModule","ngModule","providers","provide","useValue","HTTP_INTERCEPTORS","useClass","multi","NgModule"],"mappings":"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"}