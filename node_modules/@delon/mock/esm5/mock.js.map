{"version":3,"file":"mock.js","sources":["../../../../packages/mock/src/status.error.ts","../../../../packages/mock/mock.config.ts","../../../../packages/mock/src/mock.service.ts","../../../../packages/mock/src/mock.interceptor.ts","../../../../packages/mock/mock.module.ts"],"sourcesContent":["export class MockStatusError {\r\n  statusText: string;\r\n  constructor(public status: number, public error?: any) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DelonMockConfig {\r\n  /** 规则定义数据 */\r\n  data: any;\r\n  /** 请求延迟，单位：毫秒，默认：`300` */\r\n  delay? = 300;\r\n  /** 是否强制所有请求都Mock，`true` 表示当请求的URL不存在时直接返回 404 错误，`false` 表示未命中时发送真实HTTP请求 */\r\n  force? = false;\r\n  /** 是否打印 Mock 请求信息，弥补浏览器无Network信息 */\r\n  log? = true;\r\n}\r\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockCachedRule, MockRule } from './interface';\r\n\r\n@Injectable()\r\nexport class MockService implements OnDestroy {\r\n  private cached: MockCachedRule[] = [];\r\n\r\n  constructor(private config: DelonMockConfig) {\r\n    this.applyMock();\r\n    delete this.config.data;\r\n  }\r\n\r\n  // region: parse rule\r\n\r\n  private applyMock() {\r\n    this.cached = [];\r\n    try {\r\n      this.realApplyMock();\r\n    } catch (e) {\r\n      this.outputError(e);\r\n    }\r\n  }\r\n\r\n  private realApplyMock() {\r\n    const data = this.config.data;\r\n    if (!data) return;\r\n    Object.keys(data).forEach((key: string) => {\r\n      const rules = data[key];\r\n      if (!rules) return;\r\n      Object.keys(rules).forEach((ruleKey: string) => {\r\n        const value = rules[ruleKey];\r\n        if (\r\n          !(\r\n            typeof value === 'function' ||\r\n            typeof value === 'object' ||\r\n            typeof value === 'string'\r\n          )\r\n        )\r\n          throw Error(\r\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\r\n          );\r\n        const rule = this.genRule(ruleKey, value);\r\n        if (\r\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\r\n            rule.method,\r\n          ) === -1\r\n        ) {\r\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\r\n        }\r\n        const item = this.cached.find(\r\n          w => w.url === rule.url && w.method === rule.method,\r\n        );\r\n        if (item) {\r\n          item.callback = rule.callback;\r\n        } else {\r\n          this.cached.push(rule);\r\n        }\r\n      });\r\n    });\r\n    // regular ordering\r\n    this.cached.sort(\r\n      (a, b) =>\r\n        (b.martcher || '').toString().length -\r\n        (a.martcher || '').toString().length,\r\n    );\r\n  }\r\n\r\n  private genRule(key: string, callback: any): MockCachedRule {\r\n    let method = 'GET';\r\n    let url = key;\r\n\r\n    if (key.indexOf(' ') > -1) {\r\n      const splited = key.split(' ');\r\n      method = splited[0].toLowerCase();\r\n      url = splited[1];\r\n    }\r\n\r\n    let martcher: RegExp = null;\r\n    let segments: string[] = [];\r\n    if (~url.indexOf(':')) {\r\n      segments = url!\r\n        .split('/')\r\n        .filter(segment => segment.startsWith(':'))\r\n        .map(v => v.substring(1));\r\n      const reStr = url!\r\n        .split('/')\r\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\r\n        .join('/');\r\n      martcher = new RegExp(reStr, 'i');\r\n    } else if (/(\\([^)]+\\))/i.test(url)) {\r\n      martcher = new RegExp(url, 'i');\r\n    }\r\n\r\n    return {\r\n      url,\r\n      martcher,\r\n      segments,\r\n      callback,\r\n      method: method.toUpperCase(),\r\n    };\r\n  }\r\n\r\n  private outputError(error: any) {\r\n    const filePath = error.message.split(': ')[0];\r\n    const errors = error.stack\r\n      .split('\\n')\r\n      .filter(line => line.trim().indexOf('at ') !== 0)\r\n      .map(line => line.replace(`${filePath}: `, ''));\r\n    errors.splice(1, 0, ['']);\r\n\r\n    console.group();\r\n    console.warn(`==========Failed to parse mock config.==========`);\r\n    console.log(errors.join('\\n'));\r\n    console.groupEnd();\r\n\r\n    throw error;\r\n  }\r\n\r\n  // endregion\r\n\r\n  getRule(method: string, url: string): MockRule {\r\n    method = (method || 'GET').toUpperCase();\r\n    const params: any = {};\r\n    const ret =\r\n      this.cached.find(\r\n        w =>\r\n          w.method === method &&\r\n          (w.martcher ? w.martcher.test(url) : w.url === url),\r\n      ) || null;\r\n    if (!ret) return null;\r\n    if (ret.martcher) {\r\n      const execArr = ret.martcher.exec(url);\r\n      execArr.slice(1).map((value: string, index: number) => {\r\n        params[ret.segments[index]] = value;\r\n      });\r\n    }\r\n    return {\r\n      url,\r\n      method: ret.method,\r\n      params,\r\n      callback: ret.callback,\r\n    };\r\n  }\r\n\r\n  clearCache() {\r\n    this.cached = [];\r\n  }\r\n\r\n  get rules() {\r\n    return this.cached;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.clearCache();\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpSentEvent,\r\n  HttpHeaderResponse,\r\n  HttpProgressEvent,\r\n  HttpResponse,\r\n  HttpUserEvent,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n  HttpEventType,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { delay } from 'rxjs/operators';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nimport { DelonMockConfig } from '../mock.config';\r\nimport { MockService } from './mock.service';\r\nimport { MockStatusError } from './status.error';\r\nimport { MockRequest } from './interface';\r\n\r\n@Injectable()\r\nexport class MockInterceptor implements HttpInterceptor {\r\n  constructor(private injector: Injector) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler,\r\n  ): Observable<\r\n    | HttpSentEvent\r\n    | HttpHeaderResponse\r\n    | HttpProgressEvent\r\n    | HttpResponse<any>\r\n    | HttpUserEvent<any>\r\n  > {\r\n    const src = this.injector.get(MockService);\r\n    const config = Object.assign(\r\n      {\r\n        delay: 300,\r\n        force: false,\r\n        log: true,\r\n      },\r\n      this.injector.get(DelonMockConfig, null),\r\n    );\r\n    const rule = src.getRule(req.method, req.url);\r\n    if (!rule && !config.force) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    let res: any;\r\n    switch (typeof rule.callback) {\r\n      case 'function':\r\n        const mockRequest: MockRequest = {\r\n          original: req,\r\n          body: req.body,\r\n          queryString: {},\r\n          headers: {},\r\n          params: rule.params,\r\n        };\r\n\r\n        req.params\r\n          .keys()\r\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\r\n        req.headers\r\n          .keys()\r\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\r\n\r\n        try {\r\n          res = rule.callback.call(this, mockRequest);\r\n        } catch (e) {\r\n          let errRes: HttpErrorResponse;\r\n          if (e instanceof MockStatusError) {\r\n            errRes = new HttpErrorResponse({\r\n              url: req.url,\r\n              headers: req.headers,\r\n              status: e.status,\r\n              statusText: e.statusText || 'Unknown Error',\r\n              error: e.error,\r\n            });\r\n            if (config.log)\r\n              console.log(\r\n                `%c 👽MOCK ${e.status} STATUS `,\r\n                'background:#000;color:#bada55',\r\n                req.url,\r\n                errRes,\r\n                req,\r\n              );\r\n          } else {\r\n            console.error(\r\n              `Please use MockStatusError to throw status error`,\r\n              e,\r\n              req,\r\n            );\r\n          }\r\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\r\n            observer.error(errRes);\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        res = rule.callback;\r\n        break;\r\n    }\r\n\r\n    const response: HttpResponse<any> = new HttpResponse({\r\n      status: 200,\r\n      body: res,\r\n      url: req.url,\r\n    });\r\n    if (config.log)\r\n      console.log(\r\n        '%c 👽MOCK ',\r\n        'background:#000;color:#bada55',\r\n        req.url,\r\n        response,\r\n        req,\r\n      );\r\n    return of(response).pipe(delay(config.delay));\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { DelonMockConfig } from './mock.config';\r\nimport { MockService } from './src/mock.service';\r\nimport { MockInterceptor } from './src/mock.interceptor';\r\n\r\n@NgModule({})\r\nexport class DelonMockModule {\r\n  static forRoot(config: DelonMockConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: DelonMockModule,\r\n      providers: [\r\n        MockService,\r\n        { provide: DelonMockConfig, useValue: config },\r\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\r\n      ],\r\n    };\r\n  }\r\n}\r\n"],"names":["Observable","of"],"mappings":"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"}