{"version":3,"file":"widget.factory.js","sourceRoot":"","sources":["../../../../../packages/form/src/widget.factory.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EACL,UAAU,EACV,wBAAwB,GAGzB,MAAM,eAAe,CAAC;AAGvB,IAAA;;uBAC6C,EAAE;;;;;;IAI7C,mCAAU;;;;IAAV,UAAW,MAAW;QACpB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;KAC7B;;;;;;IAED,iCAAQ;;;;;IAAR,UAAS,IAAY,EAAE,MAAW;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;KAC7B;;;;;IAED,4BAAG;;;;IAAH,UAAI,IAAY;QACd,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KAC1C;;;;;IAED,gCAAO;;;;IAAP,UAAQ,IAAY;QAClB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC3B;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;KAC3B;yBA9BH;IA+BC,CAAA;AAvBD,0BAuBC;;;;;;;;IAOC,uBAAY,QAAwB,EAAE,QAAkC;QACtE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;;;;;IAED,oCAAY;;;;;IAAZ,UACE,SAA2B,EAC3B,IAAY;QAEZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,0BAAuB,IAAI,OAAG,CAAC,CAAC;SAC9C;QAED,qBAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnD,qBAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAC5D,cAAc,CACf,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;KACpD;;gBAvBF,UAAU;;;;gBAzBE,cAAc;gBANzB,wBAAwB;;wBAF1B;;SAkCa,aAAa","sourcesContent":["import {\r\n  Injectable,\r\n  ComponentFactoryResolver,\r\n  ViewContainerRef,\r\n  ComponentRef,\r\n} from '@angular/core';\r\nimport { Widget } from './widget';\r\n\r\nexport class WidgetRegistry {\r\n  private widgets: { [type: string]: any } = {};\r\n\r\n  private defaultWidget: any;\r\n\r\n  setDefault(widget: any) {\r\n    this.defaultWidget = widget;\r\n  }\r\n\r\n  register(type: string, widget: any) {\r\n    this.widgets[type] = widget;\r\n  }\r\n\r\n  has(type: string) {\r\n    return this.widgets.hasOwnProperty(type);\r\n  }\r\n\r\n  getType(type: string): any {\r\n    if (this.has(type)) {\r\n      return this.widgets[type];\r\n    }\r\n    return this.defaultWidget;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class WidgetFactory {\r\n  private resolver: ComponentFactoryResolver;\r\n  private registry: WidgetRegistry;\r\n\r\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\r\n    this.registry = registry;\r\n    this.resolver = resolver;\r\n  }\r\n\r\n  createWidget(\r\n    container: ViewContainerRef,\r\n    type: string,\r\n  ): ComponentRef<Widget<any>> {\r\n    if (!this.registry.has(type)) {\r\n      console.warn(`No widget for type \"${type}\"`);\r\n    }\r\n\r\n    const componentClass = this.registry.getType(type);\r\n    const componentFactory = this.resolver.resolveComponentFactory<Widget<any>>(\r\n      componentClass,\r\n    );\r\n    return container.createComponent(componentFactory);\r\n  }\r\n}\r\n"]}