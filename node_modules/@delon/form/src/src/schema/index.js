/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
export function SFSchemaDefinition() { }
function SFSchemaDefinition_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    [key: string]: SFSchema;
    */
}
/**
 * @record
 */
export function SFSchemaEnum() { }
function SFSchemaEnum_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    [key: string]: any;
    */
    /**
     * 是否禁用状态
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.disabled;
    /**
     * 文本
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.label;
    /**
     * 文本
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.title;
    /**
     * 值
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.value;
    /**
     * 是否选中
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.checked;
    /**
     * 组名，适用部分允许组列表的小部分，例如：`select`
     * - 组对应的文本为 `label`
     * - `children` 为子项
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.group;
    /**
     * 组对应的子类
     * @type {?|undefined}
     */
    SFSchemaEnum.prototype.children;
}
/**
 * JSON Schema Form 结构体
 *
 * **注意：** 所有结构都以标准为基准，除了 `ui` 属性为非标准单纯只是为了更好的开发
 * @record
 */
export function SFSchema() { }
function SFSchema_tsickle_Closure_declarations() {
    /**
     * 数据类型，支持 JavaScript 基础类型；注意项：
     *
     * - `integer` 表示整型，`number` 表示浮点型
     * - JSON 中 `date` 等同 `string` 类型
     * - 指定 `format` 标准参数可以自动适配渲染小部件
     * - 指定 `widget` 参数强制渲染小部件
     * @type {?|undefined}
     */
    SFSchema.prototype.type;
    /**
     * 枚举，静态数据源，例如：`radio`、`checkbox` 等
     *
     * - `disabled` 属性表示：禁用状态
     * - `label` 属性表示：文本
     * - `value` 属性表示：返回值
     * - 基础数据类型数组会自动转化成 `SFSchemaEnum` 数组格式
     * @type {?|undefined}
     */
    SFSchema.prototype.enum;
    /**
     * 最小值
     * @type {?|undefined}
     */
    SFSchema.prototype.minimum;
    /**
     * 约束是否包括 `minimum` 值
     * @type {?|undefined}
     */
    SFSchema.prototype.exclusiveMinimum;
    /**
     * 最大值
     * @type {?|undefined}
     */
    SFSchema.prototype.maximum;
    /**
     * 约束是否包括 `maximum` 值
     * @type {?|undefined}
     */
    SFSchema.prototype.exclusiveMaximum;
    /**
     * 倍数
     * @type {?|undefined}
     */
    SFSchema.prototype.multipleOf;
    /**
     * 定义字符串的最大长度
     * @type {?|undefined}
     */
    SFSchema.prototype.maxLength;
    /**
     * 定义字符串的最小长度
     * @type {?|undefined}
     */
    SFSchema.prototype.minLength;
    /**
     * 验证输入字段正则表达式字符串，若指定 `format: 'regex'` 时务必指定
     * @type {?|undefined}
     */
    SFSchema.prototype.pattern;
    /**
     * 数组元素类型描述，只支持数组对象，若需要基础类型数组可通过其他部件支持
     *
     * ```json
     * items: {
     *   type: 'object',
     *   properties: {
     *     name: { type: 'string' },
     *     age: { type: 'number' }
     *   }
     * }
     * ```
     *
     * 结果
     *
     * ```json
     * [
     *   { "name": "cipchk1", "age": 18 },
     *   { "name": "cipchk2", "age": 16 }
     * ]
     * ```
     * @type {?|undefined}
     */
    SFSchema.prototype.items;
    /**
     * 约束数组最小的元素个数
     * - `type="array"` 时有效
     * @type {?|undefined}
     */
    SFSchema.prototype.minItems;
    /**
     * 约束数组最大的元素个数
     * - `type="array"` 时有效
     * @type {?|undefined}
     */
    SFSchema.prototype.maxItems;
    /**
     * 约束数组每个元素都不相同
     * - `type="array"` 时有效
     * @type {?|undefined}
     */
    SFSchema.prototype.uniqueItems;
    /**
     * 数组额外元素的校验规则
     * @type {?|undefined}
     */
    SFSchema.prototype.additionalItems;
    /**
     * 最大属性个数，必须是非负整数
     * @type {?|undefined}
     */
    SFSchema.prototype.maxProperties;
    /**
     * 最小属性个数，必须是非负整数
     * @type {?|undefined}
     */
    SFSchema.prototype.minProperties;
    /**
     * 必填项属性
     * @type {?|undefined}
     */
    SFSchema.prototype.required;
    /**
     * 定义属性
     * @type {?|undefined}
     */
    SFSchema.prototype.properties;
    /**
     * 条件验证
     * - 必须包含 `properties` 节点
     *  - 键名必须是当前节点 `properties` 值之一
     *  - 利用 `enum` 属性表示条件值，支持 `$ANY$` 表示任意值
     * - 不支持跨 Schema 节点
     * - 当条件成功会执行 `then` 否则执行 `else`
     * - `if`和`then` 是必须同时出现，`else` 可选项
     * @type {?|undefined}
     */
    SFSchema.prototype.if;
    /**
     * 条件成功时执行
     * - 只支持 `required` 参数，用于表示显示
     * @type {?|undefined}
     */
    SFSchema.prototype.then;
    /**
     * 条件失败时执行
     * - 只支持 `required` 参数，用于表示显示
     * @type {?|undefined}
     */
    SFSchema.prototype.else;
    /**
     * *不建议** 使用，可用 `required` 替代
     * @type {?|undefined}
     */
    SFSchema.prototype.allOf;
    /**
     * *不建议** 使用，可用 `required` 和 `minProperties` 替代
     * @type {?|undefined}
     */
    SFSchema.prototype.anyOf;
    /**
     * 值必须是其中之一
     * @type {?|undefined}
     */
    SFSchema.prototype.oneOf;
    /**
     * 数据格式，[文档](http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3)
     * - `date-time` 日期时间，渲染为 `date`，[RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6)
     * - `date`、`full-date` 日期，渲染为 `date`
     * - `time`、`full-time` 时间，渲染为 `time`
     * - `email` Email格式，渲染为 `autocomplete`
     * - 非标准：`week`，渲染为 `date`
     * - 非标准：`month`，渲染为 `date`
     * - `ip` IP地址，渲染为 `input`
     * - `uri` URL地址，渲染为 `upload`
     * - `regex` 正则表达式，必须指定 `pattern` 属性，渲染为 `input`
     * @type {?|undefined}
     */
    SFSchema.prototype.format;
    /**
     * 属性描述，相当于 `label` 值，按以下规则展示：
     * - 当值为 `null`、`undefined` 时使用 `key` 替代
     * - 当值为 `''` 空字符串表示不展示 `label` 部分，例如：`checkbox` 可能需要
     * @type {?|undefined}
     */
    SFSchema.prototype.title;
    /**
     * 属性目的性解释，采用 `nz-form-extra` 渲染
     * @type {?|undefined}
     */
    SFSchema.prototype.description;
    /**
     * 默认值
     * @type {?|undefined}
     */
    SFSchema.prototype.default;
    /**
     * 是否只读状态
     * @type {?|undefined}
     */
    SFSchema.prototype.readOnly;
    /**
     * 内部类型定义体
     * @type {?|undefined}
     */
    SFSchema.prototype.definitions;
    /**
     * 引用定义体
     * @type {?|undefined}
     */
    SFSchema.prototype.$ref;
    /**
     * 针对开发者的注释，无任何意义，也不会被校验
     * @type {?|undefined}
     */
    SFSchema.prototype.$comment;
    /**
     * *唯一非标准：** 指定UI配置信息，优先级高于 `sf` 组件 `ui` 属性值
     * @type {?|undefined}
     */
    SFSchema.prototype.ui;
}
//# sourceMappingURL=index.js.map