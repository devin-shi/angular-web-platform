{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../packages/form/src/schema/index.ts"],"names":[],"mappings":"","sourcesContent":["import { SFUISchemaItem } from './ui';\r\n\r\nexport interface SFSchemaDefinition {\r\n  [key: string]: SFSchema;\r\n}\r\n\r\nexport interface SFSchemaEnum {\r\n  [key: string]: any;\r\n\r\n  /** 是否禁用状态 */\r\n  disabled?: boolean;\r\n\r\n  /** 文本 */\r\n  label?: any;\r\n\r\n  /** 文本 */\r\n  title?: any;\r\n\r\n  /** 值 */\r\n  value?: any;\r\n\r\n  /** 是否选中 */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * 组名，适用部分允许组列表的小部分，例如：`select`\r\n   * - 组对应的文本为 `label`\r\n   * - `children` 为子项\r\n   */\r\n  group?: boolean;\r\n\r\n  /** 组对应的子类 */\r\n  children?: SFSchemaEnum[];\r\n}\r\n\r\nexport type SFSchemaEnumType = SFSchemaEnum | number | string | boolean;\r\n\r\n/**\r\n * JSON Schema Form 结构体\r\n *\r\n * **注意：** 所有结构都以标准为基准，除了 `ui` 属性为非标准单纯只是为了更好的开发\r\n */\r\nexport interface SFSchema {\r\n  //////////// Any /////////////\r\n  /**\r\n   * 数据类型，支持 JavaScript 基础类型；注意项：\r\n   *\r\n   * - `integer` 表示整型，`number` 表示浮点型\r\n   * - JSON 中 `date` 等同 `string` 类型\r\n   * - 指定 `format` 标准参数可以自动适配渲染小部件\r\n   * - 指定 `widget` 参数强制渲染小部件\r\n   */\r\n  type?: 'number' | 'integer' | 'string' | 'boolean' | 'object' | 'array';\r\n  /**\r\n   * 枚举，静态数据源，例如：`radio`、`checkbox` 等\r\n   *\r\n   * - `disabled` 属性表示：禁用状态\r\n   * - `label` 属性表示：文本\r\n   * - `value` 属性表示：返回值\r\n   * - 基础数据类型数组会自动转化成 `SFSchemaEnum` 数组格式\r\n   */\r\n  enum?: SFSchemaEnumType[];\r\n  //////////// 数值类型 /////////////\r\n  /**\r\n   * 最小值\r\n   */\r\n  minimum?: number;\r\n  /**\r\n   * 约束是否包括 `minimum` 值\r\n   */\r\n  exclusiveMinimum?: boolean;\r\n  /**\r\n   * 最大值\r\n   */\r\n  maximum?: number;\r\n  /**\r\n   * 约束是否包括 `maximum` 值\r\n   */\r\n  exclusiveMaximum?: boolean;\r\n  /**\r\n   * 倍数\r\n   */\r\n  multipleOf?: number;\r\n  //////////// 字符串类型/////////////\r\n  /**\r\n   * 定义字符串的最大长度\r\n   */\r\n  maxLength?: number;\r\n  /**\r\n   * 定义字符串的最小长度\r\n   */\r\n  minLength?: number;\r\n  /**\r\n   * 验证输入字段正则表达式字符串，若指定 `format: 'regex'` 时务必指定\r\n   */\r\n  pattern?: string;\r\n  //////////// 数组类型/////////////\r\n  /**\r\n   * 数组元素类型描述，只支持数组对象，若需要基础类型数组可通过其他部件支持\r\n   *\r\n   * ```json\r\n   * items: {\r\n   *   type: 'object',\r\n   *   properties: {\r\n   *     name: { type: 'string' },\r\n   *     age: { type: 'number' }\r\n   *   }\r\n   * }\r\n   * ```\r\n   *\r\n   * 结果\r\n   *\r\n   * ```json\r\n   * [\r\n   *   { \"name\": \"cipchk1\", \"age\": 18 },\r\n   *   { \"name\": \"cipchk2\", \"age\": 16 }\r\n   * ]\r\n   * ```\r\n   */\r\n  items?: SFSchema;\r\n  /**\r\n   * 约束数组最小的元素个数\r\n   * - `type=\"array\"` 时有效\r\n   */\r\n  minItems?: number;\r\n  /**\r\n   * 约束数组最大的元素个数\r\n   * - `type=\"array\"` 时有效\r\n   */\r\n  maxItems?: number;\r\n  /**\r\n   * 约束数组每个元素都不相同\r\n   * - `type=\"array\"` 时有效\r\n   */\r\n  uniqueItems?: boolean;\r\n  /**\r\n   * 数组额外元素的校验规则\r\n   */\r\n  additionalItems?: SFSchema;\r\n  //////////// 对象类型/////////////\r\n  /**\r\n   * 最大属性个数，必须是非负整数\r\n   */\r\n  maxProperties?: number;\r\n  /**\r\n   * 最小属性个数，必须是非负整数\r\n   */\r\n  minProperties?: number;\r\n  /**\r\n   * 必填项属性\r\n   */\r\n  required?: string[];\r\n  /**\r\n   * 定义属性\r\n   */\r\n  properties?: { [key: string]: SFSchema };\r\n  //////////// 条件类/////////////\r\n  // 未来可能被移除\r\n  // dependencies?: { [key: string]: string[] | SFSchema };\r\n  /**\r\n   * 条件验证\r\n   * - 必须包含 `properties` 节点\r\n   *  - 键名必须是当前节点 `properties` 值之一\r\n   *  - 利用 `enum` 属性表示条件值，支持 `$ANY$` 表示任意值\r\n   * - 不支持跨 Schema 节点\r\n   * - 当条件成功会执行 `then` 否则执行 `else`\r\n   * - `if`和`then` 是必须同时出现，`else` 可选项\r\n   */\r\n  if?: SFSchema;\r\n  /**\r\n   * 条件成功时执行\r\n   * - 只支持 `required` 参数，用于表示显示\r\n   */\r\n  then?: SFSchema;\r\n  /**\r\n   * 条件失败时执行\r\n   * - 只支持 `required` 参数，用于表示显示\r\n   */\r\n  else?: SFSchema;\r\n  //////////// 逻辑类/////////////\r\n  /** **不建议** 使用，可用 `required` 替代 */\r\n  allOf?: SFSchema[];\r\n  /** **不建议** 使用，可用 `required` 和 `minProperties` 替代 */\r\n  anyOf?: SFSchema[];\r\n  /** 值必须是其中之一 */\r\n  oneOf?: SFSchema[];\r\n  //////////// 格式/////////////\r\n  /**\r\n   * 数据格式，[文档](http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3)\r\n   * - `date-time` 日期时间，渲染为 `date`，[RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6)\r\n   * - `date`、`full-date` 日期，渲染为 `date`\r\n   * - `time`、`full-time` 时间，渲染为 `time`\r\n   * - `email` Email格式，渲染为 `autocomplete`\r\n   * - 非标准：`week`，渲染为 `date`\r\n   * - 非标准：`month`，渲染为 `date`\r\n   * - `ip` IP地址，渲染为 `input`\r\n   * - `uri` URL地址，渲染为 `upload`\r\n   * - `regex` 正则表达式，必须指定 `pattern` 属性，渲染为 `input`\r\n   */\r\n  format?: string;\r\n  //////////// 注释/////////////\r\n  /**\r\n   * 属性描述，相当于 `label` 值，按以下规则展示：\r\n   * - 当值为 `null`、`undefined` 时使用 `key` 替代\r\n   * - 当值为 `''` 空字符串表示不展示 `label` 部分，例如：`checkbox` 可能需要\r\n   */\r\n  title?: string;\r\n  /**\r\n   * 属性目的性解释，采用 `nz-form-extra` 渲染\r\n   */\r\n  description?: string;\r\n  /**\r\n   * 默认值\r\n   */\r\n  default?: any;\r\n  /**\r\n   * 是否只读状态\r\n   */\r\n  readOnly?: boolean;\r\n  //////////// 其他/////////////\r\n  //////////// Definitions /////////////\r\n  // /** 指定 Schema JSON 模式，默认为：`http://json-schema.org/draft-07/schema` */\r\n  // $schema?: string;\r\n  /** 内部类型定义体 */\r\n  definitions?: SFSchemaDefinition;\r\n  /** 引用定义体 */\r\n  $ref?: string;\r\n  // $schema?: string;\r\n  /** 针对开发者的注释，无任何意义，也不会被校验 */\r\n  $comment?: string;\r\n  //////////// 非标准/////////////\r\n  /** **唯一非标准：** 指定UI配置信息，优先级高于 `sf` 组件 `ui` 属性值 */\r\n  ui?: SFUISchemaItem | string;\r\n}\r\n"]}