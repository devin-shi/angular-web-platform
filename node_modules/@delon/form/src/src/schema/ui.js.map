{"version":3,"file":"ui.js","sourceRoot":"","sources":["../../../../../../packages/form/src/schema/ui.ts"],"names":[],"mappings":"","sourcesContent":["import { TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { ErrorSchema, ErrorData } from '../errors';\r\nimport { SFSchemaEnum, SFSchemaEnumType } from './index';\r\nimport { FormProperty, PropertyGroup } from '../model/form.property';\r\n\r\nexport interface SFGridSizeSchema {\r\n  span?: number;\r\n  order?: number;\r\n  offset?: number;\r\n  push?: number;\r\n  pull?: number;\r\n}\r\n\r\nexport interface SFGridSchema {\r\n  /**\r\n   * 栅格间隔\r\n   */\r\n  gutter?: number;\r\n  /**\r\n   * 栅格占位格数，为 `0` 时相当于 `display: none`\r\n   */\r\n  span?: number;\r\n  /**\r\n   * 数据栅格占位格数，为 `0` 时相当于 `display: none`\r\n   */\r\n  arraySpan?: number;\r\n  /**\r\n   * 栅格左侧的间隔格数，间隔内不可以有栅格\r\n   */\r\n  offset?: number;\r\n  xs?: number | SFGridSizeSchema;\r\n  sm?: number | SFGridSizeSchema;\r\n  md?: number | SFGridSizeSchema;\r\n  lg?: number | SFGridSizeSchema;\r\n  xl?: number | SFGridSizeSchema;\r\n  xxl?: number | SFGridSizeSchema;\r\n}\r\n\r\nexport interface SFRenderSchema {\r\n  /**\r\n   * 指定采用什么小部件渲染，所有小部件名可[查阅文档](https://ng-alain.com/)\r\n   */\r\n  widget?: string;\r\n  /**\r\n   * 自定义类，等同 `[ngClass]` 值\r\n   */\r\n  class?: string | string[];\r\n  /**\r\n   * 元素组件大小\r\n   */\r\n  size?: 'default' | 'large' | 'small';\r\n  /**\r\n   * 响应式属性\r\n   */\r\n  grid?: SFGridSchema;\r\n  /** 标签可选信息 */\r\n  optional?: string;\r\n  /** 标签可选帮助，使用 `nz-tooltip` 展示 */\r\n  optionalHelp?: string;\r\n}\r\n\r\nexport interface SFHorizontalLayoutSchema {\r\n  /**\r\n   * `label` 栅格占位格数，默认：`5`\r\n   * - `0` 时相当于 `display: none`\r\n   * - 限 `horizontal` 水平布局有效\r\n   */\r\n  spanLabel?: number;\r\n\r\n  /**\r\n   * `control` 栅格占位格数，默认：`19`\r\n   * - `0` 时相当于 `display: none`\r\n   * - 限 `horizontal` 水平布局有效\r\n   */\r\n  spanControl?: number;\r\n\r\n  /**\r\n   * `control` 栅格左侧的间隔格数，间隔内不可以有栅格\r\n   * - 限 `horizontal` 水平布局有效\r\n   */\r\n  offsetControl?: number;\r\n\r\n  /**\r\n   * `label` 固定宽度\r\n   * - 限 `horizontal` 水平布局有效\r\n   */\r\n  spanLabelFixed?: number;\r\n}\r\n\r\nexport interface SFArraySchema {\r\n  /** **限array** 指定添加按钮文本，默认：添加 */\r\n  addTitle?: string;\r\n\r\n  /** **限array** 指定添加按钮风格，等同按钮 `nzType`，默认：dashed */\r\n  addType?: string;\r\n\r\n  /** **限array** 指定是否显示移除按钮 */\r\n  removable?: boolean;\r\n\r\n  /** **限array** 指定移除按钮文本，默认：移除 */\r\n  removeTitle?: string;\r\n\r\n  /** **限array** 指定是否显示排序按钮 */\r\n  // orderable?: boolean;\r\n}\r\n\r\nexport interface SFInputSchema {\r\n  /**\r\n   * **限string** 指定 `input` 的 `type` 值，默认为：`text`\r\n   */\r\n  type?: string;\r\n  /**\r\n   * **限string** 文字框中显示提示信息\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * **限string** 加载时是否获得焦点\r\n   */\r\n  autofocus?: boolean;\r\n}\r\n\r\nexport interface SFDataSchema {\r\n  /**\r\n   * 异步静态数据源\r\n   * - `input` 可能根据不同部件的情况存在值，例如：`autocomplete` 表示当前键入的值\r\n   */\r\n  asyncData?: (input?: any) => Observable<SFSchemaEnumType[]>;\r\n}\r\n\r\n/** 指定如何渲染 `Schema` */\r\nexport interface SFUISchemaItem\r\n  extends SFRenderSchema,\r\n    SFArraySchema,\r\n    SFHorizontalLayoutSchema,\r\n    SFDataSchema,\r\n    SFInputSchema,\r\n    ErrorSchema {\r\n  [key: string]: any;\r\n\r\n  /** 是否开启调试模式，在数据变更、校验会打印出相信信息，不建议在生产环境中使用 */\r\n  debug?: boolean;\r\n\r\n  /**\r\n   * 属性顺序\r\n   *\r\n   * 当你只想某几个属性靠前时，则允许使用通配符 `*` 来表示剩余部分，且只允许出现一次\r\n   *\r\n   * @example\r\n   *\r\n   * [ 'a', 'b', 'c', 'd' ] + [ 'c', 'b', '*' ] = [ 'c', 'b', 'a', 'd']\r\n   */\r\n  order?: string[];\r\n\r\n  /**\r\n   * 指定条件时才显示，但需要**注意**：\r\n   * - 键值表示监听对象属性名\r\n   * - JSON Schema 校验是各属性独立运行，监听对象属性每一次值变化都会重新做一次整个JSON结构计算\r\n   *\r\n   * 有效格式包括：\r\n   * - `visibleIf: { shown: [ true ] }`：当 `shown: true` 时才显示当前属性\r\n   * - `visibleIf: { shown: [ '$ANY$' ] }`：当 `shown` 包括任意值时\r\n   * - `visibleIf: { shown: (value: any) => value > 0 }`：复杂表达式\r\n   */\r\n  visibleIf?: { [key: string]: any[] | ((value: any) => boolean) };\r\n}\r\n\r\n/**\r\n * UI Schema，KEY名**务必**是 `$` 开头（例如：`$name`、`$id`），以便能区分KEY值还是UI选项\r\n * - 结构层级应同 `SFSchema` 一致\r\n * - 当KEY为 `*` 时表示对所有子表单元素都有效\r\n */\r\nexport interface SFUISchema {\r\n  [key: string]: SFUISchemaItem | SFUISchemaItemRun;\r\n}\r\n\r\n/**\r\n * 内部运行时使用\r\n */\r\nexport interface SFUISchemaItemRun extends SFUISchemaItem {\r\n  /** @internal 自定义模板 */\r\n  _render?: TemplateRef<{}>;\r\n  /** @internal 是否必填 */\r\n  _required?: boolean;\r\n}\r\n"]}