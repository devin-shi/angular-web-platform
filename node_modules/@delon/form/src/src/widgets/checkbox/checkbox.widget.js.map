{"version":3,"file":"checkbox.widget.js","sourceRoot":"","sources":["../../../../../../../packages/form/src/widgets/checkbox/checkbox.widget.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;;IAoEF,0CAAa;;;qBACxB,EAAE;2BACZ,KAAK;8BACF,KAAK;;;;;;;IAMrB,8BAAK;;;;IAAL,UAAM,KAAU;QAAhB,iBAgBC;QAfC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS,CACjE,UAAA,IAAI;YACF,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAEjB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,EAAE,CAAC,SAAS,CAAC;YAC/B,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,EAAE,CAAC,WAAW,CAAC;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,EAAE,CAAC,SAAS,CAAC;aACjC;YACD,KAAI,CAAC,SAAS;gBACZ,KAAI,CAAC,EAAE,CAAC,IAAI,IAAI,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,KAAI,CAAC,gBAAgB,EAAE,CAAC;SACzB,CACF,CAAC;KACH;;;;;IAED,kCAAS;;;;IAAT,UAAU,KAAU;QAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC1B;;;;IAED,kCAAS;;;IAAT;QACE,qBAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAC9B,SAAS,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAClC,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KAC9B;;;;;IAED,0CAAiB;;;;IAAjB,UAAkB,MAAa;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,CACf,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAlD,CAAkD,CAC3D,CAAC;QACF,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;;;;;IAED,qCAAY;;;;IAAZ,UAAa,CAAQ;QAArB,iBAIC;QAHC,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,IAAI,CAAC,OAAO,GAAG,KAAI,CAAC,UAAU,CAAC,EAAhC,CAAgC,CAAC,CAAC;QAC5D,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;;;;IAED,yCAAgB;;;IAAhB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,KAAK,KAAK,EAAtB,CAAsB,CAAC,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC5B;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,KAAK,IAAI,EAArB,CAAqB,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC5B;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC3B;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC;KACb;;;;;IAEO,qCAAY;;;;cAAC,GAA6B;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;YAAS,IAAI,CAAC,EAAE,WAAQ,GAAG,CAAC,CAAC;;;gBAtI3C,SAAS,SAAC;oBACT,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,iuFA4DT;oBACD,mBAAmB,EAAE,KAAK;iBAC3B;;yBArED;EAsEoC,aAAa;SAApC,cAAc","sourcesContent":["import { Component } from '@angular/core';\nimport { ControlWidget } from '../../widget';\nimport { getData } from '../../utils';\nimport { SFSchemaEnum } from '../../schema';\n\n@Component({\n  selector: 'sf-checkbox',\n  template: `\n  <ng-template #all>\n    <label *ngIf=\"ui.checkAll\" nz-checkbox class=\"mr-sm\"\n      [(ngModel)]=\"allChecked\"\n      [nzIndeterminate]=\"indeterminate\"\n      (click)=\"onAllChecked($event)\">\n      {{ ui.checkAllText || '全选' }}\n    </label>\n  </ng-template>\n  <nz-form-item>\n    <nz-form-label *ngIf=\"data.length > 0\" [nzSpan]=\"label\" [nzRequired]=\"ui._required\">\n      {{ schema.title }}\n      <span class=\"optional\">\n        {{ ui.optional }}\n        <nz-tooltip *ngIf=\"ui.optionalHelp\" [nzTitle]=\"ui.optionalHelp\">\n          <i nz-tooltip class=\"anticon anticon-question-circle-o\"></i>\n        </nz-tooltip>\n      </span>\n    </nz-form-label>\n    <nz-col class=\"ant-form-item-control-wrapper\" [nzSpan]=\"control\" [nzOffset]=\"offset\">\n      <div class=\"ant-form-item-control\" [class.has-error]=\"showError\">\n\n          <ng-container *ngIf=\"data.length === 0\">\n            <label nz-checkbox\n              [nzDisabled]=\"disabled\"\n              [ngModel]=\"value\"\n              (ngModelChange)=\"_setValue($event)\">\n              <span [innerHTML]=\"schema.title\"></span>\n              <span class=\"optional\">\n                {{ ui.optional }}\n                <nz-tooltip *ngIf=\"ui.optionalHelp\" [nzTitle]=\"ui.optionalHelp\">\n                  <i nz-tooltip class=\"anticon anticon-question-circle-o\"></i>\n                </nz-tooltip>\n              </span>\n            </label>\n          </ng-container>\n          <ng-container *ngIf=\"data.length > 0\">\n            <ng-container *ngIf=\"grid_span === 0\">\n              <ng-template [ngTemplateOutlet]=\"all\"></ng-template>\n              <nz-checkbox-group [ngModel]=\"data\" (ngModelChange)=\"notifySet()\"></nz-checkbox-group>\n            </ng-container>\n            <ng-container *ngIf=\"grid_span !== 0\">\n              <nz-checkbox-wrapper class=\"checkbox-grid-list\" (nzOnChange)=\"groupInGridChange($event)\">\n                <nz-row>\n                  <nz-col [nzSpan]=\"grid_span\" *ngIf=\"ui.checkAll\">\n                    <ng-template [ngTemplateOutlet]=\"all\"></ng-template>\n                  </nz-col>\n                  <nz-col [nzSpan]=\"grid_span\" *ngFor=\"let i of data\">\n                    <label nz-checkbox [nzValue]=\"i.value\" [ngModel]=\"i.checked\" [nzDisabled]=\"i.disabled\">{{i.label}}</label>\n                  </nz-col>\n                </nz-row>\n              </nz-checkbox-wrapper>\n            </ng-container>\n          </ng-container>\n\n          <nz-form-extra *ngIf=\"schema.description\" [innerHTML]=\"schema.description\"></nz-form-extra>\n          <nz-form-explain *ngIf=\"!ui.onlyVisual && showError\">{{error}}</nz-form-explain>\n      </div>\n    </nz-col>\n  </nz-form-item>\n  `,\n  preserveWhitespaces: false,\n})\nexport class CheckboxWidget extends ControlWidget {\n  data: SFSchemaEnum[] = [];\n  allChecked = false;\n  indeterminate = false;\n  grid_span: number;\n  label: number;\n  control: number;\n  offset: number;\n\n  reset(value: any) {\n    getData(this.schema, this.ui, this.formProperty.formData).subscribe(\n      list => {\n        this.data = list;\n\n        this.label = this.ui.spanLabel;\n        this.control = this.ui.spanControl;\n        if (list.length === 0) {\n          this.label = null;\n          this.offset = this.ui.spanLabel;\n        }\n        this.grid_span =\n          this.ui.grid && this.ui.grid.span > 0 ? this.ui.grid.span : 0;\n        this.updateAllChecked();\n      },\n    );\n  }\n\n  _setValue(value: any) {\n    this.setValue(value);\n    this.detectChanges();\n    this.notifyChange(value);\n  }\n\n  notifySet() {\n    const checkList = this.data.filter(w => w.checked);\n    this.updateAllChecked().setValue(\n      checkList.map(item => item.value),\n    );\n    this.notifyChange(checkList);\n  }\n\n  groupInGridChange(values: any[]) {\n    this.data.forEach(\n      item => (item.checked = values.indexOf(item.value) !== -1),\n    );\n    this.notifySet();\n  }\n\n  onAllChecked(e: Event) {\n    e.stopPropagation();\n    this.data.forEach(item => (item.checked = this.allChecked));\n    this.notifySet();\n  }\n\n  updateAllChecked(): this {\n    if (this.data.every(item => item.checked === false)) {\n      this.allChecked = false;\n      this.indeterminate = false;\n    } else if (this.data.every(item => item.checked === true)) {\n      this.allChecked = true;\n      this.indeterminate = false;\n    } else {\n      this.indeterminate = true;\n    }\n    this.detectChanges();\n    return this;\n  }\n\n  private notifyChange(res: boolean | SFSchemaEnum[]) {\n    if (this.ui.change) this.ui.change(res);\n  }\n}\n"]}