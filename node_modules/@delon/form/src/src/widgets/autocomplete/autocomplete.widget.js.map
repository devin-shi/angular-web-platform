{"version":3,"file":"autocomplete.widget.js","sourceRoot":"","sources":["../../../../../../../packages/form/src/widgets/autocomplete/autocomplete.widget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { startWith, map, flatMap, debounceTime } from 'rxjs/operators';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { ControlWidget } from '../../widget';\r\nimport { SFSchemaEnum } from '../../schema';\r\nimport { getCopyEnum, getEnum } from '../../utils';\r\n\r\nconst EMAILSUFFIX = ['qq.com', '163.com', 'gmail.com', '126.com', 'aliyun.com'];\r\n\r\n@Component({\r\n  selector: 'sf-autocomplete',\r\n  template: `\r\n    <sf-item-wrap [id]=\"id\" [schema]=\"schema\" [ui]=\"ui\" [showError]=\"showError\" [error]=\"error\" [showTitle]=\"schema.title\">\r\n      <input nz-input [nzAutocomplete]=\"auto\"\r\n        [attr.id]=\"id\"\r\n        [disabled]=\"disabled\"\r\n        [nzSize]=\"ui.size\"\r\n        [value]=\"value\"\r\n        (input)=\"setValue($event.target?.value)\"\r\n        [attr.maxLength]=\"schema.maxLength || null\"\r\n        [attr.placeholder]=\"ui.placeholder\"\r\n        autocomplete=\"off\">\r\n      <nz-autocomplete #auto\r\n        [nzBackfill]=\"i.backfill\"\r\n        [nzDefaultActiveFirstOption]=\"i.defaultActiveFirstOption\"\r\n        [nzWidth]=\"i.width\"\r\n        (selectionChange)=\"setValue($event?.nzValue)\">\r\n        <nz-auto-option *ngFor=\"let i of list | async\" [nzValue]=\"i.label\">{{i.label}}</nz-auto-option>\r\n      </nz-autocomplete>\r\n    </sf-item-wrap>\r\n    `,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class AutoCompleteWidget extends ControlWidget implements OnInit {\r\n  i: any;\r\n  fixData: SFSchemaEnum[] = [];\r\n  list: Observable<SFSchemaEnum[]>;\r\n  private filterOption: (input: string, option: SFSchemaEnum) => boolean;\r\n  private isAsync = false;\r\n\r\n  ngOnInit(): void {\r\n    this.i = {\r\n      backfill: this.ui.backfill || false,\r\n      defaultActiveFirstOption: this.ui.defaultActiveFirstOption || true,\r\n      width: this.ui.width || undefined,\r\n    };\r\n\r\n    this.filterOption = this.ui.filterOption || true;\r\n    if (typeof this.filterOption === 'boolean') {\r\n      this.filterOption =\r\n        this.filterOption === true\r\n          ? (input: string, option: SFSchemaEnum) =>\r\n              option.label.toLowerCase().indexOf(input.toLowerCase()) > -1\r\n          : () => true;\r\n    }\r\n\r\n    this.isAsync = !!this.ui.asyncData;\r\n    const orgTime = +(this.ui.debounceTime || 0);\r\n    const time = Math.max(0, this.isAsync ? Math.max(50, orgTime) : orgTime);\r\n    this.list = this.formProperty.valueChanges.pipe(\r\n      debounceTime(time),\r\n      startWith(''),\r\n      flatMap(\r\n        input =>\r\n          this.isAsync ? this.ui.asyncData(input) : this.filterData(input),\r\n      ),\r\n      map(res => getEnum(res, null)),\r\n    );\r\n  }\r\n\r\n  reset(value: any) {\r\n    if (!this.isAsync) {\r\n      switch (this.ui.type) {\r\n        case 'email':\r\n          this.fixData = getCopyEnum(EMAILSUFFIX, null);\r\n          break;\r\n        default:\r\n          this.fixData = getCopyEnum(\r\n            this.schema.enum,\r\n            this.formProperty.formData,\r\n          );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private filterData(input: string) {\r\n    switch (this.ui.type) {\r\n      case 'email':\r\n        return this.addEmailSuffix(input);\r\n      default:\r\n        return of(\r\n          this.fixData.filter(option => this.filterOption(input, option)),\r\n        );\r\n    }\r\n  }\r\n\r\n  private addEmailSuffix(value: string) {\r\n    return of(\r\n      !value || ~value.indexOf('@')\r\n        ? []\r\n        : this.fixData.map(domain => `${value}@${domain.label}`),\r\n    );\r\n  }\r\n}\r\n"]}