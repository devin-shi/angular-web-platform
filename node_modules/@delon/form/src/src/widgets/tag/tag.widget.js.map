{"version":3,"file":"tag.widget.js","sourceRoot":"","sources":["../../../../../../../packages/form/src/widgets/tag/tag.widget.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;;IAqBP,qCAAa;;;;;;;;IAG1C,yBAAK;;;;IAAL,UAAM,KAAU;QAAhB,iBAOC;QANC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS,CACjE,UAAA,IAAI;YACF,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,KAAI,CAAC,aAAa,EAAE,CAAC;SACtB,CACF,CAAC;KACH;;;;;IAED,4BAAQ;;;;IAAR,UAAS,IAAkB;QACzB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;YAAgB,IAAI,CAAC,EAAE,kBAAe,IAAI,CAAC,OAAO,CAAC,CAAC;KAChE;;;;IAED,+BAAW;;;IAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;YAAa,IAAI,CAAC,EAAE,gBAAa,CAAC;KAC9C;;;;;IAED,0BAAM;;;;IAAN,UAAO,CAAM;QACX,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;YAAU,IAAI,CAAC,EAAE,YAAS,CAAC,CAAC,CAAC;KACzC;;;;IAEO,+BAAW;;;;QACjB,IAAI,CAAC,YAAY,CAAC,QAAQ,CACxB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,EAClD,KAAK,CACN,CAAC;;;gBAjDL,SAAS,SAAC;oBACT,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,waAcT;oBACD,mBAAmB,EAAE,KAAK;iBAC3B;;oBAvBD;EAwB+B,aAAa;SAA/B,SAAS","sourcesContent":["import { Component } from '@angular/core';\nimport { ControlWidget } from '../../widget';\nimport { SFSchemaEnum } from '../../schema';\nimport { getData } from '../../utils';\n\n@Component({\n  selector: 'sf-tag',\n  template: `\n  <sf-item-wrap [id]=\"id\" [schema]=\"schema\" [ui]=\"ui\" [showError]=\"showError\" [error]=\"error\" [showTitle]=\"schema.title\">\n\n    <nz-tag\n      *ngFor=\"let i of data\"\n      nzMode=\"checkable\"\n      [nzChecked]=\"i.checked\"\n      (nzAfterClose)=\"_afterClose()\"\n      (nzOnClose)=\"_close($event)\"\n      (nzCheckedChange)=\"onChange(i)\">\n      {{i.label}}\n    </nz-tag>\n\n  </sf-item-wrap>\n  `,\n  preserveWhitespaces: false,\n})\nexport class TagWidget extends ControlWidget {\n  data: SFSchemaEnum[];\n\n  reset(value: any) {\n    getData(this.schema, this.ui, this.formProperty.formData).subscribe(\n      list => {\n        this.data = list;\n        this.detectChanges();\n      },\n    );\n  }\n\n  onChange(item: SFSchemaEnum) {\n    item.checked = !item.checked;\n    this.updateValue();\n    if (this.ui.checkedChange) this.ui.checkedChange(item.checked);\n  }\n\n  _afterClose() {\n    if (this.ui.afterClose) this.ui.afterClose();\n  }\n\n  _close(e: any) {\n    if (this.ui.onClose) this.ui.onClose(e);\n  }\n\n  private updateValue() {\n    this.formProperty.setValue(\n      this.data.filter(w => w.checked).map(i => i.value),\n      false,\n    );\n  }\n}\n"]}