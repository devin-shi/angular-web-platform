{"version":3,"file":"radio.widget.js","sourceRoot":"","sources":["../../../../../../../packages/form/src/widgets/radio/radio.widget.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;;IAmCL,uCAAa;;;qBAC9B,EAAE;;;;;;;IAGhB,2BAAK;;;;IAAL,UAAM,KAAU;QAAhB,iBAKC;QAJC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,EAAE,iBAAc,SAAS,CAAC,KAAK,SAAS,CAAC;QAChE,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,SAAS,CACjE,UAAA,IAAI,IAAI,OAAA,CAAC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAlB,CAAkB,CAC3B,CAAC;KACH;;gBA1CF,SAAS,SAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,g7BA4BT;oBACD,mBAAmB,EAAE,KAAK;iBAC3B;;sBApCD;EAqCiC,aAAa;SAAjC,WAAW","sourcesContent":["import { Component } from '@angular/core';\r\nimport { ControlWidget } from '../../widget';\r\nimport { getData } from '../../utils';\r\n\r\n@Component({\r\n  selector: 'sf-radio',\r\n  template: `\r\n  <sf-item-wrap [id]=\"id\" [schema]=\"schema\" [ui]=\"ui\" [showError]=\"showError\" [error]=\"error\" [showTitle]=\"schema.title\">\r\n\r\n    <nz-radio-group\r\n      [nzDisabled]=\"disabled\"\r\n      [nzSize]=\"ui.size\"\r\n      [nzName]=\"id\"\r\n      [ngModel]=\"value\"\r\n      (ngModelChange)=\"setValue($event)\">\r\n      <ng-container *ngIf=\"styleType\">\r\n        <label *ngFor=\"let option of data\"\r\n          nz-radio\r\n          [nzValue]=\"option.value\"\r\n          [nzDisabled]=\"option.disabled\">\r\n          <span [innerHTML]=\"option.label\"></span>\r\n        </label>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!styleType\">\r\n        <label *ngFor=\"let option of data\"\r\n          nz-radio-button\r\n          [nzValue]=\"option.value\"\r\n          [nzDisabled]=\"option.disabled\">\r\n          <span [innerHTML]=\"option.label\"></span>\r\n        </label>\r\n      </ng-container>\r\n    </nz-radio-group>\r\n\r\n  </sf-item-wrap>\r\n  `,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class RadioWidget extends ControlWidget {\r\n  data: any[] = [];\r\n  styleType: boolean;\r\n\r\n  reset(value: any) {\r\n    this.styleType = (this.ui.styleType || 'default') === 'default';\r\n    getData(this.schema, this.ui, this.formProperty.formData).subscribe(\r\n      list => (this.data = list),\r\n    );\r\n  }\r\n}\r\n"]}