/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ControlWidget } from '../../widget';
import * as format from 'date-fns/format';
var /** @type {?} */ DATEFORMAT = {
    'date-time': "YYYY-MM-DDTHH:mm:ssZ",
};
var /** @type {?} */ DEFAULTFORMAT = 'YYYY-MM-DD HH:mm:ss';
var DateWidget = /** @class */ (function (_super) {
    tslib_1.__extends(DateWidget, _super);
    function DateWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    DateWidget.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.type = this.schema.format === 'date-time' ? 'datetime-local' : 'date';
        this.format =
            !this.ui["format"] && this.schema.format
                ? DATEFORMAT[this.schema.format] || 'YYYY-MM-DD'
                : this.ui["format"];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateWidget.prototype.reset = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.formatDisplay(value);
    };
    /**
     * @param {?} value
     * @param {?} formatString
     * @return {?}
     */
    DateWidget.prototype.formatData = /**
     * @param {?} value
     * @param {?} formatString
     * @return {?}
     */
    function (value, formatString) {
        return format(value, formatString, { locale: (/** @type {?} */ (window)).__locale__ });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateWidget.prototype.formatDisplay = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // TODO：HTML 原生日期组件无法按 `displayFormat` 格式，暂时停用以下代码
        // this.displayValue = this.formatData(value, this.ui.displayFormat || DEFAULTFORMAT);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateWidget.prototype._change = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.formatDisplay(value);
        this.setValue(this.formatData(value, this.format || DEFAULTFORMAT));
    };
    DateWidget.decorators = [
        { type: Component, args: [{
                    selector: 'sf-date',
                    template: "\n  <sf-item-wrap [id]=\"id\" [schema]=\"schema\" [ui]=\"ui\" [showError]=\"showError\" [error]=\"error\" [showTitle]=\"schema.title\">\n\n    <input nz-input\n      [attr.id]=\"id\"\n      [disabled]=\"disabled\"\n      [nzSize]=\"ui.size\"\n      [value]=\"displayValue\"\n      (input)=\"_change($event.target?.value)\"\n      [attr.type]=\"type\"\n      [attr.placeholder]=\"ui.placeholder\"\n      autocomplete=\"off\">\n\n  </sf-item-wrap>\n  ",
                    preserveWhitespaces: false,
                },] },
    ];
    return DateWidget;
}(ControlWidget));
export { DateWidget };
function DateWidget_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DateWidget.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DateWidget.ctorParameters;
    /** @type {?} */
    DateWidget.prototype.type;
    /** @type {?} */
    DateWidget.prototype.displayValue;
    /** @type {?} */
    DateWidget.prototype.format;
}
//# sourceMappingURL=date.widget.js.map