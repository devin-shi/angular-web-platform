{"version":3,"file":"validator.factory.js","sourceRoot":"","sources":["../../../../../packages/form/src/validator.factory.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;;;;AAM3C;;;AAAA;;;iCAPA;IAYC,CAAA;;;;AALD,kCAKC;;;;;;;;;;;IAE8C,qDAAsB;IAGnE,mCAGU;QAHV,YAKE,iBAAO,SAgBR;QAlBS,aAAO,GAAP,OAAO;QAGf,KAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAChB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE;YAC7B,aAAa,EAAE,UAAU;YACzB,SAAS,EAAE,IAAI;YACf,YAAY,EAAE,IAAI;SACnB,CAAC,CACH,CAAC;QACF,KAAI,CAAC,GAAG,CAAC,SAAS,CAChB,UAAU,EACV,sDAAsD,CACvD,CAAC;QACF,KAAI,CAAC,GAAG,CAAC,SAAS,CAChB,OAAO,EACP,4YAA4Y,CAC7Y,CAAC;;KACH;;;;;;IAED,qDAAiB;;;;;IAAjB,UACE,MAAgB,EAChB,YAA0C;QAF5C,iBAqBC;QAjBC,qBAAM,cAAc,GAAa,EAAE;aAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;aACnC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAEvC,MAAM,CAAC,UAAC,KAAU;YAChB,IAAI,CAAC;gBACH,KAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAClC;YAAC,KAAK,CAAC,CAAC,iBAAA,CAAC,EAAE,CAAC;;;aAGZ;YACD,qBAAI,MAAM,GAAG,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7B,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,IAAI,cAAc,IAAI,MAAM,CAAC,CAAC,CAAC;gBAC7C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAxC,CAAwC,CAAC,CAAC;aACvE;YACD,MAAM,CAAC,MAAM,CAAC;SACf,CAAC;KACH;;;gBA5DM,eAAe,uBAiBnB,QAAQ,YACR,MAAM,SAAC,eAAe;;oCAnB3B;EAc+C,sBAAsB;SAAxD,yBAAyB","sourcesContent":["import { Inject, Optional } from '@angular/core';\r\nimport { DelonFormConfig } from './config';\r\nimport { ErrorData } from './errors';\r\nimport { SFSchema } from './schema';\r\n\r\ndeclare var Ajv: any;\r\n\r\nexport abstract class SchemaValidatorFactory {\r\n  abstract createValidatorFn(\r\n    schema: SFSchema,\r\n    extraOptions: { ingoreKeywords: string[] },\r\n  ): (value: SFSchema) => ErrorData[];\r\n}\r\n\r\nexport class AjvSchemaValidatorFactory extends SchemaValidatorFactory {\r\n  protected ajv: any;\r\n\r\n  constructor(\r\n    @Optional()\r\n    @Inject(DelonFormConfig)\r\n    private options: DelonFormConfig,\r\n  ) {\r\n    super();\r\n    this.ajv = new Ajv(\r\n      Object.assign({}, options.ajv, {\r\n        errorDataPath: 'property',\r\n        allErrors: true,\r\n        jsonPointers: true,\r\n      }),\r\n    );\r\n    this.ajv.addFormat(\r\n      'data-url',\r\n      /^data:([a-z]+\\/[a-z0-9-+.]+)?;name=(.*);base64,(.*)$/,\r\n    );\r\n    this.ajv.addFormat(\r\n      'color',\r\n      /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\r\n    );\r\n  }\r\n\r\n  createValidatorFn(\r\n    schema: SFSchema,\r\n    extraOptions: { ingoreKeywords: string[] },\r\n  ): (value: any) => ErrorData[] {\r\n    const ingoreKeywords: string[] = []\r\n      .concat(this.options.ingoreKeywords)\r\n      .concat(extraOptions.ingoreKeywords);\r\n\r\n    return (value: any): ErrorData[] => {\r\n      try {\r\n        this.ajv.validate(schema, value);\r\n      } catch (e) {\r\n        // swallow errors thrown in ajv due to invalid schemas, these\r\n        // still get displayed\r\n      }\r\n      let errors = this.ajv.errors;\r\n      if (this.options && ingoreKeywords && errors) {\r\n        errors = errors.filter(w => ingoreKeywords.indexOf(w.keyword) === -1);\r\n      }\r\n      return errors;\r\n    };\r\n  }\r\n}\r\n"]}