{"version":3,"file":"sf-fixed.directive.js","sourceRoot":"","sources":["../../../../../packages/form/src/sf-fixed.directive.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EACL,UAAU,EACV,SAAS,GAIV,MAAM,eAAe,CAAC;;IA0BrB,0BAAY,EAAc,EAAU,MAAiB;QAAjB,WAAM,GAAN,MAAM,CAAW;uBArBnC,KAAK;QAsBrB,IAAI,CAAC,EAAE,qBAAG,EAAE,CAAC,aAA+B,CAAA,CAAC;KAC9C;;;;IAnBO,+BAAI;;;;QACV,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC;QAC/D,qBAAM,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC;QAC9D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC3C,qBAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAC/D,qBAAM,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,SAAO,IAAM,CAAC,CAAC;SACtD;QAAC,IAAI,CAAC,CAAC;YACN,qBAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CACtC,gCAAgC,CACjC,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;SACtD;;;;;IAOH,0CAAe;;;IAAf;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,EAAE,CAAC;KACb;;;;;IAED,sCAAW;;;;IAAX,UAAY,OAAsB;QAChC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAAC,IAAI,CAAC,IAAI,EAAE,CAAC;KAC/B;;gBAnCF,SAAS,SAAC,EAAE,QAAQ,EAAE,eAAe,EAAE;;;;gBAPtC,UAAU;gBACV,SAAS;;;wBAWR,KAAK,SAAC,aAAa;;2BAftB;;SAWa,gBAAgB","sourcesContent":["import {\n  Directive,\n  Input,\n  ElementRef,\n  Renderer2,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n@Directive({ selector: '[fixed-label]' })\nexport class SFFixedDirective implements AfterViewInit, OnChanges {\n  private el: HTMLDivElement;\n  private _inited = false;\n\n  @Input('fixed-label') num: number;\n\n  private init() {\n    if (!this._inited || this.num == null || this.num <= 0) return;\n    const widgetEl = this.el.querySelector('.ant-row') || this.el;\n    this.render.addClass(widgetEl, 'sf-fixed');\n    const labelEl = widgetEl.querySelector('.ant-form-item-label');\n    const unit = this.num + 'px';\n    if (labelEl) {\n      this.render.setStyle(labelEl, 'width', unit);\n      this.render.setStyle(labelEl, 'flex', `0 0 ${unit}`);\n    } else {\n      const controlEl = widgetEl.querySelector(\n        '.ant-form-item-control-wrapper',\n      );\n      this.render.setStyle(controlEl, 'margin-left', unit);\n    }\n  }\n\n  constructor(er: ElementRef, private render: Renderer2) {\n    this.el = er.nativeElement as HTMLDivElement;\n  }\n\n  ngAfterViewInit(): void {\n    this._inited = true;\n    this.init();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._inited) this.init();\n  }\n}\n"]}