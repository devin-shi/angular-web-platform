{"version":3,"file":"array.property.js","sourceRoot":"","sources":["../../../../../../packages/form/src/model/array.property.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyGroup, FormProperty } from './form.property';\r\nimport { SchemaValidatorFactory } from '../validator.factory';\r\nimport { SFUISchema, SFUISchemaItem } from '../schema/ui';\r\nimport { DelonFormConfig } from '../config';\r\nimport { FormPropertyFactory } from './form.property.factory';\r\nimport { ObjectProperty } from './object.property';\r\nimport { ErrorData } from '../errors';\r\n\r\nexport class ArrayProperty extends PropertyGroup {\r\n  tick = 1;\r\n\r\n  constructor(\r\n    private formPropertyFactory: FormPropertyFactory,\r\n    schemaValidatorFactory: SchemaValidatorFactory,\r\n    schema: any,\r\n    ui: SFUISchema | SFUISchemaItem,\r\n    formData: {},\r\n    parent: PropertyGroup,\r\n    path: string,\r\n    options: DelonFormConfig,\r\n  ) {\r\n    super(schemaValidatorFactory, schema, ui, formData, parent, path, options);\r\n    this.properties = [];\r\n  }\r\n\r\n  getProperty(path: string) {\r\n    const subPathIdx = path.indexOf('/');\r\n    const pos = +(subPathIdx !== -1 ? path.substr(0, subPathIdx) : path);\r\n    const list = this.properties as PropertyGroup[];\r\n    if (isNaN(pos) || pos >= list.length) return undefined;\r\n    const subPath = path.substr(subPathIdx + 1);\r\n    return list[pos].getProperty(subPath);\r\n  }\r\n\r\n  setValue(value: any, onlySelf: boolean) {\r\n    this.properties = [];\r\n    this.clearErrors();\r\n    this.resetProperties(value);\r\n    this.updateValueAndValidity(onlySelf, true);\r\n  }\r\n\r\n  resetValue(value: any, onlySelf: boolean) {\r\n    this._value = value || this.schema.default || [];\r\n    this.properties = [];\r\n    this.clearErrors();\r\n    this.resetProperties(this._value);\r\n    this.updateValueAndValidity(onlySelf, true);\r\n  }\r\n\r\n  _hasValue(): boolean {\r\n    return true;\r\n  }\r\n\r\n  _updateValue() {\r\n    const value: any[] = [];\r\n    this.forEachChild((property: ObjectProperty, _) => {\r\n      if (property.visible && property._hasValue()) {\r\n        value.push(Object.assign({}, property.formData, property.value));\r\n      }\r\n    });\r\n    this._value = value;\r\n  }\r\n\r\n  private addProperty(value: any) {\r\n    const newProperty = this.formPropertyFactory.createProperty(\r\n      this.schema.items,\r\n      this.ui.$items,\r\n      value,\r\n      this,\r\n    ) as ObjectProperty;\r\n    (<FormProperty[]>this.properties).push(newProperty);\r\n    return newProperty;\r\n  }\r\n\r\n  private resetProperties(value: any[]) {\r\n    for (const item of value) {\r\n      const property = this.addProperty(item);\r\n      property.resetValue(item, true);\r\n    }\r\n  }\r\n\r\n  private clearErrors(path?: string) {\r\n    if (path) delete this._objErrors[path];\r\n    else this._objErrors = {};\r\n  }\r\n\r\n  // region: actions\r\n\r\n  add(value: any = null): FormProperty {\r\n    const newProperty = this.addProperty(value);\r\n    newProperty.resetValue(value, false);\r\n    return newProperty;\r\n  }\r\n\r\n  remove(index: number) {\r\n    const list = <FormProperty[]>this.properties;\r\n    this.clearErrors(list[index].path);\r\n    list.splice(index, 1);\r\n    this.updateValueAndValidity(false, true);\r\n  }\r\n\r\n  // endregion\r\n}\r\n"]}