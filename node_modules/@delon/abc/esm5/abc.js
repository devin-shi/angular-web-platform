import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, NO_ERRORS_SCHEMA, NgModule, Optional, Output, Pipe, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { CommonModule, DOCUMENT, DecimalPipe, LocationStrategy } from '@angular/common';
import { DOCUMENT as DOCUMENT$1 } from '@angular/platform-browser';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ActivatedRoute, ActivationEnd, ActivationStart, NavigationEnd, Router, RouterModule } from '@angular/router';
import { NgZorroAntdModule } from 'ng-zorro-antd';
import { debounceTime, filter, map, share, tap } from 'rxjs/operators';
import { ALAIN_I18N_TOKEN, CNCurrencyPipe, DatePipe, MenuService, ModalHelper, SettingsService, YNPipe } from '@delon/theme';
import { HttpClient } from '@angular/common/http';
import { saveAs } from 'file-saver';
import { DelonUtilModule, LazyService, deepCopy, deepGet, isEmpty } from '@delon/util';
import { CountdownModule } from 'ngx-countdown';
import format from 'date-fns/format';
import addSeconds from 'date-fns/add_seconds';
import { FormsModule } from '@angular/forms';
import { __assign } from 'tslib';
import { ACLService } from '@delon/acl';
import { of as of$1 } from 'rxjs/observable/of';
import { combineLatest as combineLatest$1 } from 'rxjs/observable/combineLatest';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { Overlay, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Subscription as Subscription$1 } from 'rxjs/Subscription';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { FromEventObservable as FromEventObservable$1 } from 'rxjs/observable/FromEventObservable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdErrorCollectConfig = /** @class */ (function () {
    function AdErrorCollectConfig() {
        /**
         * 监听频率
         */
        this.freq = 500;
        /**
         * 顶部偏移值
         */
        this.offsetTop = 65 + 64 + 8 * 2;
    }
    AdErrorCollectConfig.decorators = [
        { type: Injectable },
    ];
    return AdErrorCollectConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 错误消息采集器
 * PS：虽然此法并不好看，但对响应式表单&模板表单有很好的效果。
 */
var ErrorCollectComponent = /** @class */ (function () {
    function ErrorCollectComponent(cog, el, renderer, cd, doc) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.doc = doc;
        this.$time = null;
        this._freq = 500;
        this._offsetTop = 65 + 64 + 8 * 2;
        this._hiden = true;
        this.count = 0;
        Object.assign(this, cog);
    }
    Object.defineProperty(ErrorCollectComponent.prototype, "freq", {
        get: /**
         * @return {?}
         */
        function () {
            return this._freq;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._freq = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErrorCollectComponent.prototype, "offsetTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._offsetTop;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._offsetTop = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErrorCollectComponent.prototype, "errEls", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formEl.querySelectorAll('.has-error');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ count = this.errEls.length;
        if (count === this.count)
            return;
        this.count = count;
        this._hiden = count === 0;
        this.cd.markForCheck();
    };
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype._click = /**
     * @return {?}
     */
    function () {
        if (this.count === 0)
            return false;
        // nz-form-control
        var /** @type {?} */ els = this.errEls;
        var /** @type {?} */ formItemEl = this.findParent(els[0], '[nz-form-control]') || els[0];
        formItemEl.scrollIntoView(true);
        // fix header height
        this.doc.documentElement.scrollTop -= this.offsetTop;
    };
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uninstall();
        this.$time = setInterval(function () { return _this.update(); }, this.freq);
        this.update();
    };
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        clearInterval(this.$time);
    };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    ErrorCollectComponent.prototype.findParent = /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    function (el, selector) {
        var /** @type {?} */ retEl = null;
        while (el) {
            if (el.querySelector(selector)) {
                retEl = el;
                break;
            }
            el = el.parentElement;
        }
        return retEl;
    };
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.formEl = this.findParent(this.el.nativeElement, 'form');
        if (this.formEl === null)
            throw new Error('未找到有效 form 元素');
        (/** @type {?} */ (this.el.nativeElement)).classList.add('error-collect', 'pr-lg', 'text-error', 'point');
        this.install();
    };
    /**
     * @return {?}
     */
    ErrorCollectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    ErrorCollectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'error-collect, [error-collect]',
                    template: "\n  <i class=\"anticon anticon-exclamation-circle\"></i>\n  <span class=\"pl-sm\">{{count}}</span>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    ErrorCollectComponent.ctorParameters = function () { return [
        { type: AdErrorCollectConfig, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    ErrorCollectComponent.propDecorators = {
        "freq": [{ type: Input },],
        "offsetTop": [{ type: Input },],
        "_hiden": [{ type: HostBinding, args: ['class.d-none',] },],
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return ErrorCollectComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS = [ErrorCollectComponent];
var AdErrorCollectModule = /** @class */ (function () {
    function AdErrorCollectModule() {
    }
    /**
     * @return {?}
     */
    AdErrorCollectModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AdErrorCollectModule,
            providers: [AdErrorCollectConfig],
        };
    };
    AdErrorCollectModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS.slice(),
                    exports: COMPONENTS.slice(),
                },] },
    ];
    return AdErrorCollectModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CLS = 'ad-footer-toolbar';
var FooterToolbarComponent = /** @class */ (function () {
    function FooterToolbarComponent(el, renderer, doc) {
        this.el = el;
        this.renderer = renderer;
        this.doc = doc;
        this._errorCollect = false;
    }
    Object.defineProperty(FooterToolbarComponent.prototype, "errorCollect", {
        get: /**
         * @return {?}
         */
        function () {
            return this._errorCollect;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._errorCollect = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FooterToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        (/** @type {?} */ (this.el.nativeElement)).classList.add(CLS);
        this.renderer.addClass(this.el.nativeElement, CLS);
        this.doc.querySelector('body').classList.add("has-" + CLS);
    };
    /**
     * @return {?}
     */
    FooterToolbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.doc.querySelector('body').classList.remove("has-" + CLS);
    };
    FooterToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'footer-toolbar',
                    template: "\n  <div class=\"left\"><ng-container *ngIf=\"extra\" [ngTemplateOutlet]=\"extra\"></ng-container></div>\n  <div class=\"right\">\n    <error-collect *ngIf=\"errorCollect\"></error-collect>\n    <ng-content></ng-content>\n  </div>\n  ",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    FooterToolbarComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    FooterToolbarComponent.propDecorators = {
        "errorCollect": [{ type: Input },],
        "extra": [{ type: ContentChild, args: ['extra',] },],
    };
    return FooterToolbarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$1 = [FooterToolbarComponent];
var AdFooterToolbarModule = /** @class */ (function () {
    function AdFooterToolbarModule() {
    }
    /**
     * @return {?}
     */
    AdFooterToolbarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdFooterToolbarModule, providers: [] };
    };
    AdFooterToolbarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, AdErrorCollectModule],
                    declarations: COMPONENTS$1.slice(),
                    exports: COMPONENTS$1.slice(),
                },] },
    ];
    return AdFooterToolbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SHOWCLS = 'nav-floating-show';
var FLOATINGCLS = 'nav-floating';
var SidebarNavComponent = /** @class */ (function () {
    function SidebarNavComponent(menuSrv, settings, router$$1, locationStrategy, render, cd, doc, el) {
        this.menuSrv = menuSrv;
        this.settings = settings;
        this.router = router$$1;
        this.locationStrategy = locationStrategy;
        this.render = render;
        this.cd = cd;
        this.doc = doc;
        this.list = [];
        this.autoCloseUnderPad = true;
        this.select = new EventEmitter();
        this.rootEl = /** @type {?} */ (el.nativeElement);
    }
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.bodyEl = this.doc.querySelector('body');
        this.menuSrv.openedByUrl(this.router.url);
        this.genFloatingContainer();
        this.change$ = /** @type {?} */ (this.menuSrv.change.subscribe(function (res) {
            _this.list = res;
            _this.cd.detectChanges();
        }));
        this.installUnderPad();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SidebarNavComponent.prototype.floatingAreaClickHandle = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        e.preventDefault();
        var /** @type {?} */ linkNode = /** @type {?} */ (e.target);
        if (linkNode.nodeName !== 'A') {
            return false;
        }
        var /** @type {?} */ url = linkNode.getAttribute('href');
        if (url && url.startsWith('#')) {
            url = url.slice(1);
        }
        // 如果配置了bashHref 则去掉baseHref
        var /** @type {?} */ baseHerf = this.locationStrategy.getBaseHref();
        if (baseHerf) {
            url = url.slice(baseHerf.length);
        }
        this.router.navigateByUrl(url);
        this.onSelect(this.menuSrv.getPathByUrl(url).pop());
        this.hideAll();
        return false;
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.clearFloatingContainer = /**
     * @return {?}
     */
    function () {
        if (!this.floatingEl)
            return;
        this.floatingEl.removeEventListener('click', this.floatingAreaClickHandle.bind(this));
        // fix ie: https://github.com/cipchk/delon/issues/52
        if (this.floatingEl.hasOwnProperty('remove')) {
            this.floatingEl.remove();
        }
        else if (this.floatingEl.parentNode) {
            this.floatingEl.parentNode.removeChild(this.floatingEl);
        }
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.genFloatingContainer = /**
     * @return {?}
     */
    function () {
        this.clearFloatingContainer();
        this.floatingEl = this.render.createElement('div');
        this.floatingEl.classList.add(FLOATINGCLS + '-container');
        this.floatingEl.addEventListener('click', this.floatingAreaClickHandle.bind(this), false);
        this.bodyEl.appendChild(this.floatingEl);
    };
    /**
     * @param {?} linkNode
     * @param {?} item
     * @return {?}
     */
    SidebarNavComponent.prototype.genSubNode = /**
     * @param {?} linkNode
     * @param {?} item
     * @return {?}
     */
    function (linkNode, item) {
        var /** @type {?} */ id = "_sidebar-nav-" + item["__id"];
        var /** @type {?} */ node = /** @type {?} */ (linkNode.nextElementSibling.cloneNode(true));
        node.id = id;
        node.classList.add(FLOATINGCLS);
        node.addEventListener('mouseleave', function () {
            node.classList.remove(SHOWCLS);
        }, false);
        this.floatingEl.appendChild(node);
        return node;
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.hideAll = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ allNode = this.floatingEl.querySelectorAll('.' + FLOATINGCLS);
        for (var /** @type {?} */ i = 0; i < allNode.length; i++) {
            allNode[i].classList.remove(SHOWCLS);
        }
    };
    /**
     * @param {?} linkNode
     * @param {?} node
     * @return {?}
     */
    SidebarNavComponent.prototype.calPos = /**
     * @param {?} linkNode
     * @param {?} node
     * @return {?}
     */
    function (linkNode, node) {
        var /** @type {?} */ rect = linkNode.getBoundingClientRect();
        // bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14721015/
        var /** @type {?} */ scrollTop = Math.max(this.doc.documentElement.scrollTop, this.bodyEl.scrollTop);
        var /** @type {?} */ top = rect.top + scrollTop, /** @type {?} */
        left = rect.right + 5;
        node.style.top = top + "px";
        node.style.left = left + "px";
    };
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    SidebarNavComponent.prototype.showSubMenu = /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        e.preventDefault();
        var /** @type {?} */ linkNode = /** @type {?} */ (e.target);
        this.genFloatingContainer();
        var /** @type {?} */ subNode = this.genSubNode(/** @type {?} */ (linkNode), item);
        this.hideAll();
        subNode.classList.add(SHOWCLS);
        this.calPos(/** @type {?} */ (linkNode), subNode);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SidebarNavComponent.prototype.onSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.select.emit(item);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SidebarNavComponent.prototype.toggleOpen = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.menuSrv.visit(function (i, p) {
            if (i !== item)
                i["_open"] = false;
        });
        var /** @type {?} */ pItem = item["__parent"];
        while (pItem) {
            pItem._open = true;
            pItem = pItem.__parent;
        }
        item._open = !item._open;
        this.cd.markForCheck();
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.hideAll();
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.change$.unsubscribe();
        if (this.route$)
            this.route$.unsubscribe();
        this.clearFloatingContainer();
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.installUnderPad = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.autoCloseUnderPad)
            return;
        this.route$ = /** @type {?} */ (this.router.events
            .pipe(filter(function (e) { return e instanceof NavigationEnd; }))
            .subscribe(function (s) { return _this.underPad(); }));
        this.underPad();
    };
    /**
     * @return {?}
     */
    SidebarNavComponent.prototype.underPad = /**
     * @return {?}
     */
    function () {
        if (window.innerWidth < 992 && !this.settings.layout.collapsed) {
            this.settings.setLayout('collapsed', true);
        }
    };
    SidebarNavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sidebar-nav',
                    template: "<ul class=\"nav\"> <ng-container *ngFor=\"let group of list\"> <ng-template [ngIf]=\"group._hidden !== true\"> <li class=\"nav-group-title\"> <span>{{ group.text }}</span> </li> <ng-container *ngFor=\"let child1 of group.children\"> <li *ngIf=\"child1._hidden !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child1._open\"> <!-- link --> <a *ngIf=\"child1._type === 1\" (click)=\"onSelect(child1)\" [routerLink]=\"child1.link\" [target]=\"child1.target\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip> <i class=\"{{ child1.icon }}\"></i> </span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- external link --> <a *ngIf=\"child1._type === 2\" href=\"{{ child1.externalLink }}\" target=\"{{child1.target}}\"> <i *ngIf=\"!settings.layout.collapsed\" class=\"{{ child1.icon }}\"></i> <nz-tooltip *ngIf=\"settings.layout.collapsed\" nzPlacement=\"right\" [nzTitle]=\"child1.text\"> <span nz-tooltip> <i class=\"{{ child1.icon }}\"></i> </span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- has children link --> <a *ngIf=\"child1._type === 3\" class=\"nav-sub-title\" (click)=\"toggleOpen(child1)\" (mouseenter)=\"showSubMenu($event, child1)\"> <i class=\"{{ child1.icon }}\"></i> <span>{{ child1.text }}</span> </a> <!-- badge --> <div *ngIf=\"child1.badge\" title=\"{{child1.badge}}\" class=\"badge badge-{{child1.badge_status}}\" [class.badge-dot]=\"child1.badge_dot\"> <em>{{child1.badge}}</em> </div> <!-- Level 2 --> <ul *ngIf=\"child1._type === 3\" class=\"nav nav-sub nav-depth{{child1._depth}}\"> <ng-container *ngFor=\"let child2 of child1.children\"> <li *ngIf=\"child2._hidden !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child2._open\"> <!-- link --> <a *ngIf=\"child2._type === 1\" (click)=\"onSelect(child2)\" [routerLink]=\"child2.link\" [target]=\"child2.target\">{{ child2.text }}</a> <!-- external link --> <a *ngIf=\"child2._type === 2\" href=\"{{ child2.externalLink }}\" target=\"{{ child2.target }}\">{{ child2.text }}</a> <!-- has children link --> <a *ngIf=\"child2._type === 3\" class=\"nav-sub-title\" (click)=\"toggleOpen(child2)\"> {{ child2.text }} </a> <!-- badge --> <div *ngIf=\"child2.badge\" title=\"{{child2.badge}}\" class=\"badge badge-{{child2.badge_status}}\" [class.badge-dot]=\"child2.badge_dot\"> <em>{{child2.badge}}</em> </div> <!-- Level 3 --> <ul *ngIf=\"child2._type === 3\" class=\"nav nav-sub nav-depth{{child2._depth}}\"> <ng-container *ngFor=\"let child3 of child2.children\"> <li *ngIf=\"child3._hidden !== true\" [routerLinkActive]=\"['nav-item-selected']\" [class.nav-submenu-open]=\"child3._open\"> <!-- link --> <a *ngIf=\"child3._type === 1\" (click)=\"onSelect(child3)\" [routerLink]=\"child3.link\" [target]=\"child3.target\">{{ child3.text }}</a> <!-- external link --> <a *ngIf=\"child3._type === 2\" href=\"{{ child3.externalLink }}\" target=\"{{ child3.target }}\">{{ child3.text }}</a> <!-- badge --> <div *ngIf=\"child3.badge\" title=\"{{child3.badge}}\" class=\"badge badge-{{child3.badge_status}}\" [class.badge-dot]=\"child3.badge_dot\"> <em>{{child3.badge}}</em> </div> </li> </ng-container> </ul> </li> </ng-container> </ul> </li> </ng-container> </ng-template> </ng-container> </ul> ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    SidebarNavComponent.ctorParameters = function () { return [
        { type: MenuService, },
        { type: SettingsService, },
        { type: Router, },
        { type: LocationStrategy, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: ElementRef, },
    ]; };
    SidebarNavComponent.propDecorators = {
        "autoCloseUnderPad": [{ type: Input },],
        "select": [{ type: Output },],
        "onClick": [{ type: HostListener, args: ['document:click', ['$event.target'],] },],
    };
    return SidebarNavComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdSidebarNavModule = /** @class */ (function () {
    function AdSidebarNavModule() {
    }
    /**
     * @return {?}
     */
    AdSidebarNavModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdSidebarNavModule, providers: [] };
    };
    AdSidebarNavModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule, NgZorroAntdModule],
                    declarations: [SidebarNavComponent],
                    exports: [SidebarNavComponent],
                },] },
    ];
    return AdSidebarNavModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文件下载
 *
 * ```html
 * <button nz-button down-file http-url="assets/demo{{i}}" file-name="demo中文">{{i}}</button>
 * ```
 */
var DownFileDirective = /** @class */ (function () {
    function DownFileDirective(el, http$$1) {
        this.el = el;
        this.http = http$$1;
        /**
         * 请求类型
         */
        this.httpMethod = 'get';
        /**
         * 成功回调
         */
        this.success = new EventEmitter();
        /**
         * 错误回调
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DownFileDirective.prototype._click = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.el.nativeElement.disabled = true;
        this.http
            .request(this.httpMethod, this.httpUrl, {
            params: this.httpData || {},
            responseType: 'blob',
            observe: 'response',
        })
            .subscribe(function (res) {
            if (res.status !== 200 || res.body.size <= 0) {
                _this.error.emit(res);
                return;
            }
            var /** @type {?} */ fileName = _this.fileName ||
                res.headers.get('filename') ||
                res.headers.get('x-filename');
            saveAs(res.body, decodeURI(fileName));
            _this.success.emit(res);
            _this.el.nativeElement.disabled = false;
        }, function (err) {
            _this.error.emit(err);
            _this.el.nativeElement.disabled = false;
        });
    };
    DownFileDirective.decorators = [
        { type: Directive, args: [{ selector: '[down-file]' },] },
    ];
    /** @nocollapse */
    DownFileDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: HttpClient, },
    ]; };
    DownFileDirective.propDecorators = {
        "httpData": [{ type: Input, args: ['http-data',] },],
        "httpMethod": [{ type: Input, args: ['http-method',] },],
        "httpUrl": [{ type: Input, args: ['http-url',] },],
        "fileName": [{ type: Input, args: ['file-name',] },],
        "success": [{ type: Output },],
        "error": [{ type: Output },],
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return DownFileDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DIRECTIVES = [DownFileDirective];
var AdDownFileModule = /** @class */ (function () {
    function AdDownFileModule() {
    }
    /**
     * @return {?}
     */
    AdDownFileModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdDownFileModule, providers: [] };
    };
    AdDownFileModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: DIRECTIVES.slice(),
                    exports: DIRECTIVES.slice(),
                },] },
    ];
    return AdDownFileModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdImageConfig = /** @class */ (function () {
    function AdImageConfig() {
        /**
         * 默认大小，默认值：`64`，单位：px
         */
        this.size = 64;
        /**
         * 错误图片
         */
        this.error = './assets/img/logo.svg';
    }
    AdImageConfig.decorators = [
        { type: Injectable },
    ];
    return AdImageConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * img标签
 * + 支持微信、qq头像规则缩略图规则
 * + 支持移除http&https协议http
 * + 支持增加onerror事件
 */
var ImageDirective = /** @class */ (function () {
    function ImageDirective(el, render, DEF) {
        this.el = el;
        this.render = render;
        this.size = 64;
        this.error = './assets/img/logo.svg';
        this.inited = false;
        Object.assign(this, deepCopy(DEF));
    }
    /**
     * @return {?}
     */
    ImageDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.update();
        this.updateError();
        this.inited = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ImageDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.inited) {
            if (changes.error)
                this.updateError();
            else
                this.update();
        }
    };
    /**
     * @return {?}
     */
    ImageDirective.prototype.update = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ newSrc = this.src;
        // region: fix weixin & qq avatar size
        if (newSrc.includes('qlogo.cn')) {
            var /** @type {?} */ arr = newSrc.split('/'), /** @type {?} */
            size = arr[arr.length - 1];
            arr[arr.length - 1] =
                size === '0' || +size !== this.size ? this.size.toString() : size;
            newSrc = arr.join('/');
        }
        // endregion
        // region: remove https & http
        var /** @type {?} */ isHttp = newSrc.startsWith('http:'), /** @type {?} */
        isHttps = newSrc.startsWith('https:');
        if (isHttp || isHttps)
            newSrc = newSrc.substr(isHttp ? 5 : 6);
        // endregion
        this.render.setAttribute(this.el.nativeElement, 'src', newSrc);
    };
    /**
     * @return {?}
     */
    ImageDirective.prototype.updateError = /**
     * @return {?}
     */
    function () {
        this.render.setAttribute(this.el.nativeElement, 'onerror', "this.src='" + this.error + "';");
    };
    ImageDirective.decorators = [
        { type: Directive, args: [{ selector: '[_src]' },] },
    ];
    /** @nocollapse */
    ImageDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: AdImageConfig, },
    ]; };
    ImageDirective.propDecorators = {
        "src": [{ type: Input, args: ['_src',] },],
        "size": [{ type: Input },],
        "error": [{ type: Input },],
    };
    return ImageDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DIRECTIVES$1 = [ImageDirective];
var AdImageModule = /** @class */ (function () {
    function AdImageModule() {
    }
    /**
     * @return {?}
     */
    AdImageModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdImageModule, providers: [AdImageConfig] };
    };
    AdImageModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, DelonUtilModule],
                    declarations: DIRECTIVES$1.slice(),
                    exports: DIRECTIVES$1.slice(),
                },] },
    ];
    return AdImageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AvatarListItemComponent = /** @class */ (function () {
    function AvatarListItemComponent() {
    }
    AvatarListItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'avatar-list-item, [avatar-list-item]',
                    template: "",
                },] },
    ];
    /** @nocollapse */
    AvatarListItemComponent.propDecorators = {
        "src": [{ type: Input },],
        "text": [{ type: Input },],
        "icon": [{ type: Input },],
        "tips": [{ type: Input },],
    };
    return AvatarListItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AvatarListComponent = /** @class */ (function () {
    function AvatarListComponent() {
        this._size = '';
        this._avatarSize = '';
    }
    Object.defineProperty(AvatarListComponent.prototype, "size", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value === 'default' ? '' : value;
            switch (value) {
                case 'large':
                case 'small':
                case 'default':
                    this._avatarSize = value;
                    break;
                default:
                    this._avatarSize = 'small';
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    AvatarListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'avatar-list',
                    template: "\n  <ul>\n    <li *ngFor=\"let i of _items\" class=\"item\" [ngClass]=\"_size\">\n      <nz-tooltip *ngIf=\"i.tips\" [nzTitle]=\"i.tips\">\n        <nz-avatar nz-tooltip [nzSrc]=\"i.src\" [nzText]=\"i.text\" [nzIcon]=\"i.icon\" [nzSize]=\"_avatarSize\"></nz-avatar>\n      </nz-tooltip>\n      <nz-avatar *ngIf=\"!i.tips\" [nzSrc]=\"i.src\" [nzText]=\"i.text\" [nzIcon]=\"i.icon\" [nzSize]=\"_avatarSize\"></nz-avatar>\n    </li>\n  </ul>\n  ",
                    host: { '[class.ad-avatar-list]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    AvatarListComponent.propDecorators = {
        "size": [{ type: Input },],
        "_items": [{ type: ContentChildren, args: [AvatarListItemComponent,] },],
    };
    return AvatarListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$2 = [AvatarListComponent, AvatarListItemComponent];
var ZORROMODULES = [NgZorroAntdModule];
var AdAvatarListModule = /** @class */ (function () {
    function AdAvatarListModule() {
    }
    /**
     * @return {?}
     */
    AdAvatarListModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdAvatarListModule, providers: [] };
    };
    AdAvatarListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule].concat(ZORROMODULES),
                    declarations: COMPONENTS$2.slice(),
                    exports: COMPONENTS$2.slice(),
                },] },
    ];
    return AdAvatarListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DescListItemComponent = /** @class */ (function () {
    function DescListItemComponent() {
        // region fields
        this._term = '';
    }
    Object.defineProperty(DescListItemComponent.prototype, "term", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._term = null;
                this._termTpl = value;
            }
            else
                this._term = value;
        },
        enumerable: true,
        configurable: true
    });
    DescListItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'desc-list-item',
                    template: "\n  <ng-template #tpl>\n    <div class=\"ad-desc-list__term\" *ngIf=\"_term || _termTpl\">\n      <ng-container *ngIf=\"_term; else _termTpl\">{{_term}}</ng-container>\n    </div>\n    <div class=\"ad-desc-list__detail\"><ng-content></ng-content></div>\n  </ng-template>\n  ",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    DescListItemComponent.propDecorators = {
        "term": [{ type: Input },],
        "tpl": [{ type: ViewChild, args: ['tpl',] },],
    };
    return DescListItemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdDescListConfig = /** @class */ (function () {
    function AdDescListConfig() {
        /**
         * 布局方式
         */
        this.layout = 'horizontal';
        /**
         * 列表项间距，单位为 `px`
         */
        this.gutter = 32;
    }
    AdDescListConfig.decorators = [
        { type: Injectable },
    ];
    return AdDescListConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DescListComponent = /** @class */ (function () {
    // endregion
    function DescListComponent(cog, el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // region fields
        this._title = '';
        this._gutter = 32;
        this.layout = 'horizontal';
        this._xs = 24;
        this._sm = 12;
        this._md = 8;
        this._col = 3;
        this._classMap = [];
        Object.assign(this, cog);
    }
    Object.defineProperty(DescListComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescListComponent.prototype, "gutter", {
        get: /**
         * 列表项间距，单位为 `px`
         * @return {?}
         */
        function () {
            return this._gutter;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._gutter = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DescListComponent.prototype, "col", {
        get: /**
         * 指定信息最多分几列展示，最终一行几列由 col 配置结合响应式规则决定
         * @return {?}
         */
        function () {
            return this._col;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._col = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DescListComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._classMap.forEach(function (cls) {
            return _this.renderer.removeClass(_this.el.nativeElement, cls);
        });
        this._classMap = ['desc-list', this.layout];
        if (this.size)
            this._classMap.push(this.size);
        this._classMap.forEach(function (cls) {
            return _this.renderer.addClass(_this.el.nativeElement, cls);
        });
    };
    /**
     * @return {?}
     */
    DescListComponent.prototype.setResponsive = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ responsive = {
            1: { xs: 24 },
            2: { xs: 24, sm: 12 },
            3: { xs: 24, sm: 12, md: 8 },
            4: { xs: 24, sm: 12, md: 6 },
        }[this.col > 4 ? 4 : this.col];
        this._xs = responsive.xs;
        this._sm = responsive.sm;
        this._md = responsive.md;
    };
    /**
     * @return {?}
     */
    DescListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClass();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DescListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setClass();
        if (changes.col)
            this.setResponsive();
    };
    DescListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'desc-list',
                    template: "\n  <div *ngIf=\"_title || _titleTpl\" class=\"ad-desc-list__title\">\n    <ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container>\n  </div>\n  <div nz-row [nzGutter]=\"gutter\">\n    <div nz-col [nzXs]=\"_xs\" [nzSm]=\"_sm\" [nzMd]=\"_md\" *ngFor=\"let i of _items\">\n      <ng-template [ngTemplateOutlet]=\"i.tpl\"></ng-template>\n    </div>\n  </div>\n  ",
                    host: { '[class.ad-desc-list]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    DescListComponent.ctorParameters = function () { return [
        { type: AdDescListConfig, },
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    DescListComponent.propDecorators = {
        "title": [{ type: Input },],
        "size": [{ type: Input },],
        "gutter": [{ type: Input },],
        "layout": [{ type: Input },],
        "col": [{ type: Input },],
        "_items": [{ type: ContentChildren, args: [DescListItemComponent,] },],
    };
    return DescListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$3 = [DescListComponent, DescListItemComponent];
var ZORROMODULES$1 = [NgZorroAntdModule];
var AdDescListModule = /** @class */ (function () {
    function AdDescListModule() {
    }
    /**
     * @return {?}
     */
    AdDescListModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdDescListModule, providers: [AdDescListConfig] };
    };
    AdDescListModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule].concat(ZORROMODULES$1),
                    declarations: COMPONENTS$3.slice(),
                    exports: COMPONENTS$3.slice(),
                },] },
    ];
    return AdDescListModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var EllipsisComponent = /** @class */ (function () {
    function EllipsisComponent() {
        this._lines = 3;
    }
    Object.defineProperty(EllipsisComponent.prototype, "lines", {
        get: /**
         * 在按照行数截取下最大的行数，超过则截取省略
         * @return {?}
         */
        function () {
            return this._lines;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._lines = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    EllipsisComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ellipsis',
                    template: "<ng-content></ng-content>",
                    host: { '[class.ad-ellipsis]': 'true' },
                },] },
    ];
    /** @nocollapse */
    EllipsisComponent.propDecorators = {
        "lines": [{ type: Input }, { type: HostBinding, args: ['style.-webkit-line-clamp',] },],
    };
    return EllipsisComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$4 = [EllipsisComponent];
var AdEllipsisModule = /** @class */ (function () {
    function AdEllipsisModule() {
    }
    /**
     * @return {?}
     */
    AdEllipsisModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdEllipsisModule, providers: [] };
    };
    AdEllipsisModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$4.slice(),
                    exports: COMPONENTS$4.slice(),
                },] },
    ];
    return AdEllipsisModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GlobalFooterComponent = /** @class */ (function () {
    function GlobalFooterComponent() {
    }
    GlobalFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'global-footer',
                    template: "\n  <div *ngIf=\"links && links.length > 0\" class=\"links\">\n    <a *ngFor=\"let i of links\" routerLink=\"{{i.href}}\" [attr.target]=\"i.blankTarget\">{{i.title}}</a>\n  </div>\n  <div class=\"copyright\"><ng-content></ng-content></div>\n  ",
                    host: { '[class.ad-global-footer]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    GlobalFooterComponent.propDecorators = {
        "links": [{ type: Input },],
    };
    return GlobalFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$5 = [GlobalFooterComponent];
var AdGlobalFooterModule = /** @class */ (function () {
    function AdGlobalFooterModule() {
    }
    /**
     * @return {?}
     */
    AdGlobalFooterModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdGlobalFooterModule, providers: [] };
    };
    AdGlobalFooterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule],
                    declarations: COMPONENTS$5.slice(),
                    exports: COMPONENTS$5.slice(),
                },] },
    ];
    return AdGlobalFooterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ExceptionComponent = /** @class */ (function () {
    function ExceptionComponent() {
        this._img = '';
        this._title = '';
        this._desc = '';
    }
    Object.defineProperty(ExceptionComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ item = {
                403: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/wZcnGqRDyhPOEYFcZDnb.svg',
                    title: '403',
                    desc: '抱歉，你无权访问该页面',
                },
                404: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/KpnpchXsobRgLElEozzI.svg',
                    title: '404',
                    desc: '抱歉，你访问的页面不存在',
                },
                500: {
                    img: 'https://gw.alipayobjects.com/zos/rmsportal/RVRUAYdCGeYNBWoKiIwB.svg',
                    title: '500',
                    desc: '抱歉，服务器出错了',
                },
            }[value];
            if (!item)
                return;
            this._img = item.img;
            this._title = item.title;
            this._desc = item.desc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "img", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._img = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExceptionComponent.prototype, "desc", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._desc = value;
        },
        enumerable: true,
        configurable: true
    });
    ExceptionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'exception',
                    template: "\n  <div class=\"img-block\">\n    <div class=\"img\" [ngStyle]=\"{'background-image': 'url(' + _img + ')'}\"></div>\n  </div>\n  <div class=\"cont\">\n    <h1 [innerHTML]=\"_title\"></h1>\n    <div class=\"desc\" [innerHTML]=\"_desc\"></div>\n    <ng-template #defaultActions>\n      <button nz-button [routerLink]=\"['/']\" [nzType]=\"'primary'\">\u8FD4\u56DE\u9996\u9875</button>\n      <ng-content></ng-content>\n    </ng-template>\n    <div class=\"actions\" *ngIf=\"actions; else defaultActions\">\n      <ng-template [ngTemplateOutlet]=\"actions\"></ng-template>\n      <ng-content></ng-content>\n    </div>\n  </div>\n  ",
                    host: { '[class.ad-exception]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    ExceptionComponent.propDecorators = {
        "type": [{ type: Input },],
        "img": [{ type: Input },],
        "title": [{ type: Input },],
        "desc": [{ type: Input },],
        "actions": [{ type: ContentChild, args: ['actions',] },],
    };
    return ExceptionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$6 = [ExceptionComponent];
var ZORROMODULES$2 = [NgZorroAntdModule];
var AdExceptionModule = /** @class */ (function () {
    function AdExceptionModule() {
    }
    /**
     * @return {?}
     */
    AdExceptionModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdExceptionModule, providers: [] };
    };
    AdExceptionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule].concat(ZORROMODULES$2),
                    declarations: COMPONENTS$6.slice(),
                    exports: COMPONENTS$6.slice(),
                },] },
    ];
    return AdExceptionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NoticeIconComponent = /** @class */ (function () {
    function NoticeIconComponent() {
        this.data = [];
        this._loading = false;
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
        this._popoverVisible = false;
        this.popoverVisibleChange = new EventEmitter();
    }
    Object.defineProperty(NoticeIconComponent.prototype, "count", {
        get: /**
         * 图标上的消息总数
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._count = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "loading", {
        get: /**
         * 弹出卡片加载状态
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "popoverVisible", {
        get: /**
         * 手动控制Popover显示
         * @return {?}
         */
        function () {
            return this._popoverVisible;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._popoverVisible = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} result
     * @return {?}
     */
    NoticeIconComponent.prototype.onVisibleChange = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.popoverVisibleChange.emit(result);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NoticeIconComponent.prototype.onSelect = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.select.emit(i);
    };
    /**
     * @param {?} title
     * @return {?}
     */
    NoticeIconComponent.prototype.onClear = /**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        this.clear.emit(title);
    };
    NoticeIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notice-icon',
                    template: "\n  <nz-badge *ngIf=\"data?.length === 0\" [nzCount]=\"count\">\n    <i class=\"anticon anticon-bell\"></i>\n  </nz-badge>\n  <nz-popover *ngIf=\"data?.length > 0\"\n    [nzVisible]=\"popoverVisible\" (nzVisibleChange)=\"onVisibleChange($event)\" nzTrigger=\"click\"\n    nzPlacement=\"bottomRight\"\n    nzOverlayClassName=\"ad-notice-icon-con\">\n    <div nz-popover class=\"item\">\n      <nz-badge [nzCount]=\"count\">\n        <i class=\"anticon anticon-bell\"></i>\n      </nz-badge>\n    </div>\n    <ng-template #nzTemplate>\n      <nz-spin [nzSpinning]=\"loading\" [nzDelay]=\"0\">\n        <nz-tabset>\n          <nz-tab *ngFor=\"let i of data\" [nzTitle]=\"i.title\">\n            <notice-icon-tab\n              [data]=\"i\"\n              (select)=\"onSelect($event)\"\n              (clear)=\"onClear($event)\"></notice-icon-tab>\n          </nz-tab>\n        </nz-tabset>\n      </nz-spin>\n    </ng-template>\n  </nz-popover>\n  ",
                    host: { '[class.ad-notice-icon]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    NoticeIconComponent.propDecorators = {
        "data": [{ type: Input },],
        "count": [{ type: Input },],
        "loading": [{ type: Input },],
        "select": [{ type: Output },],
        "clear": [{ type: Output },],
        "popoverVisible": [{ type: Input },],
        "popoverVisibleChange": [{ type: Output },],
    };
    return NoticeIconComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NoticeIconTabComponent = /** @class */ (function () {
    function NoticeIconTabComponent() {
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    NoticeIconTabComponent.prototype.onClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.select.emit({
            title: this.data.title,
            item: item,
        });
    };
    /**
     * @return {?}
     */
    NoticeIconTabComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.clear.emit(this.data.title);
    };
    NoticeIconTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notice-icon-tab',
                    template: "\n  <div *ngIf=\"data.list?.length === 0; else listTpl\" class=\"not-found\">\n    <img *ngIf=\"data.emptyImage\" src=\"{{data.emptyImage}}\" alt=\"not found\" />\n    <p>{{data.emptyText || '\u65E0\u901A\u77E5'}}</p>\n  </div>\n  <ng-template #listTpl>\n    <nz-list [nzDataSource]=\"data.list\" [nzRenderItem]=\"item\">\n      <ng-template #item let-item>\n        <nz-list-item (click)=\"onClick(item)\" [ngClass]=\"{'read': item.read}\">\n          <nz-list-item-meta\n            [nzTitle]=\"nzTitle\"\n            [nzDescription]=\"nzDescription\"\n            [nzAvatar]=\"item.avatar\">\n            <ng-template #nzTitle>\n              {{item.title}}\n              <div class=\"extra\" *ngIf=\"item.extra\"><nz-tag [nzColor]=\"item.color\">{{item.extra}}</nz-tag></div>\n            </ng-template>\n            <ng-template #nzDescription>\n              <div *ngIf=\"item.description\" class=\"description\">{{item.description}}</div>\n              <div *ngIf=\"item.datetime\" class=\"datetime\">{{item.datetime}}</div>\n            </ng-template>\n          </nz-list-item-meta>\n        </nz-list-item>\n      </ng-template>\n    </nz-list>\n    <div class=\"clear\" (click)=\"onClear()\">{{ data.clearText || '\u6E05\u7A7A' }}</div>\n  </ng-template>\n  ",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    NoticeIconTabComponent.propDecorators = {
        "data": [{ type: Input },],
        "select": [{ type: Output },],
        "clear": [{ type: Output },],
    };
    return NoticeIconTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$7 = [NoticeIconComponent];
var ZORROMODULES$3 = [NgZorroAntdModule];
var AdNoticeIconModule = /** @class */ (function () {
    function AdNoticeIconModule() {
    }
    /**
     * @return {?}
     */
    AdNoticeIconModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdNoticeIconModule, providers: [] };
    };
    AdNoticeIconModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule].concat(ZORROMODULES$3),
                    declarations: COMPONENTS$7.concat([NoticeIconTabComponent]),
                    exports: COMPONENTS$7.slice(),
                },] },
    ];
    return AdNoticeIconModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NumberInfoComponent = /** @class */ (function () {
    function NumberInfoComponent(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this._title = '';
        this._subTitle = '';
        this._total = '';
        this._isSubTotal = false;
        this._subTotal = '';
        /**
         * 状态样式
         */
        this.theme = 'light';
        this._gap = 8;
        this._classMap = [];
    }
    Object.defineProperty(NumberInfoComponent.prototype, "title", {
        set: /**
         * 标题
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "subTitle", {
        set: /**
         * 子标题
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._subTitle = null;
                this._subTitleTpl = value;
            }
            else
                this._subTitle = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "total", {
        set: /**
         * 总量
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._total = null;
                this._totalTpl = value;
            }
            else
                this._total = '' + value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "subTotal", {
        set: /**
         * 总量后缀
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._subTotal = null;
                this._subTotalTpl = value;
            }
            else
                this._subTotal = value;
            this._isSubTotal = !!value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInfoComponent.prototype, "gap", {
        get: /**
         * 设置数字和描述直接的间距（像素）
         * @return {?}
         */
        function () {
            return this._gap;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._gap = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NumberInfoComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._classMap.forEach(function (cls) {
            return _this.renderer.removeClass(_this.el.nativeElement, cls);
        });
        this._classMap = ["number-info"];
        if (this.theme)
            this._classMap.push(this.theme);
        this._classMap.forEach(function (v) {
            return _this.renderer.addClass(_this.el.nativeElement, v);
        });
        this.cd.detectChanges();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NumberInfoComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setClass();
    };
    NumberInfoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'number-info',
                    template: "\n  <div *ngIf=\"_title || _titleTpl\" class=\"title\"><ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container></div>\n  <div *ngIf=\"_subTitle || _subTitleTpl\" class=\"sub-title\"><ng-container *ngIf=\"_subTitle; else _subTitleTpl\">{{_subTitle}}</ng-container></div>\n  <div class=\"value\" [ngStyle]=\"{'margin-top.px': gap}\">\n    <span><ng-container *ngIf=\"_total; else _totalTpl\">{{_total}}</ng-container><em class=\"suffix\" *ngIf=\"suffix\">{{suffix}}</em></span>\n    <span *ngIf=\"status || _isSubTotal\" class=\"sub-total\">\n      <ng-container *ngIf=\"_subTotal; else _subTotalTpl\">{{_subTotal}}</ng-container>\n      <i *ngIf=\"status\" class=\"anticon anticon-caret-{{status}}\"></i>\n    </span>\n  </div>\n  ",
                    host: { '[class.ad-number-info]': 'true' },
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    NumberInfoComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    NumberInfoComponent.propDecorators = {
        "title": [{ type: Input },],
        "subTitle": [{ type: Input },],
        "total": [{ type: Input },],
        "subTotal": [{ type: Input },],
        "suffix": [{ type: Input },],
        "status": [{ type: Input },],
        "theme": [{ type: Input },],
        "gap": [{ type: Input },],
    };
    return NumberInfoComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$8 = [NumberInfoComponent];
var AdNumberInfoModule = /** @class */ (function () {
    function AdNumberInfoModule() {
    }
    /**
     * @return {?}
     */
    AdNumberInfoModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdNumberInfoModule, providers: [] };
    };
    AdNumberInfoModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$8.slice(),
                    exports: COMPONENTS$8.slice(),
                },] },
    ];
    return AdNumberInfoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdPageHeaderConfig = /** @class */ (function () {
    function AdPageHeaderConfig() {
        /**
         * 首页文本，若指定空表示不显示
         */
        this.home = '首页';
        /**
         * 首页链接
         */
        this.home_link = '/';
        /**
         * 自动生成导航，以当前路由从主菜单中定位
         */
        this.autoBreadcrumb = true;
    }
    AdPageHeaderConfig.decorators = [
        { type: Injectable },
    ];
    return AdPageHeaderConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PageHeaderComponent = /** @class */ (function () {
    // endregion
    function PageHeaderComponent(cog, renderer, route, menuSrv, i18nSrv) {
        this.renderer = renderer;
        this.route = route;
        this.menuSrv = menuSrv;
        this.i18nSrv = i18nSrv;
        this._autoBreadcrumb = true;
        this.paths = [];
        Object.assign(this, cog);
    }
    Object.defineProperty(PageHeaderComponent.prototype, "autoBreadcrumb", {
        get: /**
         * 自动生成导航，以当前路由从主菜单中定位
         * @return {?}
         */
        function () {
            return this._autoBreadcrumb;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoBreadcrumb = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.genBreadcrumb = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.breadcrumb || !this.autoBreadcrumb || !this.menuSrv)
            return;
        var /** @type {?} */ menus = this.menuSrv.getPathByUrl(this.route.url);
        if (menus.length <= 0)
            return;
        var /** @type {?} */ paths = [];
        menus.forEach(function (item) {
            if (typeof item.hideInBreadcrumb !== 'undefined' && item.hideInBreadcrumb)
                return;
            var /** @type {?} */ title = item.text;
            if (item.i18n && _this.i18nSrv)
                title = _this.i18nSrv.fanyi(item.i18n);
            paths.push({ title: title, link: item.link && [item.link] });
        });
        // add home
        if (this.home) {
            paths.splice(0, 0, {
                title: (this.home_i18n &&
                    this.i18nSrv &&
                    this.i18nSrv.fanyi(this.home_i18n)) ||
                    this.home,
                link: [this.home_link],
            });
        }
        this.paths = paths;
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.checkContent = /**
     * @return {?}
     */
    function () {
        if (isEmpty(this.conTpl.nativeElement)) {
            this.renderer.setAttribute(this.conTpl.nativeElement, 'hidden', '');
        }
        else {
            this.renderer.removeAttribute(this.conTpl.nativeElement, 'hidden');
        }
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.genBreadcrumb();
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.checkContent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PageHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.autoBreadcrumb && !changes.autoBreadcrumb.firstChange)
            this.genBreadcrumb();
    };
    PageHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'page-header',
                    template: "\n  <ng-container *ngIf=\"!breadcrumb; else breadcrumb\">\n    <nz-breadcrumb *ngIf=\"paths && paths.length > 0\">\n      <nz-breadcrumb-item *ngFor=\"let i of paths\">\n        <ng-container *ngIf=\"i.link\"><a [routerLink]=\"i.link\">{{i.title}}</a></ng-container>\n        <ng-container *ngIf=\"!i.link\">{{i.title}}</ng-container>\n      </nz-breadcrumb-item>\n    </nz-breadcrumb>\n  </ng-container>\n  <div class=\"detail\">\n    <div *ngIf=\"logo\" class=\"logo\"><ng-template [ngTemplateOutlet]=\"logo\"></ng-template></div>\n    <div class=\"main\">\n      <div class=\"row\">\n        <h1 *ngIf=\"title\" class=\"title\">{{title}}</h1>\n        <div *ngIf=\"action\" class=\"action\"><ng-template [ngTemplateOutlet]=\"action\"></ng-template></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"desc\" (cdkObserveContent)=\"checkContent()\" #conTpl><ng-content></ng-content><ng-template [ngTemplateOutlet]=\"content\"></ng-template></div>\n        <div *ngIf=\"extra\" class=\"extra\"><ng-template [ngTemplateOutlet]=\"extra\"></ng-template></div>\n      </div>\n    </div>\n  </div>\n  <ng-template [ngTemplateOutlet]=\"tab\"></ng-template>\n  ",
                    host: {
                        '[class.content__title]': 'true',
                        '[class.ad-page-header]': 'true',
                    },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    PageHeaderComponent.ctorParameters = function () { return [
        { type: AdPageHeaderConfig, },
        { type: Renderer2, },
        { type: Router, },
        { type: MenuService, decorators: [{ type: Optional },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
    ]; };
    PageHeaderComponent.propDecorators = {
        "conTpl": [{ type: ViewChild, args: ['conTpl',] },],
        "title": [{ type: Input },],
        "home": [{ type: Input },],
        "home_link": [{ type: Input },],
        "home_i18n": [{ type: Input },],
        "autoBreadcrumb": [{ type: Input },],
        "breadcrumb": [{ type: ContentChild, args: ['breadcrumb',] },],
        "logo": [{ type: ContentChild, args: ['logo',] },],
        "action": [{ type: ContentChild, args: ['action',] },],
        "content": [{ type: ContentChild, args: ['content',] },],
        "extra": [{ type: ContentChild, args: ['extra',] },],
        "tab": [{ type: ContentChild, args: ['tab',] },],
    };
    return PageHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$9 = [PageHeaderComponent];
var ZORROMODULES$4 = [NgZorroAntdModule];
var AdPageHeaderModule = /** @class */ (function () {
    function AdPageHeaderModule() {
    }
    /**
     * @return {?}
     */
    AdPageHeaderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdPageHeaderModule, providers: [AdPageHeaderConfig] };
    };
    AdPageHeaderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule, DelonUtilModule].concat(ZORROMODULES$4),
                    declarations: COMPONENTS$9.slice(),
                    exports: COMPONENTS$9.slice(),
                },] },
    ];
    return AdPageHeaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ResultComponent = /** @class */ (function () {
    function ResultComponent() {
        // region: fields
        this._type = '';
        this._icon = '';
        this._title = '';
        this._description = '';
        this._extra = '';
    }
    Object.defineProperty(ResultComponent.prototype, "type", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = value;
            switch (value) {
                case 'success':
                    this._icon = 'check-circle';
                    break;
                case 'error':
                    this._icon = 'close-circle';
                    break;
                default:
                    this._icon = value;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "description", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._description = null;
                this._descriptionTpl = value;
            }
            else
                this._description = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResultComponent.prototype, "extra", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._extra = null;
                this._extraTpl = value;
            }
            else
                this._extra = value;
        },
        enumerable: true,
        configurable: true
    });
    ResultComponent.decorators = [
        { type: Component, args: [{
                    selector: 'result',
                    template: "\n  <div class=\"icon\"><i class=\"anticon anticon-{{_icon}} {{_type}}\"></i></div>\n  <div class=\"title\"><ng-container *ngIf=\"_title; else _titleTpl\">{{_title}}</ng-container></div>\n  <div *ngIf=\"_description || _descriptionTpl\" class=\"description\"><ng-container *ngIf=\"_description; else _descriptionTpl\">{{_description}}</ng-container></div>\n  <div *ngIf=\"_extra || _extraTpl\" class=\"extra\">\n    <ng-container *ngIf=\"_extra; else _extraTpl\">{{_extra}}</ng-container>\n  </div>\n  <div class=\"actions\"><ng-content></ng-content></div>\n  ",
                    host: { '[class.ad-result]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    ResultComponent.propDecorators = {
        "type": [{ type: Input },],
        "title": [{ type: Input },],
        "description": [{ type: Input },],
        "extra": [{ type: Input },],
    };
    return ResultComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$10 = [ResultComponent];
var AdResultModule = /** @class */ (function () {
    function AdResultModule() {
    }
    /**
     * @return {?}
     */
    AdResultModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdResultModule, providers: [] };
    };
    AdResultModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$10.slice(),
                    exports: COMPONENTS$10.slice(),
                },] },
    ];
    return AdResultModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var StandardFormRowComponent = /** @class */ (function () {
    function StandardFormRowComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._classMap = [];
    }
    Object.defineProperty(StandardFormRowComponent.prototype, "block", {
        get: /**
         * 是否整行
         * @return {?}
         */
        function () {
            return this._block;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._block = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardFormRowComponent.prototype, "last", {
        get: /**
         * 是否最后一行
         * @return {?}
         */
        function () {
            return this._last;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._last = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StandardFormRowComponent.prototype, "grid", {
        get: /**
         * 是否网格布局
         * @return {?}
         */
        function () {
            return this._grid;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._grid = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StandardFormRowComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._classMap.forEach(function (cls) {
            return _this.renderer.removeClass(_this.el.nativeElement, cls);
        });
        this._classMap = ["standard-form-row"];
        if (this.block)
            this._classMap.push('block');
        if (this.grid)
            this._classMap.push('grid');
        if (this.last)
            this._classMap.push('last');
        this._classMap.forEach(function (v) {
            return _this.renderer.addClass(_this.el.nativeElement, v);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    StandardFormRowComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setClass();
    };
    StandardFormRowComponent.decorators = [
        { type: Component, args: [{
                    selector: 'standard-form-row',
                    template: "\n  <div *ngIf=\"title\" class=\"label\"><span>{{title}}</span></div>\n  <div class=\"control\"><ng-content></ng-content></div>\n  ",
                    host: { '[class.ad-standard-form-row]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    StandardFormRowComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    StandardFormRowComponent.propDecorators = {
        "title": [{ type: Input },],
        "block": [{ type: Input },],
        "last": [{ type: Input },],
        "grid": [{ type: Input },],
    };
    return StandardFormRowComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$11 = [StandardFormRowComponent];
var AdStandardFormRowModule = /** @class */ (function () {
    function AdStandardFormRowModule() {
    }
    /**
     * @return {?}
     */
    AdStandardFormRowModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdStandardFormRowModule, providers: [] };
    };
    AdStandardFormRowModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$11.slice(),
                    exports: COMPONENTS$11.slice(),
                },] },
    ];
    return AdStandardFormRowModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TagSelectComponent = /** @class */ (function () {
    function TagSelectComponent() {
        this._expandable = true;
        this.expand = false;
        this.change = new EventEmitter();
    }
    Object.defineProperty(TagSelectComponent.prototype, "expandable", {
        get: /**
         * 是否启用 `展开与收进`
         * @return {?}
         */
        function () {
            return this._expandable;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._expandable = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TagSelectComponent.prototype.trigger = /**
     * @return {?}
     */
    function () {
        this.expand = !this.expand;
        this.change.emit(this.expand);
    };
    TagSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tag-select',
                    template: "\n    <ng-content></ng-content>\n    <a *ngIf=\"expandable\" class=\"trigger\" (click)=\"trigger()\">{{expand ? '\u6536\u8D77' : '\u5C55\u5F00'}}<i class=\"anticon anticon-{{expand ? 'up' : 'down'}} ml-sm\"></i></a>",
                    host: { '[class.ad-tag-select]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    TagSelectComponent.propDecorators = {
        "expandable": [{ type: HostBinding, args: ['class.has-expand',] }, { type: Input },],
        "expand": [{ type: HostBinding, args: ['class.expanded',] },],
        "change": [{ type: Output },],
    };
    return TagSelectComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$12 = [TagSelectComponent];
var AdTagSelectModule = /** @class */ (function () {
    function AdTagSelectModule() {
    }
    /**
     * @return {?}
     */
    AdTagSelectModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdTagSelectModule, providers: [] };
    };
    AdTagSelectModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$12.slice(),
                    exports: COMPONENTS$12.slice(),
                },] },
    ];
    return AdTagSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TrendComponent = /** @class */ (function () {
    function TrendComponent() {
        this._colorful = true;
    }
    Object.defineProperty(TrendComponent.prototype, "colorful", {
        get: /**
         * 是否彩色标记
         * @return {?}
         */
        function () {
            return this._colorful;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._colorful = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    TrendComponent.decorators = [
        { type: Component, args: [{
                    selector: 'trend',
                    template: "\n  <ng-content></ng-content>\n  <span *ngIf=\"flag\" class=\"{{flag}}\"><i class=\"anticon anticon-caret-{{flag}}\"></i></span>\n  ",
                    host: {
                        '[class.ad-trend]': 'true',
                        '[class.grey]': '!colorful',
                    },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    TrendComponent.propDecorators = {
        "flag": [{ type: Input },],
        "colorful": [{ type: Input },],
    };
    return TrendComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$13 = [TrendComponent];
var AdTrendModule = /** @class */ (function () {
    function AdTrendModule() {
    }
    /**
     * @return {?}
     */
    AdTrendModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdTrendModule, providers: [] };
    };
    AdTrendModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$13.slice(),
                    exports: COMPONENTS$13.slice(),
                },] },
    ];
    return AdTrendModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CountDownComponent = /** @class */ (function () {
    function CountDownComponent() {
        this.begin = new EventEmitter();
        this.notify = new EventEmitter();
        this.end = new EventEmitter();
    }
    Object.defineProperty(CountDownComponent.prototype, "target", {
        set: /**
         * 目标时间
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.config = {
                template: "$!h!:$!m!:$!s!",
                stopTime: typeof value === 'number'
                    ? addSeconds(new Date(), value).valueOf()
                    : format(value, 'x'),
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CountDownComponent.prototype._start = /**
     * @return {?}
     */
    function () {
        this.begin.emit();
    };
    /**
     * @param {?} time
     * @return {?}
     */
    CountDownComponent.prototype._notify = /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        this.notify.emit(time);
    };
    /**
     * @return {?}
     */
    CountDownComponent.prototype._finished = /**
     * @return {?}
     */
    function () {
        this.end.emit();
    };
    CountDownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'count-down',
                    template: "\n    <countdown *ngIf=\"config\" [config]=\"config\"\n      (start)=\"_start()\"\n      (finished)=\"_finished()\"\n      (notify)=\"_notify($event)\"></countdown>\n  ",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    CountDownComponent.propDecorators = {
        "config": [{ type: Input },],
        "target": [{ type: Input },],
        "begin": [{ type: Output },],
        "notify": [{ type: Output },],
        "end": [{ type: Output },],
    };
    return CountDownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$14 = [CountDownComponent];
var AdCountDownModule = /** @class */ (function () {
    function AdCountDownModule() {
    }
    /**
     * @return {?}
     */
    AdCountDownModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdCountDownModule, providers: [] };
    };
    AdCountDownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, CountdownModule],
                    declarations: COMPONENTS$14.slice(),
                    exports: COMPONENTS$14.slice(),
                },] },
    ];
    return AdCountDownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdSimpleTableConfig = /** @class */ (function () {
    function AdSimpleTableConfig() {
        /**
         * pagination中每页显示条目数下拉框值
         */
        this.pageSizeOptions = [10, 20, 30, 40, 50];
        /**
         * 是否显示总数据量，默认：`共 {{total}} 条`
         */
        this.showTotal = "\u5171 {{total}} \u6761";
    }
    AdSimpleTableConfig.decorators = [
        { type: Injectable },
    ];
    return AdSimpleTableConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DA_XLSX_CONFIG = new InjectionToken('DA_XLSX_CONFIG');
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var XlsxService = /** @class */ (function () {
    function XlsxService(config, http$$1, lazy) {
        this.config = config;
        this.http = http$$1;
        this.lazy = lazy;
    }
    /**
     * @return {?}
     */
    XlsxService.prototype.init = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ config = Object.assign({
            url: "//cdn.bootcss.com/xlsx/0.11.17/xlsx.full.min.js",
            modules: [],
        }, this.config);
        return this.lazy.load([config.url].concat(config.modules));
    };
    /**
     * @param {?} wb
     * @return {?}
     */
    XlsxService.prototype.read = /**
     * @param {?} wb
     * @return {?}
     */
    function (wb) {
        var /** @type {?} */ ret = {};
        wb.SheetNames.forEach(function (name) {
            var /** @type {?} */ sheet = wb.Sheets[name];
            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        });
        return ret;
    };
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    /**
     * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
     * @param {?} fileOrUrl
     * @return {?}
     */
    XlsxService.prototype.import = /**
     * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
     * @param {?} fileOrUrl
     * @return {?}
     */
    function (fileOrUrl) {
        var _this = this;
        return new Promise(function (resolver, reject) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this.http
                        .request('GET', fileOrUrl, { responseType: 'arraybuffer' })
                        .subscribe(function (res) {
                        var /** @type {?} */ wb = XLSX.read(new Uint8Array(res), { type: 'array' });
                        resolver(_this.read(wb));
                    }, function (err) {
                        reject(err);
                    });
                    return;
                }
                // from file
                var /** @type {?} */ reader = new FileReader();
                reader.onload = function (e) {
                    var /** @type {?} */ wb = XLSX.read(e.target.result, { type: 'binary' });
                    resolver(_this.read(wb));
                };
                reader.readAsArrayBuffer(fileOrUrl);
            });
        });
    };
    /** 导出 */
    /**
     * 导出
     * @param {?} options
     * @return {?}
     */
    XlsxService.prototype.export = /**
     * 导出
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.init().then(function () {
            var /** @type {?} */ wb = XLSX.utils.book_new();
            if (Array.isArray(options.sheets)) {
                (/** @type {?} */ (options.sheets)).forEach(function (value, index) {
                    var /** @type {?} */ ws = XLSX.utils.aoa_to_sheet(value.data);
                    XLSX.utils.book_append_sheet(wb, ws, value.name || "Sheet" + (index + 1));
                });
            }
            else {
                wb.SheetNames = Object.keys(options.sheets);
                wb.Sheets = options.sheets;
            }
            if (options.callback)
                options.callback(wb);
            var /** @type {?} */ wbout = XLSX.write(wb, Object.assign({
                bookType: 'xlsx',
                type: 'array',
            }, options.opts));
            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');
        });
    };
    XlsxService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    XlsxService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DA_XLSX_CONFIG,] },] },
        { type: HttpClient, },
        { type: LazyService, },
    ]; };
    return XlsxService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SimpleTableExport = /** @class */ (function () {
    function SimpleTableExport(xlsxSrv) {
        this.xlsxSrv = xlsxSrv;
    }
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableExport.prototype._stGet = /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (item, col) {
        var /** @type {?} */ ret = { t: 's', v: '' };
        if (col.format) {
            ret.v = col.format(item, col);
        }
        else {
            var /** @type {?} */ val = deepGet(item, /** @type {?} */ (col.index), '');
            if (typeof val === 'undefined') {
                ret.v = '';
            }
            else {
                ret.v = val;
                switch (col.type) {
                    case 'currency':
                        ret.t = 'n';
                        break;
                    case 'date':
                        ret.t = 'd';
                        break;
                    case 'yn':
                        ret.v = ret === col.ynTruth ? col.ynYes || '是' : col.ynNo || '否';
                        break;
                }
            }
        }
        return ret;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    SimpleTableExport.prototype.genSheet = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        var /** @type {?} */ sheets = {};
        var /** @type {?} */ sheet = (sheets[opt.sheetname || 'Sheet1'] = {});
        var /** @type {?} */ colData = opt._c.filter(function (w) {
            return w.exported !== false &&
                w.index &&
                (!w.buttons || w.buttons.length === 0);
        });
        var /** @type {?} */ cc = colData.length, /** @type {?} */
        dc = opt._d.length;
        // region: column
        for (var /** @type {?} */ i = 0; i < cc; i++) {
            sheet[String.fromCharCode(65 + i) + "1"] = {
                t: 's',
                v: colData[i].title,
            };
        }
        // endregion
        // region: content
        for (var /** @type {?} */ i = 0; i < dc; i++) {
            for (var /** @type {?} */ j = 0; j < cc; j++) {
                sheet["" + String.fromCharCode(65 + j) + (i + 2)] = this._stGet(opt._d[i], colData[j]);
            }
        }
        // endregion
        sheet['!ref'] = "A1:" + String.fromCharCode(65 + cc - 1) + (dc + 1);
        return sheets;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    SimpleTableExport.prototype.export = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        if (!this.xlsxSrv)
            throw new Error("muse be import 'AdXlsxModule' module, but got null");
        var /** @type {?} */ sheets = this.genSheet(opt);
        return this.xlsxSrv.export({
            sheets: sheets,
            filename: opt.filename,
            callback: opt.callback,
        });
    };
    SimpleTableExport.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimpleTableExport.ctorParameters = function () { return [
        { type: XlsxService, decorators: [{ type: Optional },] },
    ]; };
    return SimpleTableExport;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SimpleTableComponent = /** @class */ (function () {
    // endregion
    function SimpleTableComponent(defConfig, http$$1, el, renderer, exportSrv, acl$$1, i18nSrv, modal, currenty, date, yn, number, doc) {
        this.defConfig = defConfig;
        this.http = http$$1;
        this.el = el;
        this.renderer = renderer;
        this.exportSrv = exportSrv;
        this.acl = acl$$1;
        this.i18nSrv = i18nSrv;
        this.modal = modal;
        this.currenty = currenty;
        this.date = date;
        this.yn = yn;
        this.number = number;
        this.doc = doc;
        this._inited = false;
        this._data = [];
        this._isAjax = false;
        this._isPagination = true;
        this._classMap = [];
        this._allChecked = false;
        this._indeterminate = false;
        this._columns = [];
        /**
         * 请求方法
         */
        this.reqMehtod = 'GET';
        this._reqReName = { pi: 'pi', ps: 'ps' };
        /**
         * 请求异常时回调
         */
        this.reqError = new EventEmitter();
        this._resReName = { total: ['total'], list: ['list'] };
        /**
         * 列描述
         */
        this.columns = [];
        this._ps = 10;
        this._pi = 1;
        this._total = 0;
        this._loading = false;
        this._loadingDelay = 0;
        this._bordered = false;
        /**
         * table大小
         */
        this.size = 'default';
        this._showSizeChanger = false;
        this._showQuickJumper = false;
        /**
         * 是否显示总数据量
         */
        this._totalTpl = "";
        this._isPageIndexReset = true;
        /**
         * 分页方向
         */
        this.pagePlacement = 'right';
        this._toTopInChange = true;
        this._toTopOffset = 100;
        this._multiSort = false;
        /**
         * 页码、每页数量变化时回调
         */
        this.change = new EventEmitter();
        /**
         * checkbox变化时回调，参数为当前所选清单
         */
        this.checkboxChange = new EventEmitter();
        /**
         * radio变化时回调，参数为当前所选
         */
        this.radioChange = new EventEmitter();
        /**
         * 排序回调
         */
        this.sortChange = new EventEmitter();
        /**
         * Filter回调
         */
        this.filterChange = new EventEmitter();
        // endregion
        // region: sort
        this._sortMap = {};
        this._sortColumn = null;
        Object.assign(this, deepCopy(defConfig));
    }
    Object.defineProperty(SimpleTableComponent.prototype, "reqReName", {
        get: /**
         * @return {?}
         */
        function () {
            return this._reqReName;
        },
        set: /**
         * 重命名请求参数 `pi`、`ps`
         * - `{ pi: 'Page' }` => `pi` 会被替换成 Page
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._reqReName = Object.assign(this._reqReName, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "resReName", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resReName;
        },
        set: /**
         * 重命名返回参数 `total`、`list`
         * - `{ total: 'Total' }` => Total 会被当作 `total`
         * @param {?} cur
         * @return {?}
         */
        function (cur) {
            var /** @type {?} */ ret = {};
            if (cur) {
                if (cur.list)
                    ret.list = Array.isArray(cur.list) ? cur.list : cur.list.split('.');
                else
                    ret.list = ['list'];
                if (cur.total)
                    ret.total = Array.isArray(cur.total) ? cur.total : cur.total.split('.');
                else
                    ret.total = ['total'];
            }
            else {
                ret = { total: ['total'], list: ['list'] };
            }
            this._resReName = ret;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "ps", {
        get: /**
         * 每页数量，当设置为 `0` 表示不分页，默认：`10`
         * @return {?}
         */
        function () {
            return this._ps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ps = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "pi", {
        get: /**
         * 当前页码
         * @return {?}
         */
        function () {
            return this._pi;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pi = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "total", {
        get: /**
         * 数据总量
         * @return {?}
         */
        function () {
            return this._total;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._total = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showPagination", {
        get: /**
         * 是否显示分页器
         * @return {?}
         */
        function () {
            return this._showPagination;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showPagination = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loading", {
        get: /**
         * 是否显示Loading
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loadingDelay", {
        get: /**
         * 延迟显示加载效果的时间（防止闪烁）
         * @return {?}
         */
        function () {
            return this._loadingDelay;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loadingDelay = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "bordered", {
        get: /**
         * 是否显示边框
         * @return {?}
         */
        function () {
            return this._bordered;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._bordered = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showSizeChanger", {
        get: /**
         * 是否显示pagination中改变页数
         * @return {?}
         */
        function () {
            return this._showSizeChanger;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showSizeChanger = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showQuickJumper", {
        get: /**
         * 是否显示pagination中快速跳转
         * @return {?}
         */
        function () {
            return this._showQuickJumper;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showQuickJumper = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showTotal", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'string' && value.length) {
                this._totalTpl = value;
            }
            else if (coerceBooleanProperty(value)) {
                this._totalTpl = "\u5171 {{total}} \u6761";
            }
            else {
                this._totalTpl = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} total
     * @param {?} range
     * @return {?}
     */
    SimpleTableComponent.prototype.renderTotal = /**
     * @param {?} total
     * @param {?} range
     * @return {?}
     */
    function (total, range) {
        return this._totalTpl
            ? this._totalTpl
                .replace('{{total}}', total)
                .replace('{{range[0]}}', range[0])
                .replace('{{range[1]}}', range[1])
            : '';
    };
    Object.defineProperty(SimpleTableComponent.prototype, "isPageIndexReset", {
        get: /**
         * 数据变更后是否保留在数据变更前的页码
         * @return {?}
         */
        function () {
            return this._isPageIndexReset;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isPageIndexReset = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopInChange", {
        get: /**
         * 切换分页时返回顶部
         * @return {?}
         */
        function () {
            return this._toTopInChange;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toTopInChange = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopOffset", {
        get: /**
         * 返回顶部偏移值
         * @return {?}
         */
        function () {
            return this._toTopOffset;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toTopOffset = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "multiSort", {
        get: /**
         * 是否多排序，建议后端支持时使用，默认：`false`
         * @return {?}
         */
        function () {
            return this._multiSort;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiSort = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} url
     * @return {?}
     */
    SimpleTableComponent.prototype.getAjaxData = /**
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        var /** @type {?} */ params = Object.assign((_a = {},
            _a[this.reqReName.pi] = this.pi,
            _a[this.reqReName.ps] = this.ps,
            _a), this.extraParams, this.getReqSortMap(), this.getReqFilterMap());
        return this.http
            .request(this.reqMehtod || 'GET', url || this._url, {
            params: params,
            body: this.reqBody,
            headers: this.reqHeaders,
        })
            .pipe(map(function (res) {
            // list
            var /** @type {?} */ ret = deepGet(res, /** @type {?} */ (_this.resReName.list), []);
            if (ret == null || !Array.isArray(ret))
                return [];
            // total
            var /** @type {?} */ retTotal = _this.resReName.total &&
                deepGet(res, /** @type {?} */ (_this.resReName.total), null);
            _this.total = retTotal == null ? _this.total || 0 : +retTotal;
            return /** @type {?} */ (ret);
        }));
        var _a;
    };
    /**
     * 根据页码重新加载数据
     *
     * @param pi 指定当前页码，默认：`1`
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 根据页码重新加载数据
     *
     * @param {?=} pi 指定当前页码，默认：`1`
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.load = /**
     * 根据页码重新加载数据
     *
     * @param {?=} pi 指定当前页码，默认：`1`
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (pi, extraParams) {
        if (pi === void 0) { pi = 1; }
        if (pi !== -1)
            this.pi = pi;
        this.extraParams = extraParams || null;
        this._change('pi');
    };
    /**
     * 重新刷新当前页
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 重新刷新当前页
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.reload = /**
     * 重新刷新当前页
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (extraParams) {
        this.load(-1, extraParams);
    };
    /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.reset = /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (extraParams) {
        this.load(1, extraParams);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    SimpleTableComponent.prototype._change = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (!this._inited)
            return;
        this._genAjax();
        this._genData();
        this._toTop();
        this.change.emit({
            type: type,
            pi: this.pi,
            ps: this.ps,
            total: this.total,
        });
    };
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    SimpleTableComponent.prototype._genAjax = /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    function (forceRefresh) {
        var _this = this;
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (!this._isAjax)
            return;
        this.loading = true;
        if (forceRefresh === true)
            this.pi = 1;
        this.getAjaxData().subscribe(function (res) { return _this._subscribeData(res); }, function (err) {
            _this.loading = false;
            _this.reqError.emit(err);
        });
    };
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    SimpleTableComponent.prototype._genData = /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this._isAjax)
            return;
        var /** @type {?} */ data = /** @type {?} */ (this.data) || [];
        // sort
        data = data.slice(0);
        var /** @type {?} */ sorterFn = this.getSorterFn();
        if (sorterFn) {
            data = this.recursiveSort(data, sorterFn);
        }
        // filter
        this._columns.filter(function (w) { return w.filters && w.filters.length; }).forEach(function (c) {
            var /** @type {?} */ values = c.filters.filter(function (w) { return w.checked; });
            if (values.length === 0)
                return;
            var /** @type {?} */ onFilter = c.filter;
            data = data.filter(function (record) {
                return values.some(function (v) { return onFilter(v, record); });
            });
        });
        if (forceRefresh) {
            if (this.isPageIndexReset) {
                this.pi = 1;
            }
            else {
                var /** @type {?} */ maxPageIndex = Math.ceil(data.length / this.ps);
                this.pi = !this.pi
                    ? 1
                    : this.pi > maxPageIndex
                        ? maxPageIndex
                        : this.pi;
            }
        }
        this.total = data.length;
        this._isPagination =
            typeof this.showPagination === 'undefined'
                ? this.ps > 0 && this.total > this.ps
                : this.showPagination;
        this._subscribeData(this._isPagination
            ? data.slice((this.pi - 1) * this.ps, this.pi * this.ps)
            : data);
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._toTop = /**
     * @return {?}
     */
    function () {
        if (!this.toTopInChange)
            return;
        if (this.scroll) {
            (/** @type {?} */ (this.el.nativeElement))
                .querySelector('.ant-table-body')
                .scrollTo(0, 0);
            return;
        }
        if (this.el.nativeElement.scrollIntoView)
            this.el.nativeElement.scrollIntoView();
        // todo: toTopOffset
        // fix header height
        this.doc.documentElement.scrollTop -= this.toTopOffset;
    };
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype._get = /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (item, col) {
        if (col.format)
            return col.format(item, col);
        var /** @type {?} */ value = deepGet(item, /** @type {?} */ (col.index), col.default);
        if (typeof value === 'undefined')
            return col.default;
        var /** @type {?} */ ret = value;
        switch (col.type) {
            case 'img':
                ret = "<img src=\"" + value + "\" class=\"img\">";
                break;
            case 'number':
                ret = this.number.transform(value, col.numberDigits);
                break;
            case 'currency':
                ret = this.currenty.transform(value);
                break;
            case 'date':
                ret = this.date.transform(value, col.dateFormat);
                break;
            case 'yn':
                ret = this.yn.transform(value === col.ynTruth, col.ynYes, col.ynNo);
                break;
        }
        return ret || col.default;
    };
    /**
     * @param {?} e
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype._click = /**
     * @param {?} e
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (e, item, col) {
        e.preventDefault();
        e.stopPropagation();
        if (col.click)
            col.click(item, this);
        return false;
    };
    /**
     * @param {?=} urlOrData
     * @return {?}
     */
    SimpleTableComponent.prototype.getDataObs = /**
     * @param {?=} urlOrData
     * @return {?}
     */
    function (urlOrData) {
        return urlOrData || Array.isArray(this.data)
            ? of$1((/** @type {?} */ (urlOrData)) || (/** @type {?} */ (this.data)))
            : (/** @type {?} */ (this.data));
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.processData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.data) {
            this._isAjax = false;
            this.data = [];
            return;
        }
        this._isAjax = false;
        if (typeof this.data === 'string') {
            this._url = /** @type {?} */ (this.data);
            this._isAjax = true;
            this._genAjax(true);
        }
        else if (Array.isArray(this.data)) {
            this._genData(true);
        }
        else {
            if (!this.data$) {
                this.data$ = /** @type {?} */ (this.data
                    .pipe(tap(function () { return (_this.loading = true); }))
                    .subscribe(function (res) {
                    _this.data = res;
                    _this._genData(true);
                }));
            }
        }
    };
    /**
     * @param {?} res
     * @return {?}
     */
    SimpleTableComponent.prototype._subscribeData = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        if (this.preDataChange)
            res = this.preDataChange(res);
        this.loading = false;
        this._data = res;
        this._refCheck();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getReqSortMap = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ ret = {};
        if (!this._sortOrder)
            return ret;
        if (this.multiSort) {
            Object.keys(this._sortMap).forEach(function (key) {
                var /** @type {?} */ item = _this._sortMap[key];
                if (item.v) {
                    ret[item.key] =
                        (item.column.sortReName || _this.sortReName || {})[item.v] || item.v;
                }
            });
        }
        else {
            var /** @type {?} */ mapData = this._sortMap[this._sortIndex];
            ret[mapData.key] =
                (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] ||
                    mapData.v;
        }
        return ret;
    };
    /**
     * @param {?} data
     * @param {?} sorterFn
     * @return {?}
     */
    SimpleTableComponent.prototype.recursiveSort = /**
     * @param {?} data
     * @param {?} sorterFn
     * @return {?}
     */
    function (data, sorterFn) {
        var _this = this;
        var /** @type {?} */ childrenColumnName = 'children';
        return data.sort(sorterFn).map(function (item) {
            return item[childrenColumnName]
                ? __assign({}, item, (_a = {}, _a[childrenColumnName] = _this.recursiveSort(item[childrenColumnName], sorterFn), _a)) : item;
            var _a;
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getSorterFn = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // _sortMap
        if (!this._sortOrder ||
            !this._sortColumn ||
            typeof this._sortColumn.sorter !== 'function') {
            return;
        }
        return function (a, b) {
            var /** @type {?} */ result = (/** @type {?} */ (((_this._sortColumn)).sorter))(a, b);
            if (result !== 0) {
                return _this._sortOrder === 'descend' ? -result : result;
            }
            return 0;
        };
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    SimpleTableComponent.prototype.sort = /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        var _this = this;
        if (this._sortIndex === index && this._sortOrder === value)
            return;
        this._sortColumn = this._columns[index];
        this._sortOrder = value;
        this._sortIndex = index;
        if (this.multiSort) {
            this._sortMap[index].v = value;
        }
        else {
            Object.keys(this._sortMap).forEach(function (key) { return (_this._sortMap[key].v = +key === index ? value : null); });
        }
        this._genAjax(true);
        this._genData(true);
        this.sortChange.emit({
            value: value,
            map: this.getReqSortMap(),
            column: this._sortColumn,
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getReqFilterMap = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ret = {};
        this._columns.filter(function (w) { return w.filtered === true; }).forEach(function (col) {
            var /** @type {?} */ values = col.filters.filter(function (f) { return f.checked === true; });
            var /** @type {?} */ obj = {};
            if (col.filterReName)
                obj = col.filterReName(col.filters, col);
            else
                obj[col.filterKey || col["indexKey"]] = values.map(function (i) { return i.value; }).join(',');
            ret = Object.assign(ret, obj);
        });
        return ret;
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.handleFilter = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        col.filtered = col.filters.findIndex(function (w) { return w.checked; }) !== -1;
        this._genAjax(true);
        this._genData(true);
        this.filterChange.emit(col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.filterConfirm = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        this.handleFilter(col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.filterClear = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        col.filters.forEach(function (i) { return (i.checked = false); });
        this.handleFilter(col);
    };
    /**
     * @param {?} col
     * @param {?} item
     * @param {?} checked
     * @return {?}
     */
    SimpleTableComponent.prototype.filterRadio = /**
     * @param {?} col
     * @param {?} item
     * @param {?} checked
     * @return {?}
     */
    function (col, item, checked) {
        col.filters.forEach(function (i) { return (i.checked = false); });
        item.checked = checked;
    };
    // endregion
    // region: checkbox
    /** 清除所有 `checkbox` */
    /**
     * 清除所有 `checkbox`
     * @return {?}
     */
    SimpleTableComponent.prototype.clearCheck = /**
     * 清除所有 `checkbox`
     * @return {?}
     */
    function () {
        return this._checkAll(false);
    };
    /**
     * @param {?=} checked
     * @return {?}
     */
    SimpleTableComponent.prototype._checkAll = /**
     * @param {?=} checked
     * @return {?}
     */
    function (checked) {
        checked = typeof checked === 'undefined' ? this._allChecked : checked;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return (i.checked = checked); });
        return this._refCheck()._checkNotify();
    };
    /**
     * @param {?} i
     * @param {?} value
     * @return {?}
     */
    SimpleTableComponent.prototype._checkSelection = /**
     * @param {?} i
     * @param {?} value
     * @return {?}
     */
    function (i, value) {
        i.checked = value;
        return this._refCheck()._checkNotify();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._refCheck = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ validData = this._data.filter(function (w) { return !w.disabled; });
        var /** @type {?} */ checkedList = validData.filter(function (w) { return w.checked === true; });
        this._allChecked =
            checkedList.length > 0 && checkedList.length === validData.length;
        var /** @type {?} */ allUnChecked = validData.every(function (value) { return !value.checked; });
        this._indeterminate = !this._allChecked && !allUnChecked;
        return this;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    SimpleTableComponent.prototype._rowSelection = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (row.select)
            row.select(this._data);
        return this._refCheck()._checkNotify();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._checkNotify = /**
     * @return {?}
     */
    function () {
        this.checkboxChange.emit(this._data.filter(function (w) { return !w.disabled && w.checked === true; }));
        return this;
    };
    // endregion
    // region: radio
    /** 清除所有 `radio` */
    /**
     * 清除所有 `radio`
     * @return {?}
     */
    SimpleTableComponent.prototype.clearRadio = /**
     * 清除所有 `radio`
     * @return {?}
     */
    function () {
        this._data.filter(function (w) { return w.checked; }).forEach(function (item) { return (item.checked = false); });
        this.radioChange.emit(null);
        return this;
    };
    /**
     * @param {?} idx
     * @param {?} checked
     * @param {?} item
     * @return {?}
     */
    SimpleTableComponent.prototype._refRadio = /**
     * @param {?} idx
     * @param {?} checked
     * @param {?} item
     * @return {?}
     */
    function (idx, checked, item) {
        if (item.disabled === true)
            return;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return (i.checked = false); });
        item.checked = checked;
        this.radioChange.emit(item);
        return this;
    };
    // endregion
    // region: buttons
    /**
     * @param {?} list
     * @return {?}
     */
    SimpleTableComponent.prototype.btnCoerceIf = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            if (!item.if)
                item.if = function () { return true; };
            if (!item.children)
                item.children = [];
            if (item.children.length > 0)
                this.btnCoerceIf(item.children);
        }
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    SimpleTableComponent.prototype.btnClick = /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    function (record, btn) {
        var _this = this;
        if (btn.type === 'modal' || btn.type === 'static') {
            var /** @type {?} */ obj = {};
            obj[btn.paramName || this.defConfig.modalParamsName || 'record'] = record;
            (/** @type {?} */ (this.modal[btn.type === 'modal' ? 'open' : 'static']))(btn.component, Object.assign(obj, btn.params && btn.params(record)), btn.size, btn.modalOptions)
                .pipe(filter(function (w) { return typeof w !== 'undefined'; }))
                .subscribe(function (res) {
                if (btn.click)
                    _this.btnCallback(record, btn, res);
            });
            return;
        }
        this.btnCallback(record, btn);
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @param {?=} modal
     * @return {?}
     */
    SimpleTableComponent.prototype.btnCallback = /**
     * @param {?} record
     * @param {?} btn
     * @param {?=} modal
     * @return {?}
     */
    function (record, btn, modal) {
        if (!btn.click)
            return;
        if (typeof btn.click === 'string') {
            switch (btn.click) {
                case 'load':
                    this.load();
                    break;
                case 'reload':
                    this.reload();
                    break;
            }
        }
        else {
            btn.click(record, modal, this);
        }
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    SimpleTableComponent.prototype.btnText = /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    function (record, btn) {
        if (btn.format)
            return btn.format(record, btn);
        return btn.text;
    };
    // endregion
    // region: fixed
    /**
     * @param {?} list
     * @return {?}
     */
    SimpleTableComponent.prototype.fixedCoerce = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        list.forEach(function (item, idx) {
            if (item.fixed && item.width) {
                if (item.fixed === 'left') {
                    item["_left"] = idx === 0 ? '0px' : list[idx - 1].width;
                }
                else if (item.fixed === 'right') {
                    item["_right"] = idx === list.length - 1 ? '0px' : list[idx + 1].width;
                }
            }
        });
    };
    // endregion
    // region: export
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param opt 额外参数
     */
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param {?=} urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param {?=} opt 额外参数
     * @return {?}
     */
    SimpleTableComponent.prototype.export = /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param {?=} urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param {?=} opt 额外参数
     * @return {?}
     */
    function (urlOrData, opt) {
        var _this = this;
        ((!urlOrData && this._isAjax) ||
            (urlOrData && typeof urlOrData === 'string')
            ? this.getAjaxData(/** @type {?} */ (urlOrData))
            : this.getDataObs(urlOrData)).subscribe(function (res) {
            return _this.exportSrv.export(Object.assign({}, opt, /** @type {?} */ ({
                _d: res,
                _c: _this._columns,
            })));
        });
    };
    // endregion
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._inited = true;
        this.updateColumns();
        this.processData();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._classMap.forEach(function (cls) {
            return _this.renderer.removeClass(_this.el.nativeElement, cls);
        });
        this._classMap = [];
        if (this.pagePlacement)
            this._classMap.push('ad-st__p' + this.pagePlacement);
        this._classMap.forEach(function (cls) {
            return _this.renderer.addClass(_this.el.nativeElement, cls);
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.updateColumns = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._columns = [];
        if (!this.columns || this.columns.length === 0)
            throw new Error("the columns property muse be define!");
        var /** @type {?} */ checkboxCount = 0;
        var /** @type {?} */ radioCount = 0;
        var /** @type {?} */ sortMap = {};
        var /** @type {?} */ idx = 0;
        var /** @type {?} */ newColumns = [];
        var /** @type {?} */ copyColumens = deepCopy(this.columns);
        for (var _i = 0, copyColumens_1 = copyColumens; _i < copyColumens_1.length; _i++) {
            var item = copyColumens_1[_i];
            if (this.acl && item.acl && !this.acl.can(item.acl))
                continue;
            if (item.index) {
                if (!Array.isArray(item.index))
                    item.index = item.index.split('.');
                item.indexKey = item.index.join('.');
            }
            // rowSelection
            if (!item.selections)
                item.selections = [];
            if (item.type === 'checkbox') {
                ++checkboxCount;
                if (!item.width)
                    item.width = (item.selections.length > 0 ? 60 : 50) + "px";
            }
            if (item.type === 'radio') {
                ++radioCount;
                item.selections = [];
                if (!item.width)
                    item.width = '50px';
            }
            if (!item.className) {
                item.className = {
                    // 'checkbox': 'text-center',
                    // 'radio': 'text-center',
                    number: 'text-right',
                    currency: 'text-right',
                    date: 'text-center',
                }[item.type];
            }
            if (item.type === 'yn' && typeof item.ynTruth === 'undefined')
                item.ynTruth = true;
            // sorter
            if (item.sorter) {
                sortMap[idx] = {
                    enabled: true,
                    v: item.sort,
                    key: item.sortKey || item.indexKey,
                    column: item,
                };
                if (item.sort && !this._sortColumn) {
                    this._sortColumn = item;
                    this._sortOrder = item.sort;
                    this._sortIndex = idx;
                }
            }
            else {
                sortMap[idx] = {
                    enabled: false,
                };
            }
            // filter
            if (!item.filter || !item.filters)
                item.filters = [];
            if (typeof item.filterMultiple === 'undefined')
                item.filterMultiple = true;
            if (!item.filterConfirmText)
                item.filterConfirmText = "\u786E\u8BA4";
            if (!item.filterClearText)
                item.filterClearText = "\u91CD\u7F6E";
            if (!item.filterIcon)
                item.filterIcon = "anticon anticon-filter";
            item.filtered = item.filters.findIndex(function (w) { return w.checked; }) !== -1;
            if (this.acl) {
                item.selections = item.selections.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                item.filters = item.filters.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
            }
            // buttons
            var /** @type {?} */ buttons = [];
            if (item.buttons) {
                for (var _a = 0, _b = item.buttons; _a < _b.length; _a++) {
                    var btn = _b[_a];
                    if (this.acl && btn.acl && !this.acl.can(btn.acl))
                        continue;
                    if (btn.type === 'del' && typeof btn.pop === 'undefined')
                        btn.pop = true;
                    if (btn.pop === true) {
                        btn._type = 2;
                        if (typeof btn.popTitle === 'undefined')
                            btn.popTitle = "\u786E\u8BA4\u5220\u9664\u5417\uFF1F";
                    }
                    if (btn.children && btn.children.length > 0) {
                        btn._type = 3;
                    }
                    if (!btn._type)
                        btn._type = 1;
                    // i18n
                    if (btn.i18n && this.i18nSrv)
                        btn.text = this.i18nSrv.fanyi(btn.i18n);
                    buttons.push(btn);
                }
                if (buttons.length === 0)
                    continue;
                this.btnCoerceIf(buttons);
            }
            item.buttons = buttons;
            // i18n
            if (item.i18n && this.i18nSrv)
                item.title = this.i18nSrv.fanyi(item.i18n);
            ++idx;
            newColumns.push(item);
        }
        this.fixedCoerce(newColumns);
        this._columns = newColumns;
        if (checkboxCount > 1)
            throw new Error("just only one column checkbox");
        if (radioCount > 1)
            throw new Error("just only one column radio");
        this._sortMap = sortMap;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && this._inited)
            this.updateColumns();
        if (changes.data && this._inited)
            this.processData();
        this.setClass();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.data$) {
            this.data$.unsubscribe();
            this.data$ = null;
        }
    };
    SimpleTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'simple-table',
                    template: "<nz-table [nzData]=\"_data\" [(nzPageIndex)]=\"pi\" (nzPageIndexChange)=\"_change('pi')\" [(nzPageSize)]=\"ps\" (nzPageSizeChange)=\"_change('ps')\" [nzTotal]=\"total\" [nzShowPagination]=\"_isPagination\" [nzFrontPagination]=\"false\" [nzBordered]=\"bordered\" [nzSize]=\"size\" [nzLoading]=\"loading\" [nzLoadingDelay]=\"loadingDelay\" [nzScroll]=\"scroll\" [nzTitle]=\"header\" [nzFooter]=\"footer\" [nzNoResult]=\"noResult\" [nzPageSizeOptions]=\"pageSizeOptions\" [nzShowQuickJumper]=\"showQuickJumper\" [nzShowSizeChanger]=\"showSizeChanger\" [nzShowTotal]=\"totalTpl\"> <thead> <tr> <th *ngIf=\"expand\" [nzShowExpand]=\"expand\"></th> <th *ngFor=\"let c of _columns; let index=index\" [nzWidth]=\"c.width\" [nzLeft]=\"c._left\" [nzRight]=\"c._right\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\" [attr.data-col]=\"c.indexKey\" [nzShowSort]=\"_sortMap[index].enabled\" [(nzSort)]=\"_sortMap[index].v\" (nzSortChange)=\"sort(index, $event)\"> <ng-template #renderTitle [ngTemplateOutlet]=\"c.__renderTitle\" [ngTemplateOutletContext]=\"{$implicit: c, index: index }\"></ng-template> <ng-container *ngIf=\"!c.__renderTitle; else renderTitle\"> <ng-container [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [(ngModel)]=\"_allChecked\" [nzIndeterminate]=\"_indeterminate\" (ngModelChange)=\"_checkAll()\"></label> <nz-dropdown *ngIf=\"c.selections.length\"> <span nz-dropdown> <i class=\"anticon anticon-down\"></i> </span> <ul nz-menu> <li nz-menu-item *ngFor=\"let rw of c.selections\" (click)=\"_rowSelection(rw)\" [innerHTML]=\"rw.text\"> </li> </ul> </nz-dropdown> </ng-container> <ng-container *ngSwitchDefault> <span [innerHTML]=\"c.title\"></span> </ng-container> </ng-container> <nz-dropdown *ngIf=\"c.filters.length > 0\" nzTrigger=\"click\" [hasFilterButton]=\"true\" [nzClickHide]=\"false\" [(nzVisible)]=\"c.filterVisible\"> <i class=\"{{c.filterIcon}}\" [ngClass]=\"{'ant-table-filter-selected': c.filtered}\" nz-dropdown></i> <ul nz-menu> <ng-container *ngIf=\"c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-checkbox [(ngModel)]=\"filter.checked\">{{filter.text}}</label> </li> </ng-container> <ng-container *ngIf=\"!c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-radio [ngModel]=\"filter.checked\" (ngModelChange)=\"filterRadio(c, filter, $event)\">{{filter.text}}</label> </li> </ng-container> </ul> <div class=\"ant-table-filter-dropdown-btns\"> <a class=\"ant-table-filter-dropdown-link confirm\" (click)=\"c.filterVisible = false\"> <span (click)=\"filterConfirm(c)\">{{c.filterConfirmText}}</span> </a> <a class=\"ant-table-filter-dropdown-link clear\" (click)=\"c.filterVisible = false\"> <span (click)=\"filterClear(c)\">{{c.filterClearText}}</span> </a> </div> </nz-dropdown> </ng-container> </th> </tr> </thead> <tbody> <ng-container *ngFor=\"let i of _data; let index=index\"> <tr> <td *ngIf=\"expand\" [nzShowExpand]=\"expand\" [(nzExpand)]=\"i.expand\"></td> <td *ngFor=\"let c of _columns\" [nzLeft]=\"c._left\" [nzRight]=\"c._right\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\"> <ng-template #render [ngTemplateOutlet]=\"c.__render\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> <ng-container *ngIf=\"!c.__render; else render\"> <ng-container *ngIf=\"c.index\" [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_checkSelection(i, $event)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'radio'\"> <label nz-radio [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_refRadio(index, $event, i)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'link'\"> <a (click)=\"_click($event, i, c)\" [innerHTML]=\"_get(i, c)\"></a> </ng-container> <span *ngSwitchDefault [innerHTML]=\"_get(i, c)\"></span> </ng-container> <ng-container *ngFor=\"let btn of c.buttons; let last=last\"> <ng-container *ngIf=\"btn.if(i, btn, c)\" [ngSwitch]=\"btn._type\"> <ng-container *ngSwitchCase=\"2\"> <nz-popconfirm [nzTitle]=\"btn.popTitle\" (nzOnConfirm)=\"btnClick(i, btn)\"> <a nz-popconfirm [innerHTML]=\"btnText(i, btn)\"></a> </nz-popconfirm> </ng-container> <ng-container *ngSwitchCase=\"3\"> <nz-dropdown> <a class=\"ant-dropdown-link\" nz-dropdown> {{btnText(i, btn)}} <i class=\"anticon anticon-down\"></i> </a> <ul nz-menu> <ng-container *ngFor=\"let subBtn of btn.children\"> <li nz-menu-item *ngIf=\"btn.if(i, btn, c)\"> <a (click)=\"btnClick(i, subBtn)\" [innerHTML]=\"btnText(i, subBtn)\"></a> </li> </ng-container> </ul> </nz-dropdown> </ng-container> <a *ngSwitchDefault (click)=\"btnClick(i, btn)\" [innerHTML]=\"btnText(i, btn)\"></a> <nz-divider *ngIf=\"!last\" nzType=\"vertical\"></nz-divider> </ng-container> </ng-container> <ng-template [ngIf]=\"!c.__renderExpanded\" [ngTemplateOutlet]=\"c.__renderExpanded\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> </ng-container> </td> </tr> <tr [nzExpand]=\"i.expand\"> <td></td> <td [attr.colspan]=\"_columns.length\"> <ng-template [ngTemplateOutlet]=\"expand\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> </td> </tr> </ng-container> <ng-template [ngIf]=\"!loading\" [ngTemplateOutlet]=\"body\"></ng-template> </tbody> <ng-template #totalTpl let-range=\"range\" let-total>{{ renderTotal(total, range) }}</ng-template> </nz-table> ",
                    host: { '[class.ad-st]': 'true' },
                    providers: [SimpleTableExport, CNCurrencyPipe, DatePipe, YNPipe, DecimalPipe],
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    SimpleTableComponent.ctorParameters = function () { return [
        { type: AdSimpleTableConfig, },
        { type: HttpClient, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: SimpleTableExport, },
        { type: ACLService, decorators: [{ type: Optional },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
        { type: ModalHelper, },
        { type: CNCurrencyPipe, },
        { type: DatePipe, },
        { type: YNPipe, },
        { type: DecimalPipe, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    SimpleTableComponent.propDecorators = {
        "data": [{ type: Input },],
        "extraParams": [{ type: Input },],
        "reqMehtod": [{ type: Input },],
        "reqBody": [{ type: Input },],
        "reqHeaders": [{ type: Input },],
        "reqReName": [{ type: Input },],
        "reqError": [{ type: Output },],
        "resReName": [{ type: Input },],
        "columns": [{ type: Input },],
        "ps": [{ type: Input },],
        "pi": [{ type: Input },],
        "total": [{ type: Input },],
        "showPagination": [{ type: Input },],
        "loading": [{ type: Input },],
        "loadingDelay": [{ type: Input },],
        "bordered": [{ type: Input },],
        "size": [{ type: Input },],
        "scroll": [{ type: Input },],
        "showSizeChanger": [{ type: Input },],
        "pageSizeOptions": [{ type: Input },],
        "showQuickJumper": [{ type: Input },],
        "showTotal": [{ type: Input },],
        "isPageIndexReset": [{ type: Input },],
        "pagePlacement": [{ type: Input },],
        "toTopInChange": [{ type: Input },],
        "toTopOffset": [{ type: Input },],
        "sortReName": [{ type: Input },],
        "multiSort": [{ type: Input },],
        "preDataChange": [{ type: Input },],
        "header": [{ type: ContentChild, args: ['header',] },],
        "body": [{ type: ContentChild, args: ['body',] },],
        "footer": [{ type: ContentChild, args: ['footer',] },],
        "expand": [{ type: ContentChild, args: ['expand',] },],
        "noResult": [{ type: Input },],
        "widthConfig": [{ type: Input },],
        "change": [{ type: Output },],
        "checkboxChange": [{ type: Output },],
        "radioChange": [{ type: Output },],
        "sortChange": [{ type: Output },],
        "filterChange": [{ type: Output },],
    };
    return SimpleTableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SimpleTableRowDirective = /** @class */ (function () {
    function SimpleTableRowDirective(templateRef, table) {
        this.templateRef = templateRef;
        this.table = table;
    }
    /**
     * @return {?}
     */
    SimpleTableRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ col = this.table._columns.find(function (w) { return w.render === _this.id; });
        if (!col)
            return;
        switch (this.type) {
            case 'title':
                col["__renderTitle"] = this.templateRef;
                break;
            default:
                col["__render"] = this.templateRef;
                break;
        }
    };
    SimpleTableRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[st-row]',
                },] },
    ];
    /** @nocollapse */
    SimpleTableRowDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
        { type: SimpleTableComponent, },
    ]; };
    SimpleTableRowDirective.propDecorators = {
        "id": [{ type: Input, args: ['st-row',] },],
        "type": [{ type: Input },],
    };
    return SimpleTableRowDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$15 = [SimpleTableComponent, SimpleTableRowDirective];
var ZORROMODULES$5 = [NgZorroAntdModule];
var AdSimpleTableModule = /** @class */ (function () {
    function AdSimpleTableModule() {
    }
    /**
     * @return {?}
     */
    AdSimpleTableModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdSimpleTableModule, providers: [AdSimpleTableConfig] };
    };
    AdSimpleTableModule.decorators = [
        { type: NgModule, args: [{
                    schemas: [NO_ERRORS_SCHEMA],
                    imports: [CommonModule, FormsModule, DelonUtilModule].concat(ZORROMODULES$5),
                    declarations: COMPONENTS$15.slice(),
                    exports: COMPONENTS$15.slice(),
                },] },
    ];
    return AdSimpleTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var ReuseTabMatchMode = {
    /**
       * （推荐）按菜单 `Menu` 配置
       *
       * 可复用：
       * - `{ text:'Dashboard' }`
       * - `{ text:'Dashboard', reuse: true }`
       *
       * 不可复用：
       * - `{ text:'Dashboard', reuse: false }`
       */
    Menu: 0,
    /**
       * 按菜单 `Menu` 强制配置
       *
       * 可复用：
       * - `{ text:'Dashboard', reuse: true }`
       *
       * 不可复用：
       * - `{ text:'Dashboard' }`
       * - `{ text:'Dashboard', reuse: false }`
       */
    MenuForce: 1,
    /**
       * 对所有路由有效，可以配合 `excludes` 过滤无须复用路由
       */
    URL: 2,
};
ReuseTabMatchMode[ReuseTabMatchMode.Menu] = "Menu";
ReuseTabMatchMode[ReuseTabMatchMode.MenuForce] = "MenuForce";
ReuseTabMatchMode[ReuseTabMatchMode.URL] = "URL";
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 路由复用类，提供复用所需要一些基本接口
 *
 * **注：** 所有缓存数据来源于路由离开后才会产生
 */
var ReuseTabService = /** @class */ (function () {
    // endregion
    function ReuseTabService(injector, menuService) {
        this.injector = injector;
        this.menuService = menuService;
        this._max = 10;
        this._debug = false;
        this._mode = ReuseTabMatchMode.Menu;
        this._excludes = [];
        this._cachedChange = new BehaviorSubject$1(null);
        this._cached = [];
        this._titleCached = {};
        this._closableCached = {};
    }
    Object.defineProperty(ReuseTabService.prototype, "max", {
        // region: public
        /** 允许最多复用多少个页面，取值范围 `2-100` */
        set: /**
         * 允许最多复用多少个页面，取值范围 `2-100`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = Math.min(Math.max(value, 2), 100);
            for (var /** @type {?} */ i = this._cached.length; i > this._max; i--) {
                this._cached.pop();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        /** 设置匹配模式 */
        set: /**
         * 设置匹配模式
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._mode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "debug", {
        get: /**
         * @return {?}
         */
        function () {
            return this._debug;
        },
        /** 设置Debug模式 */
        set: /**
         * 设置Debug模式
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._debug = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "excludes", {
        get: /**
         * @return {?}
         */
        function () {
            return this._excludes;
        },
        /** 排除规则，限 `mode=URL` */
        set: /**
         * 排除规则，限 `mode=URL`
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (!values)
                return;
            this._excludes = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "items", {
        /** 获取已缓存的路由 */
        get: /**
         * 获取已缓存的路由
         * @return {?}
         */
        function () {
            return this._cached;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "count", {
        /** 获取当前缓存的路由总数 */
        get: /**
         * 获取当前缓存的路由总数
         * @return {?}
         */
        function () {
            return this._cached.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "change", {
        /** 订阅缓存变更通知 */
        get: /**
         * 订阅缓存变更通知
         * @return {?}
         */
        function () {
            return this._cachedChange.asObservable(); // .pipe(filter(w => w !== null));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabService.prototype, "title", {
        /** 自定义当前标题 */
        set: /**
         * 自定义当前标题
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ curUrl = this.getUrl(this.injector.get(ActivatedRoute).snapshot);
            if (typeof value === 'string')
                value = { text: value };
            this._titleCached[curUrl] = value;
            this.di('update current tag title: ', value);
            this._cachedChange.next({
                active: 'title',
                title: value,
                list: this._cached,
            });
        },
        enumerable: true,
        configurable: true
    });
    /** 获取指定路径缓存所在位置，`-1` 表示无缓存 */
    /**
     * 获取指定路径缓存所在位置，`-1` 表示无缓存
     * @param {?} url
     * @return {?}
     */
    ReuseTabService.prototype.index = /**
     * 获取指定路径缓存所在位置，`-1` 表示无缓存
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this._cached.findIndex(function (w) { return w.url === url; });
    };
    /** 获取指定路径缓存是否存在 */
    /**
     * 获取指定路径缓存是否存在
     * @param {?} url
     * @return {?}
     */
    ReuseTabService.prototype.exists = /**
     * 获取指定路径缓存是否存在
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.index(url) !== -1;
    };
    /** 获取指定路径缓存 */
    /**
     * 获取指定路径缓存
     * @param {?} url
     * @return {?}
     */
    ReuseTabService.prototype.get = /**
     * 获取指定路径缓存
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return url ? this._cached.find(function (w) { return w.url === url; }) || null : null;
    };
    /**
     * @param {?} url
     * @param {?} includeNonCloseable
     * @return {?}
     */
    ReuseTabService.prototype.remove = /**
     * @param {?} url
     * @param {?} includeNonCloseable
     * @return {?}
     */
    function (url, includeNonCloseable) {
        var /** @type {?} */ idx = typeof url === 'string' ? this.index(url) : url;
        var /** @type {?} */ item = idx !== -1 ? this._cached[idx] : null;
        if (!item || (!includeNonCloseable && !item.closable))
            return false;
        this.destroy(item._handle);
        this._cached.splice(idx, 1);
        delete this._titleCached[url];
        return true;
    };
    /**
     * 根据URL移除标签
     *
     * @param [includeNonCloseable=false] 是否强制包含不可关闭
     */
    /**
     * 根据URL移除标签
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    ReuseTabService.prototype.close = /**
     * 根据URL移除标签
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    function (url, includeNonCloseable) {
        if (includeNonCloseable === void 0) { includeNonCloseable = false; }
        this.removeUrlBuffer = url;
        this.remove(url, includeNonCloseable);
        this._cachedChange.next({ active: 'close', url: url, list: this._cached });
        this.di('close tag', url);
        return true;
    };
    /**
     * 清除右边
     *
     * @param [includeNonCloseable=false] 是否强制包含不可关闭
     */
    /**
     * 清除右边
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    ReuseTabService.prototype.closeRight = /**
     * 清除右边
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    function (url, includeNonCloseable) {
        if (includeNonCloseable === void 0) { includeNonCloseable = false; }
        var /** @type {?} */ start = this.index(url);
        for (var /** @type {?} */ i = this.count - 1; i > start; i--) {
            this.remove(i, includeNonCloseable);
        }
        this.removeUrlBuffer = null;
        this._cachedChange.next({ active: 'closeRight', url: url, list: this._cached });
        this.di('close right tages', url);
        return true;
    };
    /**
     * 清除所有缓存
     *
     * @param [includeNonCloseable=false] 是否强制包含不可关闭
     */
    /**
     * 清除所有缓存
     *
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    ReuseTabService.prototype.clear = /**
     * 清除所有缓存
     *
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    function (includeNonCloseable) {
        var _this = this;
        if (includeNonCloseable === void 0) { includeNonCloseable = false; }
        this._cached.forEach(function (w) {
            if (!includeNonCloseable && w.closable)
                _this.destroy(w._handle);
        });
        this._cached = this._cached.filter(function (w) { return !includeNonCloseable && !w.closable; });
        this.removeUrlBuffer = null;
        this._cachedChange.next({ active: 'clear', list: this._cached });
        this.di('clear all catch');
    };
    /**
     * 移动缓存数据
     * @param url 要移动的URL地址
     * @param position 新位置，下标从 `0` 开始
     *
     * @example
     * ```
     * // source
     * [ '/a/1', '/a/2', '/a/3', '/a/4', '/a/5' ]
     * move('/a/1', 2);
     * // output
     * [ '/a/2', '/a/3', '/a/1', '/a/4', '/a/5' ]
     * move('/a/1', -1);
     * // output
     * [ '/a/2', '/a/3', '/a/4', '/a/5', '/a/1' ]
     * ```
     */
    /**
     * 移动缓存数据
     * \@example
     * ```
     * // source
     * [ '/a/1', '/a/2', '/a/3', '/a/4', '/a/5' ]
     * move('/a/1', 2);
     * // output
     * [ '/a/2', '/a/3', '/a/1', '/a/4', '/a/5' ]
     * move('/a/1', -1);
     * // output
     * [ '/a/2', '/a/3', '/a/4', '/a/5', '/a/1' ]
     * ```
     * @param {?} url 要移动的URL地址
     * @param {?} position 新位置，下标从 `0` 开始
     *
     * @return {?}
     */
    ReuseTabService.prototype.move = /**
     * 移动缓存数据
     * \@example
     * ```
     * // source
     * [ '/a/1', '/a/2', '/a/3', '/a/4', '/a/5' ]
     * move('/a/1', 2);
     * // output
     * [ '/a/2', '/a/3', '/a/1', '/a/4', '/a/5' ]
     * move('/a/1', -1);
     * // output
     * [ '/a/2', '/a/3', '/a/4', '/a/5', '/a/1' ]
     * ```
     * @param {?} url 要移动的URL地址
     * @param {?} position 新位置，下标从 `0` 开始
     *
     * @return {?}
     */
    function (url, position) {
        var /** @type {?} */ start = this._cached.findIndex(function (w) { return w.url === url; });
        if (start === -1)
            return;
        var /** @type {?} */ data = this._cached.slice();
        data.splice(position < 0 ? data.length + position : position, 0, data.splice(start, 1)[0]);
        this._cached = data;
        this._cachedChange.next({
            active: 'move',
            url: url,
            position: position,
            list: this._cached,
        });
    };
    /**
     * 获取标题，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.title = 'new title'` 重新指定文本
     * 2. 路由配置中 data 属性中包含 titleI18n > title
     * 3. 菜单数据中 text 属性
     *
     * @param url 指定URL
     * @param route 指定路由快照
     */
    /**
     * 获取标题，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.title = 'new title'` 重新指定文本
     * 2. 路由配置中 data 属性中包含 titleI18n > title
     * 3. 菜单数据中 text 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    ReuseTabService.prototype.getTitle = /**
     * 获取标题，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.title = 'new title'` 重新指定文本
     * 2. 路由配置中 data 属性中包含 titleI18n > title
     * 3. 菜单数据中 text 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    function (url, route) {
        if (this._titleCached[url])
            return this._titleCached[url];
        if (route && route.data && (route.data["titleI18n"] || route.data["title"]))
            return /** @type {?} */ ({ text: route.data["title"], i18n: route.data["titleI18n"] });
        var /** @type {?} */ menu = this.mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        return menu ? { text: menu.text, i18n: menu.i18n } : { text: url };
    };
    /**
     * 清除标题缓存
     */
    /**
     * 清除标题缓存
     * @return {?}
     */
    ReuseTabService.prototype.clearTitleCached = /**
     * 清除标题缓存
     * @return {?}
     */
    function () {
        this._titleCached = {};
    };
    Object.defineProperty(ReuseTabService.prototype, "closable", {
        /** 自定义当前 `closable` 状态 */
        set: /**
         * 自定义当前 `closable` 状态
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var /** @type {?} */ curUrl = this.getUrl(this.injector.get(ActivatedRoute).snapshot);
            this._closableCached[curUrl] = value;
            this.di('update current tag closable: ', value);
            this._cachedChange.next({
                active: 'closable',
                closable: value,
                list: this._cached,
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取 `closable` 状态，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.closable = true` 重新指定 `closable` 状态
     * 2. 路由配置中 data 属性中包含 `reuseClosable`
     * 3. 菜单数据中 `reuseClosable` 属性
     *
     * @param url 指定URL
     * @param route 指定路由快照
     */
    /**
     * 获取 `closable` 状态，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.closable = true` 重新指定 `closable` 状态
     * 2. 路由配置中 data 属性中包含 `reuseClosable`
     * 3. 菜单数据中 `reuseClosable` 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    ReuseTabService.prototype.getClosable = /**
     * 获取 `closable` 状态，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.closable = true` 重新指定 `closable` 状态
     * 2. 路由配置中 data 属性中包含 `reuseClosable`
     * 3. 菜单数据中 `reuseClosable` 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    function (url, route) {
        if (typeof this._closableCached[url] !== 'undefined')
            return this._closableCached[url];
        if (route && route.data && typeof route.data["reuseClosable"] === 'boolean')
            return route.data["reuseClosable"];
        var /** @type {?} */ menu = this.mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        if (menu && typeof menu["reuseClosable"] === 'boolean')
            return menu["reuseClosable"];
        return true;
    };
    /**
     * 清空 `closable` 缓存
     */
    /**
     * 清空 `closable` 缓存
     * @return {?}
     */
    ReuseTabService.prototype.clearClosableCached = /**
     * 清空 `closable` 缓存
     * @return {?}
     */
    function () {
        this._closableCached = {};
    };
    /**
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.getTruthRoute = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var /** @type {?} */ next = route;
        while (next.firstChild)
            next = next.firstChild;
        return next;
    };
    /**
     * 根据快照获取URL地址
     */
    /**
     * 根据快照获取URL地址
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.getUrl = /**
     * 根据快照获取URL地址
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var /** @type {?} */ next = this.getTruthRoute(route);
        var /** @type {?} */ segments = [];
        while (next) {
            segments.push(next.url.join('/'));
            next = next.parent;
        }
        var /** @type {?} */ url = '/' +
            segments
                .filter(function (i) { return i; })
                .reverse()
                .join('/');
        return url;
    };
    /**
     * 检查快照是否允许被复用
     */
    /**
     * 检查快照是否允许被复用
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.can = /**
     * 检查快照是否允许被复用
     * @param {?} route
     * @return {?}
     */
    function (route) {
        var /** @type {?} */ url = this.getUrl(route);
        if (url === this.removeUrlBuffer)
            return false;
        if (route.data && typeof route.data["reuse"] === 'boolean')
            return route.data["reuse"];
        if (this.mode !== ReuseTabMatchMode.URL) {
            var /** @type {?} */ menu = this.getMenu(url);
            if (!menu)
                return false;
            if (this.mode === ReuseTabMatchMode.Menu) {
                if (menu.reuse === false)
                    return false;
            }
            else {
                if (!menu.reuse || menu.reuse !== true)
                    return false;
            }
            return true;
        }
        return this._excludes.findIndex(function (r) { return r.test(url); }) === -1;
    };
    /**
     * 刷新，触发一个 refresh 类型事件
     */
    /**
     * 刷新，触发一个 refresh 类型事件
     * @param {?=} data
     * @return {?}
     */
    ReuseTabService.prototype.refresh = /**
     * 刷新，触发一个 refresh 类型事件
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        this._cachedChange.next({ active: 'refresh', data: data });
    };
    /**
     * @param {?} _handle
     * @return {?}
     */
    ReuseTabService.prototype.destroy = /**
     * @param {?} _handle
     * @return {?}
     */
    function (_handle) {
        if (_handle && _handle.componentRef && _handle.componentRef.destroy)
            _handle.componentRef.destroy();
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    ReuseTabService.prototype.di = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this.debug)
            return;
        // tslint:disable-next-line:no-console
        console.warn.apply(console, args);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    ReuseTabService.prototype.getMenu = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var /** @type {?} */ menus = this.menuService ? this.menuService.getPathByUrl(url) : [];
        if (!menus || menus.length === 0)
            return null;
        return menus.pop();
    };
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} comp
     * @return {?}
     */
    ReuseTabService.prototype.runHook = /**
     * @param {?} method
     * @param {?} url
     * @param {?} comp
     * @return {?}
     */
    function (method, url, comp) {
        if (comp.instance && comp.instance.hasOwnProperty(method))
            comp.instance[method]();
    };
    /**
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.hasInValidRoute = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return (!route.routeConfig ||
            route.routeConfig.loadChildren ||
            route.routeConfig.children);
    };
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     */
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.shouldDetach = /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     * @param {?} route
     * @return {?}
     */
    function (route) {
        if (this.hasInValidRoute(route))
            return false;
        this.di('#shouldDetach', this.can(route), this.getUrl(route));
        return this.can(route);
    };
    /**
     * 存储
     */
    /**
     * 存储
     * @param {?} _snapshot
     * @param {?} _handle
     * @return {?}
     */
    ReuseTabService.prototype.store = /**
     * 存储
     * @param {?} _snapshot
     * @param {?} _handle
     * @return {?}
     */
    function (_snapshot, _handle) {
        if (this.count >= this._max)
            this._cached.shift();
        var /** @type {?} */ url = this.getUrl(_snapshot);
        var /** @type {?} */ idx = this.index(url);
        var /** @type {?} */ item = {
            title: this.getTitle(url, _snapshot),
            closable: this.getClosable(url, _snapshot),
            url: url,
            _snapshot: _snapshot,
            _handle: _handle,
        };
        if (idx === -1) {
            this._cached.push(item);
        }
        else {
            this._cached[idx] = item;
        }
        this.removeUrlBuffer = null;
        this.di('#store', idx === -1 ? '[new]' : '[override]', url);
        if (_handle && _handle.componentRef) {
            this.runHook('_onReuseDestroy', url, _handle.componentRef);
        }
        this._cachedChange.next({ active: 'add', item: item, list: this._cached });
    };
    /**
     * 决定是否允许应用缓存数据
     */
    /**
     * 决定是否允许应用缓存数据
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.shouldAttach = /**
     * 决定是否允许应用缓存数据
     * @param {?} route
     * @return {?}
     */
    function (route) {
        if (this.hasInValidRoute(route))
            return false;
        var /** @type {?} */ url = this.getUrl(route);
        var /** @type {?} */ data = this.get(url);
        var /** @type {?} */ ret = !!(data && data._handle);
        this.di('#shouldAttach', ret, url);
        return ret;
    };
    /**
     * 提取复用数据
     */
    /**
     * 提取复用数据
     * @param {?} route
     * @return {?}
     */
    ReuseTabService.prototype.retrieve = /**
     * 提取复用数据
     * @param {?} route
     * @return {?}
     */
    function (route) {
        if (this.hasInValidRoute(route))
            return null;
        var /** @type {?} */ url = this.getUrl(route);
        var /** @type {?} */ data = this.get(url);
        var /** @type {?} */ ret = (data && data._handle) || null;
        this.di('#retrieve', url, ret);
        if (ret && ret.componentRef) {
            this.runHook('_onReuseInit', url, ret.componentRef);
        }
        return ret;
    };
    /**
     * 决定是否应该进行复用路由处理
     */
    /**
     * 决定是否应该进行复用路由处理
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    ReuseTabService.prototype.shouldReuseRoute = /**
     * 决定是否应该进行复用路由处理
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    function (future, curr) {
        var /** @type {?} */ ret = future.routeConfig === curr.routeConfig;
        if (!ret)
            return false;
        var /** @type {?} */ path = /** @type {?} */ (((future.routeConfig && future.routeConfig.path) ||
            ''));
        if (path.length > 0 && ~path.indexOf(':')) {
            var /** @type {?} */ futureUrl = this.getUrl(future);
            var /** @type {?} */ currUrl = this.getUrl(curr);
            ret = futureUrl === currUrl;
        }
        this.di('=====================');
        this.di('#shouldReuseRoute', ret, this.getUrl(curr) + "=>" + this.getUrl(future), future, curr);
        return ret;
    };
    /**
     * @return {?}
     */
    ReuseTabService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._cached = [];
        this._cachedChange.unsubscribe();
    };
    ReuseTabService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ReuseTabService.ctorParameters = function () { return [
        { type: Injector, },
        { type: MenuService, decorators: [{ type: Optional },] },
    ]; };
    return ReuseTabService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabContextMenuComponent = /** @class */ (function () {
    function ReuseTabContextMenuComponent() {
        this.close = new EventEmitter();
    }
    Object.defineProperty(ReuseTabContextMenuComponent.prototype, "i18n", {
        get: /**
         * @return {?}
         */
        function () {
            return this._i18n;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._i18n = Object.assign({
                close: '关闭标签',
                closeOther: '关闭其它标签',
                closeRight: '关闭右侧标签',
                clear: '清空',
            }, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabContextMenuComponent.prototype, "includeNonCloseable", {
        get: /**
         * @return {?}
         */
        function () {
            return this.event.ctrlKey;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} type
     * @param {?} item
     * @return {?}
     */
    ReuseTabContextMenuComponent.prototype.notify = /**
     * @param {?} type
     * @param {?} item
     * @return {?}
     */
    function (type, item) {
        this.close.next({
            type: type,
            item: this.item,
            includeNonCloseable: this.includeNonCloseable,
        });
    };
    /**
     * @return {?}
     */
    ReuseTabContextMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.includeNonCloseable)
            this.item.closable = true;
    };
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    ReuseTabContextMenuComponent.prototype.click = /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    function (e, type) {
        e.preventDefault();
        e.stopPropagation();
        if (type === 'close' && !this.item.closable)
            return;
        if (type === 'closeRight' && this.item.last)
            return;
        this.notify(type, this.item);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ReuseTabContextMenuComponent.prototype.closeMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type === 'click' && event.button === 2)
            return;
        this.notify(null, null);
    };
    ReuseTabContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'reuse-tab-context-menu',
                    template: "\n  <ul nz-menu>\n      <li nz-menu-item (click)=\"click($event, 'close')\" data-type=\"close\" [nzDisabled]=\"!item.closable\" [innerHTML]=\"i18n.close\"></li>\n      <li nz-menu-item (click)=\"click($event, 'closeOther')\" data-type=\"closeOther\" [innerHTML]=\"i18n.closeOther\"></li>\n      <li nz-menu-item (click)=\"click($event, 'closeRight')\" data-type=\"closeRight\" [nzDisabled]=\"item.last\" [innerHTML]=\"i18n.closeRight\"></li>\n      <li nz-menu-item (click)=\"click($event, 'clear')\" data-type=\"clear\" [innerHTML]=\"i18n.clear\"></li>\n  </ul>",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    ReuseTabContextMenuComponent.propDecorators = {
        "i18n": [{ type: Input },],
        "item": [{ type: Input },],
        "event": [{ type: Input },],
        "close": [{ type: Output },],
        "closeMenu": [{ type: HostListener, args: ['document:click', ['$event'],] }, { type: HostListener, args: ['document:contextmenu', ['$event'],] },],
    };
    return ReuseTabContextMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabContextService = /** @class */ (function () {
    function ReuseTabContextService(overlay$$1) {
        this.overlay = overlay$$1;
        this.show = new Subject$1();
        this.close = new Subject$1();
    }
    /**
     * @return {?}
     */
    ReuseTabContextService.prototype.remove = /**
     * @return {?}
     */
    function () {
        if (!this.ref)
            return;
        this.ref.detach();
        this.ref.dispose();
        this.ref = null;
    };
    /**
     * @param {?} context
     * @return {?}
     */
    ReuseTabContextService.prototype.open = /**
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        this.remove();
        var event = context.event, item = context.item;
        var /** @type {?} */ fakeElement = {
            getBoundingClientRect: function () {
                return ({
                    bottom: event.clientY,
                    height: 0,
                    left: event.clientX,
                    right: event.clientX,
                    top: event.clientY,
                    width: 0,
                });
            },
        };
        var /** @type {?} */ positionStrategy = this.overlay
            .position()
            .connectedTo({ nativeElement: fakeElement }, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
        this.ref = this.overlay.create({
            positionStrategy: positionStrategy,
            panelClass: 'reuse-tab-cm',
            scrollStrategy: this.overlay.scrollStrategies.close(),
        });
        var /** @type {?} */ comp = this.ref.attach(new ComponentPortal(ReuseTabContextMenuComponent));
        var /** @type {?} */ instance = comp.instance;
        instance.i18n = this.i18n;
        instance.item = __assign({}, item);
        instance.event = event;
        var /** @type {?} */ sub$ = new Subscription$1();
        sub$.add(instance.close.subscribe(function (res) {
            _this.close.next(res);
            _this.remove();
        }));
        comp.onDestroy(function () { return sub$.unsubscribe(); });
    };
    ReuseTabContextService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ReuseTabContextService.ctorParameters = function () { return [
        { type: Overlay, },
    ]; };
    return ReuseTabContextService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabComponent = /** @class */ (function () {
    // endregion
    function ReuseTabComponent(srv, cd, router$$1, route, el, render, doc, i18nSrv) {
        var _this = this;
        this.srv = srv;
        this.cd = cd;
        this.router = router$$1;
        this.route = route;
        this.el = el;
        this.render = render;
        this.doc = doc;
        this.i18nSrv = i18nSrv;
        this.list = [];
        this.pos = 0;
        /**
         * 设置匹配模式
         */
        this.mode = ReuseTabMatchMode.Menu;
        this._debug = false;
        this._allowClose = true;
        this._fixed = true;
        this._showCurrent = true;
        /**
         * 切换时回调
         */
        this.change = new EventEmitter();
        /**
         * 关闭回调
         */
        this.close = new EventEmitter();
        var /** @type {?} */ route$ = this.router.events.pipe(filter(function (evt) { return evt instanceof NavigationEnd; }));
        this.sub$ = /** @type {?} */ (combineLatest$1(this.srv.change, route$).subscribe(function (_a) {
            var res = _a[0];
            return _this.genList(res);
        }));
        if (this.i18nSrv)
            this.i18n$ = this.i18nSrv.change.subscribe(function () { return _this.genList(); });
    }
    Object.defineProperty(ReuseTabComponent.prototype, "debug", {
        get: /**
         * 是否Debug模式
         * @return {?}
         */
        function () {
            return this._debug;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._debug = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "max", {
        get: /**
         * 允许最多复用多少个页面
         * @return {?}
         */
        function () {
            return this._max;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._max = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "allowClose", {
        get: /**
         * 允许关闭
         * @return {?}
         */
        function () {
            return this._allowClose;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowClose = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "fixed", {
        get: /**
         * 是否固定
         * @return {?}
         */
        function () {
            return this._fixed;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fixed = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReuseTabComponent.prototype, "showCurrent", {
        get: /**
         * 总是显示当前页
         * @return {?}
         */
        function () {
            return this._showCurrent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showCurrent = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} title
     * @return {?}
     */
    ReuseTabComponent.prototype.genTit = /**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        return title.i18n && this.i18nSrv
            ? this.i18nSrv.fanyi(title.i18n)
            : title.text;
    };
    /**
     * @param {?=} notify
     * @return {?}
     */
    ReuseTabComponent.prototype.genList = /**
     * @param {?=} notify
     * @return {?}
     */
    function (notify) {
        var _this = this;
        var /** @type {?} */ isClosed = notify && notify.active === 'close';
        var /** @type {?} */ beforeClosePos = isClosed
            ? this.list.findIndex(function (w) { return w.url === notify["url"]; })
            : -1;
        var /** @type {?} */ ls = this.srv.items.map(function (item, index) {
            return /** @type {?} */ ({
                url: item.url,
                title: _this.genTit(item.title),
                closable: _this.allowClose && item.closable && _this.srv.count > 0,
                index: index,
                active: false,
                last: false,
            });
        });
        if (this.showCurrent) {
            var /** @type {?} */ snapshot = this.route.snapshot;
            var /** @type {?} */ url_1 = this.srv.getUrl(snapshot);
            var /** @type {?} */ idx = ls.findIndex(function (w) { return w.url === url_1; });
            // jump directly when the current exists in the list
            // or create a new current item and jump
            if (idx !== -1 || (isClosed && notify["url"] === url_1)) {
                this.pos = isClosed
                    ? idx >= beforeClosePos
                        ? this.pos - 1
                        : this.pos
                    : idx;
            }
            else {
                var /** @type {?} */ snapshotTrue = this.srv.getTruthRoute(snapshot);
                ls.push(/** @type {?} */ ({
                    url: url_1,
                    title: this.genTit(this.srv.getTitle(url_1, snapshotTrue)),
                    closable: this.allowClose &&
                        this.srv.count > 0 &&
                        this.srv.getClosable(url_1, snapshotTrue),
                    index: ls.length,
                    active: false,
                    last: false,
                }));
                this.pos = ls.length - 1;
            }
            // fix unabled close last item
            if (ls.length <= 1)
                ls[0].closable = false;
        }
        this.list = ls;
        if (ls.length && isClosed) {
            this.to(null, this.pos);
        }
        this.refStatus(false);
        this.visibility();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    ReuseTabComponent.prototype.visibility = /**
     * @return {?}
     */
    function () {
        if (this.showCurrent)
            return;
        this.render.setStyle(this.el.nativeElement, 'display', this.list.length === 0 ? 'none' : 'block');
    };
    // region: UI
    /**
     * @param {?} res
     * @return {?}
     */
    ReuseTabComponent.prototype.cmChange = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        switch (res.type) {
            case 'close':
                this._close(null, res.item.index, res.includeNonCloseable);
                break;
            case 'closeRight':
                this.srv.closeRight(res.item.url, res.includeNonCloseable);
                this.close.emit(null);
                break;
            case 'clear':
            case 'closeOther':
                this.srv.clear(res.includeNonCloseable);
                this.close.emit(null);
                break;
        }
    };
    /**
     * @param {?=} dc
     * @return {?}
     */
    ReuseTabComponent.prototype.refStatus = /**
     * @param {?=} dc
     * @return {?}
     */
    function (dc) {
        var _this = this;
        if (dc === void 0) { dc = true; }
        if (this.list.length) {
            this.list[this.list.length - 1].last = true;
            this.list.forEach(function (i, idx) { return (i.active = _this.pos === idx); });
        }
        if (dc)
            this.cd.detectChanges();
    };
    /**
     * @param {?} e
     * @param {?} index
     * @return {?}
     */
    ReuseTabComponent.prototype.to = /**
     * @param {?} e
     * @param {?} index
     * @return {?}
     */
    function (e, index) {
        var _this = this;
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }
        index = Math.max(0, Math.min(index, this.list.length - 1));
        var /** @type {?} */ item = this.list[index];
        this.router.navigateByUrl(item.url).then(function (res) {
            if (!res)
                return;
            _this.pos = index;
            _this.item = item;
            _this.refStatus();
            _this.change.emit(item);
        });
    };
    /**
     * @param {?} e
     * @param {?} idx
     * @param {?} includeNonCloseable
     * @return {?}
     */
    ReuseTabComponent.prototype._close = /**
     * @param {?} e
     * @param {?} idx
     * @param {?} includeNonCloseable
     * @return {?}
     */
    function (e, idx, includeNonCloseable) {
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }
        var /** @type {?} */ item = this.list[idx];
        this.srv.close(item.url, includeNonCloseable);
        this.close.emit(item);
        this.cd.detectChanges();
        return false;
    };
    // endregion
    /**
     * @return {?}
     */
    ReuseTabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClass();
        this.genList();
    };
    /**
     * @return {?}
     */
    ReuseTabComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ el = this.el.nativeElement;
        var /** @type {?} */ body = this.doc.querySelector('body');
        var /** @type {?} */ fixedCls = "fixed";
        var /** @type {?} */ bodyCls = "has-reuse-tab";
        if (this.fixed) {
            this.render.addClass(el, fixedCls);
            this.render.addClass(body, bodyCls);
        }
        else {
            this.render.removeClass(el, fixedCls);
            this.render.removeClass(body, bodyCls);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ReuseTabComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.max)
            this.srv.max = this.max;
        if (changes.excludes)
            this.srv.excludes = this.excludes;
        if (changes.mode)
            this.srv.mode = this.mode;
        this.srv.debug = this.debug;
        this.setClass();
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    ReuseTabComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.sub$.unsubscribe();
        if (this.i18n$)
            this.i18n$.unsubscribe();
    };
    ReuseTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'reuse-tab',
                    template: "<nz-tabset [nzSelectedIndex]=\"pos\" [nzAnimated]=\"false\" nzType=\"line\"> <nz-tab *ngFor=\"let i of list; let index = index\" [nzTitle]=\"titleTemplate\"> <ng-template #titleTemplate> <span [context-menu]=\"i\" (click)=\"to($event, index)\" class=\"name\">{{i.title}}</span> <i *ngIf=\"i.closable\" class=\"anticon anticon-close op\" (click)=\"_close($event, index, false)\"></i> </ng-template> </nz-tab> </nz-tabset> <reuse-tab-context [i18n]=\"i18n\" (change)=\"cmChange($event)\"></reuse-tab-context> ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    providers: [ReuseTabContextService],
                },] },
    ];
    /** @nocollapse */
    ReuseTabComponent.ctorParameters = function () { return [
        { type: ReuseTabService, },
        { type: ChangeDetectorRef, },
        { type: Router, },
        { type: ActivatedRoute, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
    ]; };
    ReuseTabComponent.propDecorators = {
        "mode": [{ type: Input },],
        "i18n": [{ type: Input },],
        "debug": [{ type: Input },],
        "max": [{ type: Input },],
        "excludes": [{ type: Input },],
        "allowClose": [{ type: Input },],
        "fixed": [{ type: Input },],
        "showCurrent": [{ type: Input },],
        "change": [{ type: Output },],
        "close": [{ type: Output },],
    };
    return ReuseTabComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabContextComponent = /** @class */ (function () {
    function ReuseTabContextComponent(srv) {
        var _this = this;
        this.srv = srv;
        this.sub$ = new Subscription$1();
        this.change = new EventEmitter();
        this.sub$.add(srv.show.subscribe(function (context) { return _this.srv.open(context); }));
        this.sub$.add(srv.close.subscribe(function (res) { return _this.change.emit(res); }));
    }
    Object.defineProperty(ReuseTabContextComponent.prototype, "i18n", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.srv.i18n = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReuseTabContextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.sub$.unsubscribe();
    };
    ReuseTabContextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'reuse-tab-context',
                    template: "",
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    ReuseTabContextComponent.ctorParameters = function () { return [
        { type: ReuseTabContextService, },
    ]; };
    ReuseTabContextComponent.propDecorators = {
        "i18n": [{ type: Input },],
        "change": [{ type: Output },],
    };
    return ReuseTabContextComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabContextDirective = /** @class */ (function () {
    function ReuseTabContextDirective(srv) {
        this.srv = srv;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ReuseTabContextDirective.prototype.onContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.srv.show.next({
            event: event,
            item: this.item,
        });
        event.preventDefault();
        event.stopPropagation();
    };
    ReuseTabContextDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[context-menu]',
                },] },
    ];
    /** @nocollapse */
    ReuseTabContextDirective.ctorParameters = function () { return [
        { type: ReuseTabContextService, },
    ]; };
    ReuseTabContextDirective.propDecorators = {
        "item": [{ type: Input, args: ['context-menu',] },],
        "onContextMenu": [{ type: HostListener, args: ['contextmenu', ['$event'],] },],
    };
    return ReuseTabContextDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$16 = [ReuseTabComponent];
var NOEXPORTS = [
    ReuseTabContextMenuComponent,
    ReuseTabContextComponent,
    ReuseTabContextDirective,
];
var AdReuseTabModule = /** @class */ (function () {
    function AdReuseTabModule() {
    }
    /**
     * @return {?}
     */
    AdReuseTabModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AdReuseTabModule,
            providers: [
                ReuseTabService
            ],
        };
    };
    AdReuseTabModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, RouterModule, NgZorroAntdModule, OverlayModule],
                    declarations: COMPONENTS$16.concat(NOEXPORTS),
                    entryComponents: [ReuseTabContextMenuComponent],
                    exports: COMPONENTS$16.slice(),
                },] },
    ];
    return AdReuseTabModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FullContentService = /** @class */ (function () {
    function FullContentService() {
        this._change = new BehaviorSubject$1(null);
    }
    /** 切换全屏工作区状态 */
    /**
     * 切换全屏工作区状态
     * @return {?}
     */
    FullContentService.prototype.toggle = /**
     * 切换全屏工作区状态
     * @return {?}
     */
    function () {
        this._change.next(true);
    };
    Object.defineProperty(FullContentService.prototype, "change", {
        get: /**
         * @return {?}
         */
        function () {
            return this._change.pipe(share());
        },
        enumerable: true,
        configurable: true
    });
    FullContentService.decorators = [
        { type: Injectable },
    ];
    return FullContentService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var cls = "ad-full-content-wrap";
var fsCls = "ad-full-content-fs";
var hideTitleCls = "ad-full-content-ht";
var FullContentComponent = /** @class */ (function () {
    // endregion
    function FullContentComponent(el, router$$1, cd, srv, doc) {
        this.el = el;
        this.router = router$$1;
        this.cd = cd;
        this.srv = srv;
        this.doc = doc;
        this.inited = false;
        this.id = "_full-content-" + Math.random()
            .toString(36)
            .substring(2);
        this._height = 0;
        this._hideTitle = true;
        this._padding = 24;
        this.fullscreenChange = new EventEmitter();
        this.scroll$ = null;
    }
    Object.defineProperty(FullContentComponent.prototype, "fullscreen", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fullscreen;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fullscreen = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "hideTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideTitle;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideTitle = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FullContentComponent.prototype, "padding", {
        get: /**
         * @return {?}
         */
        function () {
            return this._padding;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._padding = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FullContentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inited = true;
        this.bodyEl = this.doc.querySelector('body');
        this.bodyEl.classList.add(cls);
        (/** @type {?} */ (this.el.nativeElement)).id = this.id;
        this.update();
        this.installResizeEvent();
        this.srv$ = /** @type {?} */ (this.srv.change.subscribe(function (res) {
            if (res)
                _this.toggle();
        }));
        this.route$ = /** @type {?} */ (this.router.events
            .pipe(filter(function (e) {
            return e instanceof ActivationStart || e instanceof ActivationEnd;
        }), debounceTime(200))
            .subscribe(function (e) {
            if (!!document.querySelector('#' + _this.id)) {
                _this.bodyEl.classList.add(cls);
                _this.updateFsCls();
            }
            else {
                _this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
            }
        }));
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () { return _this.updateHeight(); });
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.updateFsCls = /**
     * @return {?}
     */
    function () {
        if (this.fullscreen) {
            this.bodyEl.classList.add(fsCls);
            if (this.hideTitle)
                this.bodyEl.classList.add(hideTitleCls);
        }
        else {
            this.bodyEl.classList.remove(fsCls);
            if (this.hideTitle)
                this.bodyEl.classList.remove(hideTitleCls);
        }
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.updateFsCls();
        this.fullscreenChange.emit(this.fullscreen);
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.updateHeight = /**
     * @return {?}
     */
    function () {
        this._height =
            this.bodyEl.getBoundingClientRect().height -
                (/** @type {?} */ (this.el.nativeElement)).getBoundingClientRect().top -
                this.padding;
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.fullscreen = !this.fullscreen;
        this.update();
        this.updateHeight();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FullContentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.inited)
            this.update();
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
        this.uninstallResizeEvent();
        this.srv$.unsubscribe();
        this.route$.unsubscribe();
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(function () { return _this.updateHeight(); }));
    };
    /**
     * @return {?}
     */
    FullContentComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        this.scroll$.unsubscribe();
    };
    FullContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'full-content',
                    template: "<ng-content></ng-content>",
                    host: { '[class.ad-full-content]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    // endregion
    /** @nocollapse */
    FullContentComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Router, },
        { type: ChangeDetectorRef, },
        { type: FullContentService, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    ]; };
    FullContentComponent.propDecorators = {
        "_height": [{ type: HostBinding, args: ['style.height.px',] },],
        "fullscreen": [{ type: Input },],
        "hideTitle": [{ type: Input },],
        "padding": [{ type: Input },],
        "fullscreenChange": [{ type: Output },],
    };
    return FullContentComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FullContentToggleDirective = /** @class */ (function () {
    function FullContentToggleDirective(parent) {
        this.parent = parent;
    }
    /**
     * @return {?}
     */
    FullContentToggleDirective.prototype._click = /**
     * @return {?}
     */
    function () {
        this.parent.toggle();
    };
    FullContentToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[full-toggle]',
                },] },
    ];
    /** @nocollapse */
    FullContentToggleDirective.ctorParameters = function () { return [
        { type: FullContentComponent, },
    ]; };
    FullContentToggleDirective.propDecorators = {
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return FullContentToggleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$17 = [FullContentComponent, FullContentToggleDirective];
var AdFullContentModule = /** @class */ (function () {
    function AdFullContentModule() {
    }
    /**
     * @return {?}
     */
    AdFullContentModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AdFullContentModule,
            providers: [FullContentService],
        };
    };
    AdFullContentModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$17.slice(),
                    exports: COMPONENTS$17.slice(),
                },] },
    ];
    return AdFullContentModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var XlsxDirective = /** @class */ (function () {
    function XlsxDirective(srv) {
        this.srv = srv;
    }
    /**
     * @return {?}
     */
    XlsxDirective.prototype._click = /**
     * @return {?}
     */
    function () {
        this.srv.export(this.data);
    };
    XlsxDirective.decorators = [
        { type: Directive, args: [{ selector: '[xlsx]' },] },
    ];
    /** @nocollapse */
    XlsxDirective.ctorParameters = function () { return [
        { type: XlsxService, },
    ]; };
    XlsxDirective.propDecorators = {
        "data": [{ type: Input, args: ['xlsx',] },],
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return XlsxDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$18 = [XlsxDirective];
var AdXlsxModule = /** @class */ (function () {
    function AdXlsxModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    AdXlsxModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: AdXlsxModule,
            providers: [XlsxService, { provide: DA_XLSX_CONFIG, useValue: config }],
        };
    };
    AdXlsxModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, DelonUtilModule],
                    declarations: COMPONENTS$18.slice(),
                    exports: COMPONENTS$18.slice(),
                },] },
    ];
    return AdXlsxModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DA_ZIP_CONFIG = new InjectionToken('DA_ZIP_CONFIG');
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ZipService = /** @class */ (function () {
    function ZipService(config, http$$1, lazy) {
        this.config = config;
        this.http = http$$1;
        this.lazy = lazy;
    }
    /**
     * @return {?}
     */
    ZipService.prototype.init = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ config = Object.assign({
            url: "//cdn.bootcss.com/jszip/3.1.5/jszip.min.js",
            utils: [],
        }, this.config);
        return this.lazy.load([config.url].concat(config.utils));
    };
    /**
     * @param {?} zip
     * @return {?}
     */
    ZipService.prototype.check = /**
     * @param {?} zip
     * @return {?}
     */
    function (zip) {
        if (!zip)
            throw new Error('get instance via `ZipService.create()`');
    };
    /** 解压 */
    /**
     * 解压
     * @param {?} fileOrUrl
     * @param {?=} options
     * @return {?}
     */
    ZipService.prototype.read = /**
     * 解压
     * @param {?} fileOrUrl
     * @param {?=} options
     * @return {?}
     */
    function (fileOrUrl, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this.http
                        .request('GET', fileOrUrl, { responseType: 'arraybuffer' })
                        .subscribe(function (res) {
                        JSZip.loadAsync(res, options).then(function (ret) { return resolve(ret); });
                    }, function (err) {
                        reject(err);
                    });
                    return;
                }
                // from file
                var /** @type {?} */ reader = new FileReader();
                reader.onload = function (e) {
                    JSZip.loadAsync(e.target.result, options).then(function (ret) { return resolve(ret); });
                };
                reader.readAsBinaryString(/** @type {?} */ (fileOrUrl));
            });
        });
    };
    /** 创建 Zip 实例，用于创建压缩文件 */
    /**
     * 创建 Zip 实例，用于创建压缩文件
     * @return {?}
     */
    ZipService.prototype.create = /**
     * 创建 Zip 实例，用于创建压缩文件
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.init().then(function () {
                var /** @type {?} */ zipFile = new JSZip();
                resolve(zipFile);
            });
        });
    };
    /**
     * 下载URL资源并写入 zip
     * @param zip Zip 实例
     * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`
     * @param url URL 地址
     */
    /**
     * 下载URL资源并写入 zip
     * @param {?} zip Zip 实例
     * @param {?} path Zip 路径，例如： `text.txt`、`txt/hi.txt`
     * @param {?} url URL 地址
     * @return {?}
     */
    ZipService.prototype.pushUrl = /**
     * 下载URL资源并写入 zip
     * @param {?} zip Zip 实例
     * @param {?} path Zip 路径，例如： `text.txt`、`txt/hi.txt`
     * @param {?} url URL 地址
     * @return {?}
     */
    function (zip, path, url) {
        var _this = this;
        this.check(zip);
        return new Promise(function (resolve, reject) {
            _this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(function (res) {
                zip.file(path, res);
                resolve();
            }, function (error) {
                reject({ url: url, error: error });
            });
        });
    };
    /**
     * 保存Zip并执行打开保存对话框
     *
     * @param zip zip 对象，务必通过 `create()` 构建
     * @param options 额外参数，
     */
    /**
     * 保存Zip并执行打开保存对话框
     *
     * @param {?} zip zip 对象，务必通过 `create()` 构建
     * @param {?=} options 额外参数，
     * @return {?}
     */
    ZipService.prototype.save = /**
     * 保存Zip并执行打开保存对话框
     *
     * @param {?} zip zip 对象，务必通过 `create()` 构建
     * @param {?=} options 额外参数，
     * @return {?}
     */
    function (zip, options) {
        this.check(zip);
        var /** @type {?} */ opt = Object.assign({}, options);
        return new Promise(function (resolve, reject) {
            zip
                .generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update)
                .then(function (data) {
                if (opt.callback)
                    opt.callback(data);
                saveAs(data, opt.filename || 'download.zip');
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    ZipService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ZipService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DA_ZIP_CONFIG,] },] },
        { type: HttpClient, },
        { type: LazyService, },
    ]; };
    return ZipService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdZipModule = /** @class */ (function () {
    function AdZipModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    AdZipModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: AdZipModule,
            providers: [ZipService, { provide: DA_ZIP_CONFIG, useValue: config }],
        };
    };
    AdZipModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, DelonUtilModule],
                },] },
    ];
    return AdZipModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @param {?=} rmb
 * @param {?=} options
 * @return {?}
 */
function numberToChinese(value, rmb, options) {
    if (rmb === void 0) { rmb = true; }
    options = Object.assign({
        minusSymbol: '负',
        validThrow: false,
    }, options);
    if (typeof value === 'number')
        value = value.toString();
    if (!/^-?\d+(\.\d+)?$/.test(value) && options.validThrow)
        throw new Error(value + " is invalid number type");
    var /** @type {?} */ integer, /** @type {?} */ decimal;
    _a = value.split('.'), integer = _a[0], decimal = _a[1];
    var /** @type {?} */ symbol = '';
    if (integer.startsWith('-')) {
        symbol = options.minusSymbol;
        integer = integer.substr(1);
    }
    if (/^-?\d+$/.test(value))
        decimal = null;
    integer = (+integer).toString();
    var /** @type {?} */ unit = {
        num: rmb
            ? ['', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖', '点']
            : ['', '一', '二', '三', '四', '五', '六', '七', '八', '九', '点'],
        radice: rmb
            ? [
                '',
                '拾',
                '佰',
                '仟',
                '万',
                '拾',
                '佰',
                '仟',
                '亿',
                '拾',
                '佰',
                '仟',
                '万亿',
                '拾',
                '佰',
                '仟',
                '兆',
                '拾',
                '佰',
                '仟',
            ]
            : [
                '',
                '十',
                '百',
                '千',
                '万',
                '十',
                '百',
                '千',
                '亿',
                '十',
                '百',
                '千',
                '万亿',
                '十',
                '百',
                '千',
                '兆',
                '十',
                '百',
                '千',
            ],
        dec: ['角', '分', '厘', '毫'],
    };
    if (rmb)
        value = (+value).toFixed(5).toString();
    var /** @type {?} */ integerRes = '';
    var /** @type {?} */ integerCount = integer.length;
    if (integer === '0' || integerCount === 0) {
        integerRes = '零';
    }
    else {
        var /** @type {?} */ cnDesc = '';
        for (var /** @type {?} */ i = 0; i < integerCount; i++) {
            var /** @type {?} */ n = +integer[i], /** @type {?} */
            j = integerCount - i - 1, /** @type {?} */
            isZero = i > 1 && n !== 0 && integer[i - 1] === '0', /** @type {?} */
            cnZero = isZero ? '零' : '', /** @type {?} */
            isEmpptyUnit = (n === 0 && j % 4 !== 0) || integer.substr(i - 3, 4) === '0000', /** @type {?} */
            descMark = cnDesc;
            var /** @type {?} */ cnNum = unit.num[n];
            cnDesc = isEmpptyUnit ? '' : unit.radice[j];
            // 第一位是一十
            if (i === 0 && cnNum === '一' && cnDesc === '十')
                cnNum = '';
            var /** @type {?} */ isChangeEr = n > 1 &&
                cnNum === '二' && // 去除首位
                // 去除首位
                ['', '十', '百'].indexOf(cnDesc) === -1 && // 不读两\两十\两百
                // 不读两\两十\两百
                descMark !== '十'; // 不读十两
            if (isChangeEr)
                cnNum = '两';
            integerRes += cnZero + cnNum + cnDesc;
        }
    }
    // 小数部分拼接
    var /** @type {?} */ decimalRes = '';
    var /** @type {?} */ decimalCount = decimal ? decimal.toString().length : 0;
    if (decimal === null) {
        decimalRes = rmb ? '整' : '';
    }
    else if (decimal === '0') {
        decimalRes = '零';
    }
    else {
        for (var /** @type {?} */ i = 0; i < decimalCount; i++) {
            if (rmb && i > unit.dec.length - 1)
                break;
            var /** @type {?} */ n = decimal[i], /** @type {?} */
            cnZero = n === '0' ? '零' : '', /** @type {?} */
            cnNum = unit.num[n], /** @type {?} */
            cnDesc = rmb ? unit.dec[i] : '';
            decimalRes += cnZero + cnNum + cnDesc;
        }
    }
    var /** @type {?} */ ret = symbol +
        (rmb
            ? integerRes + (decimalRes === '零' ? '元整' : "\u5143" + decimalRes)
            : integerRes + (decimalRes === '' ? '' : "\u70B9" + decimalRes));
    return ret;
    var _a;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NumberToChinesePipe = /** @class */ (function () {
    function NumberToChinesePipe() {
    }
    /**
     * @param {?} value
     * @param {?=} rmb
     * @param {?=} minusSymbol
     * @return {?}
     */
    NumberToChinesePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} rmb
     * @param {?=} minusSymbol
     * @return {?}
     */
    function (value, rmb, minusSymbol) {
        if (rmb === void 0) { rmb = true; }
        if (minusSymbol === void 0) { minusSymbol = '负'; }
        return numberToChinese(value, rmb, { minusSymbol: minusSymbol });
    };
    NumberToChinesePipe.decorators = [
        { type: Pipe, args: [{ name: 'n2c' },] },
    ];
    return NumberToChinesePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PIPES = [NumberToChinesePipe];
var AdNumberToChineseModule = /** @class */ (function () {
    function AdNumberToChineseModule() {
    }
    /**
     * @return {?}
     */
    AdNumberToChineseModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdNumberToChineseModule, providers: [] };
    };
    AdNumberToChineseModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: PIPES,
                    exports: PIPES,
                },] },
    ];
    return AdNumberToChineseModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdLodopConfig = /** @class */ (function () {
    function AdLodopConfig() {
    }
    AdLodopConfig.decorators = [
        { type: Injectable },
    ];
    return AdLodopConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LodopService = /** @class */ (function () {
    function LodopService(defCog, scriptSrv) {
        this.defCog = defCog;
        this.scriptSrv = scriptSrv;
        this.pending = false;
        this._lodop = null;
        this._init = new Subject$1();
        this._events = new Subject$1();
        this.printBuffer = [];
        this.cog = defCog;
    }
    Object.defineProperty(LodopService.prototype, "cog", {
        /**
         * 获取或重新设置配置
         *
         * **注：**重新设置会倒置重新加载脚本资源
         */
        get: /**
         * 获取或重新设置配置
         *
         * **注：**重新设置会倒置重新加载脚本资源
         * @return {?}
         */
        function () {
            return this._cog;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._cog = Object.assign({
                url: 'https://localhost:8443/CLodopfuncs.js',
                name: 'CLODOP',
                companyName: '',
                checkMaxCount: 100,
            }, this.defCog, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LodopService.prototype, "events", {
        /** 事件变更通知 */
        get: /**
         * 事件变更通知
         * @return {?}
         */
        function () {
            return this._events.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LodopService.prototype.check = /**
     * @return {?}
     */
    function () {
        if (!this._lodop)
            throw new Error("\u8BF7\u52A1\u5FC5\u5148\u8C03\u7528 lodop \u83B7\u53D6\u5BF9\u8C61");
    };
    /**
     * @return {?}
     */
    LodopService.prototype.request = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.pending = true;
        var /** @type {?} */ url = this.cog.url + "?name=" + this.cog.name;
        var /** @type {?} */ checkMaxCount = this.cog.checkMaxCount;
        var /** @type {?} */ onResolve = function (status, error) {
            _this._init.next({
                ok: status === 'ok',
                status: status,
                error: error,
                lodop: _this._lodop,
            });
        };
        var /** @type {?} */ checkStatus = function () {
            --checkMaxCount;
            if (_this._lodop.webskt && _this._lodop.webskt.readyState === 1) {
                onResolve('ok');
            }
            else {
                if (checkMaxCount < 0) {
                    onResolve('check-limit');
                    return;
                }
                setTimeout(function () { return checkStatus(); }, 100);
            }
        };
        this.scriptSrv.load(url).then(function (res) {
            if (res.length === 1 && res[0].status !== 'ok') {
                _this.pending = false;
                onResolve('script-load-error', res[0]);
                return;
            }
            _this._lodop =
                window.hasOwnProperty(_this.cog.name) &&
                    (/** @type {?} */ (window[_this.cog.name]));
            if (_this._lodop === null) {
                onResolve('load-variable-name-error', { name: _this.cog.name });
                return;
            }
            _this._lodop.SET_LICENSES(_this.cog.companyName, _this.cog.license, _this.cog.licenseA, _this.cog.licenseB);
            checkStatus();
        });
    };
    /** 重置 lodop 对象 */
    /**
     * 重置 lodop 对象
     * @return {?}
     */
    LodopService.prototype.reset = /**
     * 重置 lodop 对象
     * @return {?}
     */
    function () {
        this._lodop = null;
        this.pending = false;
        this.request();
    };
    Object.defineProperty(LodopService.prototype, "lodop", {
        /** 获取 lodop 对象 */
        get: /**
         * 获取 lodop 对象
         * @return {?}
         */
        function () {
            if (this._lodop)
                return of$1(/** @type {?} */ ({ ok: true, lodop: this._lodop }));
            if (this.pending)
                return this._init.asObservable();
            this.request();
            return this._init.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LodopService.prototype, "printer", {
        /** 获取打印机列表 */
        get: /**
         * 获取打印机列表
         * @return {?}
         */
        function () {
            this.check();
            var /** @type {?} */ ret = [];
            var /** @type {?} */ count = this._lodop.GET_PRINTER_COUNT();
            for (var /** @type {?} */ index = 0; index < count; index++) {
                ret.push(this._lodop.GET_PRINTER_NAME(index));
            }
            return ret;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 附加代码至 `lodop` 对象上，字符串类支持 `{{key}}` 的动态参数
     *
     * **注：** 代码是指打印设计所产生字符串数据
     *
     * @param code 代码
     * @param contextObj 动态参数上下文对象
     * @param parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     */
    /**
     * 附加代码至 `lodop` 对象上，字符串类支持 `{{key}}` 的动态参数
     *
     * **注：** 代码是指打印设计所产生字符串数据
     *
     * @param {?} code 代码
     * @param {?=} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    LodopService.prototype.attachCode = /**
     * 附加代码至 `lodop` 对象上，字符串类支持 `{{key}}` 的动态参数
     *
     * **注：** 代码是指打印设计所产生字符串数据
     *
     * @param {?} code 代码
     * @param {?=} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    function (code, contextObj, parser) {
        var _this = this;
        this.check();
        if (!parser)
            parser = /LODOP\.([^(]+)\(([^\n]+)\);/i;
        code.split('\n').forEach(function (line) {
            var /** @type {?} */ res = parser.exec(line.trim());
            if (!res)
                return;
            var /** @type {?} */ fn = _this._lodop[res[1]];
            if (fn) {
                var /** @type {?} */ arr = void 0;
                try {
                    var /** @type {?} */ fakeFn = new Function("return [" + res[2] + "]");
                    arr = /** @type {?} */ (fakeFn());
                }
                catch (_a) { }
                if (Array.isArray(arr) && contextObj) {
                    for (var /** @type {?} */ i = 0; i < arr.length; i++) {
                        if (typeof arr[i] === 'string') {
                            arr[i] = arr[i].replace(/{{(.*?)}}/g, function (match, key) { return contextObj[key.trim()] || ''; });
                        }
                    }
                }
                fn.apply(_this._lodop, arr);
            }
        });
    };
    /**
     * 打开打印设计关闭后自动返回代码
     *
     * **注：** 自动监听 `On_Return` 事件，运行后会移除
     */
    /**
     * 打开打印设计关闭后自动返回代码
     *
     * **注：** 自动监听 `On_Return` 事件，运行后会移除
     * @return {?}
     */
    LodopService.prototype.design = /**
     * 打开打印设计关闭后自动返回代码
     *
     * **注：** 自动监听 `On_Return` 事件，运行后会移除
     * @return {?}
     */
    function () {
        var _this = this;
        this.check();
        var /** @type {?} */ tid = this._lodop.PRINT_DESIGN();
        return new Promise(function (resolve) {
            _this._lodop.On_Return = function (taskID, value) {
                if (tid !== taskID)
                    return;
                _this._lodop.On_Return = null;
                resolve('' + value);
            };
        });
    };
    /**
     * @return {?}
     */
    LodopService.prototype.printDo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ data = this.printBuffer.shift();
        if (!data)
            return;
        this.attachCode(data.code, data.item, data.parser);
        var /** @type {?} */ tid = this._lodop.PRINT();
        this._lodop.On_Return = function (taskID, value) {
            if (tid !== taskID)
                return;
            _this._lodop.On_Return = null;
            _this._events.next(Object.assign(/** @type {?} */ ({
                ok: value === true,
                error: value === true ? null : value,
            }), data));
            _this.printDo();
        };
    };
    /**
     * 立即打印，一般用于批量套打
     *
     * @param code 代码
     * @param contextObj 动态参数上下文对象
     * @param parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     */
    /**
     * 立即打印，一般用于批量套打
     *
     * @param {?} code 代码
     * @param {?} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    LodopService.prototype.print = /**
     * 立即打印，一般用于批量套打
     *
     * @param {?} code 代码
     * @param {?} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    function (code, contextObj, parser) {
        this.check();
        if (contextObj) {
            (_a = this.printBuffer).push.apply(_a, (Array.isArray(contextObj) ? contextObj : [contextObj]).map(function (item) {
                return { code: code, parser: parser, item: item };
            }));
        }
        this.printDo();
        var _a;
    };
    /**
     * @return {?}
     */
    LodopService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._init.unsubscribe();
        this._events.unsubscribe();
    };
    LodopService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LodopService.ctorParameters = function () { return [
        { type: AdLodopConfig, },
        { type: LazyService, },
    ]; };
    return LodopService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdLodopModule = /** @class */ (function () {
    function AdLodopModule() {
    }
    /**
     * @return {?}
     */
    AdLodopModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: AdLodopModule,
            providers: [LodopService, AdLodopConfig],
        };
    };
    AdLodopModule.decorators = [
        { type: NgModule, args: [{
                    imports: [DelonUtilModule],
                },] },
    ];
    return AdLodopModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var QuickMenuComponent = /** @class */ (function () {
    // endregion
    function QuickMenuComponent(cd, el, render) {
        this.cd = cd;
        this.el = el;
        this.render = render;
        // region: fields
        this.icon = 'anticon anticon-question-circle-o';
        this.top = 120;
        this.width = 200;
        this.bgColor = '#fff';
        this.borderColor = '#ddd';
        this.show = false;
        this.ctrlStyle = {};
        this.initFlag = false;
    }
    /**
     * @return {?}
     */
    QuickMenuComponent.prototype._click = /**
     * @return {?}
     */
    function () {
        this.show = !this.show;
        this.setStyle();
    };
    /**
     * @return {?}
     */
    QuickMenuComponent.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        this.ctrlStyle = {
            'background-color': this.bgColor,
            'border-color': this.borderColor,
        };
        var /** @type {?} */ res = [
            "top:" + this.top + "px",
            "width:" + this.width + "px",
            "background-color:" + this.bgColor,
            "border-color:" + this.borderColor,
            "margin-right:-" + (this.show ? 0 : this.width) + "px",
        ];
        this.render.setAttribute(this.el.nativeElement, 'style', res.join(';'));
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    QuickMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.setStyle();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    QuickMenuComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.setStyle();
    };
    QuickMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'quick-menu',
                    template: "\n  <div class=\"ad-quick-menu__inner\">\n    <div class=\"ad-quick-menu__ctrl\" [ngStyle]=\"ctrlStyle\">\n      <i [ngClass]=\"icon\"></i>\n    </div>\n    <ng-content></ng-content>\n  </div>\n  ",
                    host: { '[class.ad-quick-menu]': 'true' },
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    QuickMenuComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    QuickMenuComponent.propDecorators = {
        "icon": [{ type: Input },],
        "top": [{ type: Input },],
        "width": [{ type: Input },],
        "bgColor": [{ type: Input },],
        "borderColor": [{ type: Input },],
        "_click": [{ type: HostListener, args: ['click',] },],
    };
    return QuickMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$19 = [QuickMenuComponent];
var AdQuickMenuModule = /** @class */ (function () {
    function AdQuickMenuModule() {
    }
    /**
     * @return {?}
     */
    AdQuickMenuModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdQuickMenuModule, providers: [] };
    };
    AdQuickMenuModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$19.slice(),
                    exports: COMPONENTS$19.slice(),
                },] },
    ];
    return AdQuickMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AdQRConfig = /** @class */ (function () {
    function AdQRConfig() {
        /**
         * 背景，默认：`white`
         */
        this.background = 'white';
        /**
         * 背景透明级别，范围：`0-1` 之间，默认：`1.0`
         */
        this.backgroundAlpha = 1.0;
        /**
         * 前景，默认：`black`
         */
        this.foreground = 'black';
        /**
         * 前景透明级别，范围：`0-1` 之间，默认：`1.0`
         */
        this.foregroundAlpha = 1.0;
        /**
         * 误差校正级别，默认：`L`
         */
        this.level = 'L';
        /**
         * 二维码输出图片MIME类型，默认：`image/png`
         */
        this.mime = 'image/png';
        /**
         * 内边距（单位：px），默认：`10`
         */
        this.padding = 10;
        /**
         * 大小（单位：px），默认：`220`
         */
        this.size = 220;
    }
    return AdQRConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var QRService = /** @class */ (function () {
    function QRService(cog) {
        /**
         * 背景透明级别，范围：`0-1` 之间
         */
        this.backgroundAlpha = 1.0;
        Object.assign(this, cog);
        this.qr = new QRious();
    }
    /**
     * 生成二维码，并返回Base64编码
     *
     * @param [value] 重新指定值
     */
    /**
     * 生成二维码，并返回Base64编码
     *
     * @param {?=} value
     * @return {?}
     */
    QRService.prototype.refresh = /**
     * 生成二维码，并返回Base64编码
     *
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        this.qr.set(typeof value === 'object' ? value : {
            background: this.background,
            backgroundAlpha: this.backgroundAlpha,
            foreground: this.foreground,
            foregroundAlpha: this.foregroundAlpha,
            level: this.level,
            padding: this.padding,
            size: this.size,
            value: value || this.value,
        });
        return this.dataURL;
    };
    Object.defineProperty(QRService.prototype, "dataURL", {
        /**
         * 返回当前二维码Base64编码
         */
        get: /**
         * 返回当前二维码Base64编码
         * @return {?}
         */
        function () {
            return this.qr.toDataURL();
        },
        enumerable: true,
        configurable: true
    });
    QRService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    QRService.ctorParameters = function () { return [
        { type: AdQRConfig, },
    ]; };
    return QRService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var QRComponent = /** @class */ (function () {
    // endregion
    function QRComponent(cog, srv, cd) {
        this.srv = srv;
        this.cd = cd;
        /**
         * 变更时回调
         */
        this.change = new EventEmitter();
        Object.assign(this, cog);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    QRComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.dataURL = this.srv.refresh({
            background: this.background,
            backgroundAlpha: this.backgroundAlpha,
            foreground: this.foreground,
            foregroundAlpha: this.foregroundAlpha,
            level: this.level,
            mime: this.mime,
            padding: this.padding,
            size: this.size,
            value: this.value
        });
        this.cd.detectChanges();
        this.change.emit(this.dataURL);
    };
    QRComponent.decorators = [
        { type: Component, args: [{
                    selector: 'qr',
                    template: "\n  <img src=\"{{dataURL}}\">\n  ",
                    preserveWhitespaces: false,
                    host: { '[class.ad-qr]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    QRComponent.ctorParameters = function () { return [
        { type: AdQRConfig, },
        { type: QRService, },
        { type: ChangeDetectorRef, },
    ]; };
    QRComponent.propDecorators = {
        "background": [{ type: Input },],
        "backgroundAlpha": [{ type: Input },],
        "foreground": [{ type: Input },],
        "foregroundAlpha": [{ type: Input },],
        "level": [{ type: Input },],
        "mime": [{ type: Input },],
        "padding": [{ type: Input },],
        "size": [{ type: HostBinding, args: ['style.height.px',] }, { type: HostBinding, args: ['style.width.px',] }, { type: Input },],
        "value": [{ type: Input },],
        "change": [{ type: Output },],
    };
    return QRComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$20 = [QRComponent];
var AdQRModule = /** @class */ (function () {
    function AdQRModule() {
    }
    /**
     * @return {?}
     */
    AdQRModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdQRModule, providers: [AdQRConfig, QRService] };
    };
    AdQRModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$20.slice(),
                    exports: COMPONENTS$20.slice(),
                },] },
    ];
    return AdQRModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2BarComponent = /** @class */ (function () {
    function G2BarComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._autoLabel = true;
        // endregion
        this._cls = true;
        this.autoHideXLabels = false;
        this.scroll$ = null;
        this.cd.detach();
    }
    Object.defineProperty(G2BarComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2BarComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2BarComponent.prototype, "autoLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoLabel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoLabel = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2BarComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // this.uninstall();
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ padding = Object.assign([], this.padding);
        if (padding.length <= 0)
            padding = [32, 0, this.autoHideXLabels ? 8 : 32, 40];
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - 22,
            legend: null,
            padding: padding,
        });
        chart.axis('x', !this.autoHideXLabels);
        chart.axis('y', {
            title: false,
            line: false,
            tickLine: false,
        });
        chart.source(this.data, {
            x: {
                type: 'cat',
            },
            y: {
                min: 0,
            },
        });
        chart.tooltip({
            showTitle: false,
        });
        chart
            .interval()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y,
            };
        });
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        }, 30);
        this.chart = chart;
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.installResizeEvent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2BarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.resize();
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstallResizeEvent();
        this.uninstall();
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.autoLabel || this.scroll$)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(function () { return _this.resize(); }));
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    /**
     * @return {?}
     */
    G2BarComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ canvasWidth = this.el.nativeElement.clientWidth;
        var /** @type {?} */ minWidth = this.data.length * 30;
        if (canvasWidth <= minWidth) {
            if (!this.autoHideXLabels) {
                this.autoHideXLabels = true;
                this.install();
                return;
            }
        }
        else if (this.autoHideXLabels) {
            this.autoHideXLabels = false;
            this.install();
            return;
        }
        if (!this.chart)
            this.install();
    };
    G2BarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-bar',
                    template: "\n  <ng-container *ngIf=\"_title; else _titleTpl\"><h4>{{_title}}</h4></ng-container>\n  <div #container></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2BarComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    G2BarComponent.propDecorators = {
        "title": [{ type: Input },],
        "color": [{ type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "padding": [{ type: Input },],
        "data": [{ type: Input },],
        "autoLabel": [{ type: Input },],
        "_cls": [{ type: HostBinding, args: ['class.g2-chart',] },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2BarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$21 = [G2BarComponent];
var AdG2BarModule = /** @class */ (function () {
    function AdG2BarModule() {
    }
    /**
     * @return {?}
     */
    AdG2BarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2BarModule, providers: [] };
    };
    AdG2BarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$21.slice(),
                    exports: COMPONENTS$21.slice(),
                },] },
    ];
    return AdG2BarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2CardComponent = /** @class */ (function () {
    function G2CardComponent() {
        this._bordered = false;
        this._avatar = '';
        this._title = '';
        this._action = '';
        this.total = '';
        this._height = 'auto';
        this._footer = '';
        this._loading = false;
    }
    Object.defineProperty(G2CardComponent.prototype, "bordered", {
        get: /**
         * 是否显示边框
         * @return {?}
         */
        function () {
            return this._bordered;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._bordered = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "avatar", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._avatar = null;
                this._avatarTpl = value;
            }
            else
                this._avatar = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "action", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._action = null;
                this._actionTpl = value;
            }
            else
                this._action = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "contentHeight", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orgHeight = value;
            this._height =
                typeof value === 'number' ? (this._height = value + "px") : value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "footer", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._footer = null;
                this._footerTpl = value;
            }
            else
                this._footer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2CardComponent.prototype, "loading", {
        get: /**
         * 是否显示Loading
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    G2CardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-card',
                    template: "\n  <nz-card [nzBodyStyle]=\"{padding: '20px 24px 8px 24px'}\" [nzBordered]=\"bordered\">\n    <nz-spin [nzSpinning]=\"loading\">\n      <div class=\"chart-card\">\n        <div class=\"chart-top\">\n          <div class=\"avatar\"><ng-container *ngIf=\"_avatar; else _avatarTpl\">{{ _avatar }}</ng-container></div>\n          <div class=\"meta-wrap\">\n            <div class=\"meta\">\n              <span class=\"title\" *ngIf=\"_title; else _titleTpl\">{{ _title }}</span>\n              <span class=\"action\" *ngIf=\"_action || _actionTpl\">\n                <ng-container *ngIf=\"_action; else _actionTpl\">{{ _action }}</ng-container>\n              </span>\n            </div>\n            <p *ngIf=\"total\" class=\"total\" [innerHTML]=\"total\"></p>\n          </div>\n        </div>\n        <div class=\"desc\" [ngStyle]=\"{'height':_height}\">\n          <div [ngClass]=\"{'fixed': !!_orgHeight }\">\n            <ng-content></ng-content>\n          </div>\n        </div>\n        <div class=\"footer\" *ngIf=\"_footer || _footerTpl\">\n          <ng-container *ngIf=\"_footer; else _footerTpl\">{{ _footer }}</ng-container>\n        </div>\n      </div>\n    </nz-spin>\n  </nz-card>",
                    host: { '[class.ad-g2-card]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2CardComponent.propDecorators = {
        "bordered": [{ type: Input },],
        "avatar": [{ type: Input },],
        "title": [{ type: Input },],
        "action": [{ type: Input },],
        "total": [{ type: Input },],
        "contentHeight": [{ type: Input },],
        "footer": [{ type: Input },],
        "loading": [{ type: Input },],
    };
    return G2CardComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$22 = [G2CardComponent];
var AdG2CardModule = /** @class */ (function () {
    function AdG2CardModule() {
    }
    /**
     * @return {?}
     */
    AdG2CardModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2CardModule, providers: [] };
    };
    AdG2CardModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$22.slice(),
                    exports: COMPONENTS$22.slice(),
                },] },
    ];
    return AdG2CardModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2ChartComponent = /** @class */ (function () {
    // endregion
    function G2ChartComponent(el) {
        this.el = el;
        this._resizeTime = 0;
        this.render = new EventEmitter();
        this.resize = new EventEmitter();
        this.destroy = new EventEmitter();
        this.resize$ = null;
    }
    Object.defineProperty(G2ChartComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2ChartComponent.prototype, "resizeTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resizeTime;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._resizeTime = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2ChartComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.innerHTML = '';
        this.render.emit(this.el);
    };
    /**
     * @return {?}
     */
    G2ChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () { return _this.renderChart(); }, 200);
    };
    /**
     * @return {?}
     */
    G2ChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy.emit(this.el);
        this.uninstallResizeEvent();
    };
    /**
     * @return {?}
     */
    G2ChartComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.resizeTime <= 0 || !this.resize$)
            return;
        if (this.resizeTime <= 200)
            this.resizeTime = 200;
        this.resize$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(this.resizeTime))
            .subscribe(function () { return _this.resize.emit(_this.el); }));
    };
    /**
     * @return {?}
     */
    G2ChartComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        if (this.resize$)
            this.resize$.unsubscribe();
    };
    G2ChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-chart',
                    template: "",
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2ChartComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    G2ChartComponent.propDecorators = {
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "resizeTime": [{ type: Input },],
        "render": [{ type: Output },],
        "resize": [{ type: Output },],
        "destroy": [{ type: Output },],
    };
    return G2ChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$23 = [G2ChartComponent];
var AdG2ChartModule = /** @class */ (function () {
    function AdG2ChartModule() {
    }
    /**
     * @return {?}
     */
    AdG2ChartModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2ChartModule, providers: [] };
    };
    AdG2ChartModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$23.slice(),
                    exports: COMPONENTS$23.slice(),
                },] },
    ];
    return AdG2ChartModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2GaugeComponent = /** @class */ (function () {
    function G2GaugeComponent(cd) {
        this.cd = cd;
        this.color = '#2F9CFF';
        this.bgColor = '#F0F2F5';
        this.initFlag = false;
        this.cd.detach();
    }
    Object.defineProperty(G2GaugeComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2GaugeComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.install();
    };
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.createData = /**
     * @return {?}
     */
    function () {
        return [{ name: this.title, value: +this.percent }];
    };
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.draw = /**
     * @return {?}
     */
    function () {
        if (!this.chart)
            return;
        this.chart.guide().clear();
        var /** @type {?} */ data = this.createData();
        // 绘制仪表盘背景
        this.chart.guide().arc({
            zIndex: 0,
            top: false,
            start: [0, 0.95],
            end: [100, 0.95],
            style: {
                // 底灰色
                stroke: this.bgColor,
                lineWidth: 12,
            },
        });
        // 绘制指标
        this.chart.guide().arc({
            zIndex: 1,
            start: [0, 0.95],
            end: [data[0].value, 0.95],
            style: {
                stroke: this.color,
                lineWidth: 12,
            },
        });
        this.chart.changeData(data);
    };
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ Shape = G2.Shape;
        // 自定义Shape 部分
        Shape.registerShape('point', 'pointer', {
            drawShape: /**
             * @param {?} cfg
             * @param {?} group
             * @return {?}
             */
            function (cfg, group) {
                var /** @type {?} */ point = cfg.points[0]; // 获取第一个标记点
                point = this.parsePoint(point);
                var /** @type {?} */ center = this.parsePoint({
                    // 获取极坐标系下画布中心点
                    x: 0,
                    y: 0,
                });
                // 绘制指针
                group.addShape('line', {
                    attrs: {
                        x1: center.x,
                        y1: center.y,
                        x2: point.x,
                        y2: point.y,
                        stroke: cfg.color,
                        lineWidth: 2,
                        lineCap: 'round',
                    },
                });
                var origin = cfg.origin;
                group.addShape('text', {
                    attrs: {
                        x: center.x,
                        y: center.y + 80,
                        text: origin._origin.value + "%",
                        textAlign: 'center',
                        fontSize: 24,
                        fill: 'rgba(0, 0, 0, 0.85)',
                    },
                });
                return group.addShape('circle', {
                    attrs: {
                        x: center.x,
                        y: center.y,
                        r: 9.75,
                        stroke: cfg.color,
                        lineWidth: 2,
                        fill: '#fff',
                    },
                });
            },
        });
        var /** @type {?} */ data = this.createData();
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: [10, 10, 30, 10],
        });
        chart.source(data);
        chart.coord('polar', {
            startAngle: -1.2 * Math.PI,
            endAngle: 0.2 * Math.PI,
        });
        chart.scale('value', {
            min: 0,
            max: 100,
            nice: true,
            tickCount: 6,
        });
        chart.axis('1', false);
        // 刻度值
        chart.axis('value', {
            zIndex: 2,
            line: null,
            label: {
                offset: -12,
                formatter: this.format,
            },
            tickLine: null,
            grid: null,
        });
        chart.legend(false);
        chart
            .point({
            generatePoints: true,
        })
            .position('value*1')
            .shape('pointer')
            .color(this.color)
            .active(false);
        this.chart = chart;
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.draw();
    };
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart)
            this.chart.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2GaugeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.draw();
    };
    /**
     * @return {?}
     */
    G2GaugeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2GaugeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-gauge',
                    template: "<div #container></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    G2GaugeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    G2GaugeComponent.propDecorators = {
        "title": [{ type: Input },],
        "height": [{ type: Input },],
        "color": [{ type: Input },],
        "bgColor": [{ type: Input },],
        "format": [{ type: Input },],
        "percent": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2GaugeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$24 = [G2GaugeComponent];
var AdG2GaugeModule = /** @class */ (function () {
    function AdG2GaugeModule() {
    }
    /**
     * @return {?}
     */
    AdG2GaugeModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2GaugeModule, providers: [] };
    };
    AdG2GaugeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$24.slice(),
                    exports: COMPONENTS$24.slice(),
                },] },
    ];
    return AdG2GaugeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2MiniAreaComponent = /** @class */ (function () {
    function G2MiniAreaComponent(cd) {
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.2)';
        this.borderColor = '#1890FF';
        this._borderWidth = 2;
        this._fit = true;
        this._line = false;
        this._animate = true;
        this.padding = [8, 8, 8, 8];
        this.cd.detach();
    }
    Object.defineProperty(G2MiniAreaComponent.prototype, "borderWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._borderWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._borderWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniAreaComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniAreaComponent.prototype, "fit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fit;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fit = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniAreaComponent.prototype, "line", {
        get: /**
         * @return {?}
         */
        function () {
            return this._line;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._line = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniAreaComponent.prototype, "animate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._animate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._animate = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2MiniAreaComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: this.fit,
            height: +this.height,
            animate: this.animate,
            padding: this.padding,
            legend: null,
        });
        if (!this.xAxis && !this.yAxis) {
            chart.axis(false);
        }
        if (this.xAxis) {
            chart.axis('x', this.xAxis);
        }
        else {
            chart.axis('x', false);
        }
        if (this.yAxis) {
            chart.axis('y', this.yAxis);
        }
        else {
            chart.axis('y', false);
        }
        var /** @type {?} */ dataConfig = {
            x: {
                type: 'cat',
                range: [0, 1],
                xAxis: this.xAxis,
            },
            y: {
                min: 0,
                yAxis: this.yAxis,
            },
        };
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: "0px 4px" },
        });
        var /** @type {?} */ view = chart.view();
        view.source(this.data, dataConfig);
        view
            .area()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y,
            };
        })
            .shape('smooth')
            .style({ fillOpacity: 1 });
        if (this.line) {
            var /** @type {?} */ view2 = chart.view();
            view2.source(this.data, dataConfig);
            view2
                .line()
                .position('x*y')
                .color(this.borderColor)
                .size(this.borderWidth)
                .shape('smooth');
            view2.tooltip(false);
        }
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    };
    /**
     * @return {?}
     */
    G2MiniAreaComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2MiniAreaComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.install();
    };
    /**
     * @return {?}
     */
    G2MiniAreaComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2MiniAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-mini-area',
                    template: "<div #container></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    G2MiniAreaComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    G2MiniAreaComponent.propDecorators = {
        "color": [{ type: Input },],
        "borderColor": [{ type: Input },],
        "borderWidth": [{ type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "fit": [{ type: Input },],
        "line": [{ type: Input },],
        "animate": [{ type: Input },],
        "xAxis": [{ type: Input },],
        "yAxis": [{ type: Input },],
        "padding": [{ type: Input },],
        "data": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2MiniAreaComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$25 = [G2MiniAreaComponent];
var AdG2MiniAreaModule = /** @class */ (function () {
    function AdG2MiniAreaModule() {
    }
    /**
     * @return {?}
     */
    AdG2MiniAreaModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2MiniAreaModule, providers: [] };
    };
    AdG2MiniAreaModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$25.slice(),
                    exports: COMPONENTS$25.slice(),
                },] },
    ];
    return AdG2MiniAreaModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2MiniBarComponent = /** @class */ (function () {
    function G2MiniBarComponent(cd) {
        this.cd = cd;
        // region: fields
        this.color = '#1890FF';
        this._height = 0;
        this._borderWidth = 5;
        this.padding = [8, 8, 8, 8];
        this.cd.detach();
    }
    Object.defineProperty(G2MiniBarComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniBarComponent.prototype, "borderWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._borderWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._borderWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
            legend: null,
        });
        chart.axis(false);
        chart.source(this.data, {
            x: {
                type: 'cat',
            },
            y: {
                min: 0,
            },
        });
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            crosshairs: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: "0px 4px" },
        });
        chart
            .interval()
            .position('x*y')
            .size(this.borderWidth)
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y,
            };
        });
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    };
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2MiniBarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.install();
    };
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2MiniBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-mini-bar',
                    template: "<div #container></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    G2MiniBarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    G2MiniBarComponent.propDecorators = {
        "color": [{ type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "borderWidth": [{ type: Input },],
        "padding": [{ type: Input },],
        "data": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2MiniBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$26 = [G2MiniBarComponent];
var AdG2MiniBarModule = /** @class */ (function () {
    function AdG2MiniBarModule() {
    }
    /**
     * @return {?}
     */
    AdG2MiniBarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2MiniBarModule, providers: [] };
    };
    AdG2MiniBarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: COMPONENTS$26.slice(),
                    exports: COMPONENTS$26.slice(),
                },] },
    ];
    return AdG2MiniBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2ProgressComponent = /** @class */ (function () {
    function G2ProgressComponent() {
        // region: fields
        this.color = '#1890FF';
    }
    Object.defineProperty(G2ProgressComponent.prototype, "target", {
        get: /**
         * @return {?}
         */
        function () {
            return this._target;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._target = Math.min(Math.max(coerceNumberProperty(value), 0), 100);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2ProgressComponent.prototype, "strokeWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._strokeWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._strokeWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2ProgressComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = Math.min(Math.max(coerceNumberProperty(value), 0), 100);
        },
        enumerable: true,
        configurable: true
    });
    G2ProgressComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-mini-progress',
                    template: "\n  <nz-tooltip [nzTitle]=\"'\u76EE\u6807\u503C: ' + target + '%'\">\n    <div nz-tooltip class=\"target\" [ngStyle]=\"{'left.%': target}\">\n      <span [ngStyle]=\"{'background-color': color}\"></span>\n      <span [ngStyle]=\"{'background-color': color}\"></span>\n    </div>\n  </nz-tooltip>\n  <div class=\"progress-wrap\">\n    <div class=\"progress\" [ngStyle]=\"{'background-color': color, 'width.%': percent, 'height.px':strokeWidth}\"></div>\n  </div>\n  ",
                    host: { '[class.ad-g2-progress]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2ProgressComponent.propDecorators = {
        "color": [{ type: Input },],
        "target": [{ type: Input },],
        "strokeWidth": [{ type: Input },],
        "percent": [{ type: Input },],
    };
    return G2ProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$27 = [G2ProgressComponent];
var AdG2MiniProgressModule = /** @class */ (function () {
    function AdG2MiniProgressModule() {
    }
    /**
     * @return {?}
     */
    AdG2MiniProgressModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2MiniProgressModule, providers: [] };
    };
    AdG2MiniProgressModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$27.slice(),
                    exports: COMPONENTS$27.slice(),
                },] },
    ];
    return AdG2MiniProgressModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2PieComponent = /** @class */ (function () {
    function G2PieComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        this._animate = true;
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._hasLegend = false;
        this._legendBlock = false;
        this.inner = 0.75;
        this.padding = [12, 0, 12, 0];
        this._tooltip = true;
        this._lineWidth = 0;
        this._select = true;
        this.initFlag = false;
        this.legendData = [];
        this.scroll$ = null;
    }
    Object.defineProperty(G2PieComponent.prototype, "animate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._animate;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._animate = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "hasLegend", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hasLegend;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hasLegend = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "legendBlock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._legendBlock;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._legendBlock = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "tooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltip;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tooltip = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "lineWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._lineWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._lineWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2PieComponent.prototype, "select", {
        get: /**
         * @return {?}
         */
        function () {
            return this._select;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._select = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2PieComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ formatColor;
        if (typeof this.percent !== 'undefined') {
            this.select = false;
            this.tooltip = false;
            formatColor = function (value) {
                return value === '占比' ? _this.color || 'rgba(24, 144, 255, 0.85)' : '#F0F2F5';
            };
            /* eslint no-param-reassign: */
            this.data = [
                {
                    x: '占比',
                    y: +this.percent,
                },
                {
                    x: '反比',
                    y: 100 - +this.percent,
                },
            ];
        }
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: this.padding,
            animate: this.animate,
        });
        if (!this.tooltip) {
            chart.tooltip(false);
        }
        else {
            chart.tooltip({
                showTitle: false,
                itemTpl: '<li><span style="background-color:{color};" class="g2-tooltip-marker"></span>{name}: {value} %</li>',
            });
        }
        chart.axis(false);
        chart.legend(false);
        var /** @type {?} */ dv = new DataSet.DataView();
        dv.source(this.data).transform({
            type: 'percent',
            field: 'y',
            dimension: 'x',
            as: 'percent',
        });
        chart.source(dv, {
            x: {
                type: 'cat',
                range: [0, 1],
            },
            y: {
                min: 0,
            },
        });
        chart.coord('theta', { innerRadius: this.inner });
        chart
            .intervalStack()
            .position('y')
            .style({ lineWidth: this.lineWidth, stroke: '#fff' })
            .tooltip('x*percent', function (item, percent) {
            return {
                name: item,
                value: percent,
            };
        })
            .color('x', this.percent ? formatColor : this.colors)
            .select(this.select);
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart
                .getAllGeoms()[0]
                ._attrs.dataArray.map(function (item) {
                var /** @type {?} */ origin = item[0]._origin;
                origin.color = item[0].color;
                origin.checked = true;
                origin.percent = (origin.percent * 100).toFixed(2);
                return origin;
            });
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @param {?} i
     * @return {?}
     */
    G2PieComponent.prototype.handleLegendClick = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            this.chart.filter('x', function (val, item) { return item.checked; });
            this.chart.repaint();
        }
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initFlag = true;
        setTimeout(function () { return _this.install(); }, 100);
        this.installResizeEvent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2PieComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.install();
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstallResizeEvent();
        this.uninstall();
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hasLegend)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(function () { return _this.resize(); }));
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    /**
     * @return {?}
     */
    G2PieComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        if (this.el.nativeElement.clientWidth <= 380) {
            if (!this.legendBlock) {
                this.legendBlock = true;
            }
        }
        else if (this.legendBlock) {
            this.legendBlock = false;
        }
        if (!this.chart)
            this.install();
    };
    G2PieComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-pie',
                    template: "\n  <div class=\"chart\">\n    <div #container></div>\n    <div *ngIf=\"subTitle || total\" class=\"total\">\n      <h4 *ngIf=\"subTitle\" class=\"pie-sub-title\" [innerHTML]=\"subTitle\"></h4>\n      <div *ngIf=\"total\" class=\"pie-stat\" [innerHTML]=\"total\"></div>\n    </div>\n  </div>\n  <ul *ngIf=\"hasLegend && legendData?.length\" class=\"legend\">\n    <li *ngFor=\"let item of legendData; let index = index\" (click)=\"handleLegendClick(index)\">\n      <span class=\"dot\" [ngStyle]=\"{'background-color': !item.checked ? '#aaa' : item.color}\"></span>\n      <span class=\"legend-title\">{{item.x}}</span>\n      <nz-divider nzType=\"vertical\"></nz-divider>\n      <span class=\"percent\">{{item.percent}}%</span>\n      <span class=\"value\" [innerHTML]=\"valueFormat ? valueFormat(item.y) : item.y\"></span>\n    </li>\n  </ul>",
                    host: { '[class.ad-pie]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2PieComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    G2PieComponent.propDecorators = {
        "animate": [{ type: Input },],
        "color": [{ type: Input },],
        "subTitle": [{ type: Input },],
        "total": [{ type: Input },],
        "height": [{ type: Input },],
        "hasLegend": [{ type: HostBinding, args: ['class.has-legend',] }, { type: Input },],
        "legendBlock": [{ type: HostBinding, args: ['class.legend-block',] }, { type: Input },],
        "inner": [{ type: Input },],
        "padding": [{ type: Input },],
        "percent": [{ type: Input },],
        "tooltip": [{ type: Input },],
        "lineWidth": [{ type: Input },],
        "select": [{ type: Input },],
        "data": [{ type: Input },],
        "valueFormat": [{ type: Input },],
        "colors": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2PieComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$28 = [G2PieComponent];
var AdG2PieModule = /** @class */ (function () {
    function AdG2PieModule() {
    }
    /**
     * @return {?}
     */
    AdG2PieModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2PieModule, providers: [] };
    };
    AdG2PieModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$28.slice(),
                    exports: COMPONENTS$28.slice(),
                },] },
    ];
    return AdG2PieModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2RadarComponent = /** @class */ (function () {
    function G2RadarComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this._height = 0;
        this.padding = [44, 30, 16, 30];
        this._hasLegend = true;
        this._tickCount = 4;
        this.data = [];
        this.initFlag = false;
        this.legendData = [];
    }
    Object.defineProperty(G2RadarComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "hasLegend", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hasLegend;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hasLegend = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2RadarComponent.prototype, "tickCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tickCount;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._tickCount = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} i
     * @return {?}
     */
    G2RadarComponent.prototype.handleLegendClick = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        var _this = this;
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            // const filterItem = this.legendData.filter(l => l.checked).map(l => l.name);
            this.chart.filter('name', function (val) { return _this.legendData.find(function (w) { return w.name === val; }).checked; });
            this.chart.repaint();
        }
    };
    /**
     * @return {?}
     */
    G2RadarComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ colors = [
            '#1890FF',
            '#FACC14',
            '#2FC25B',
            '#8543E0',
            '#F04864',
            '#13C2C2',
            '#fa8c16',
            '#a0d911',
        ];
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - (this.hasLegend ? 80 : 22),
            padding: this.padding,
        });
        chart.source(this.data, {
            value: {
                min: 0,
                tickCount: this.tickCount,
            },
        });
        chart.coord('polar');
        chart.legend(false);
        chart.axis('label', {
            line: null,
            labelOffset: 8,
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)',
                },
            },
            grid: {
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0],
                },
            },
        });
        chart.axis('value', {
            grid: {
                type: 'polygon',
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0],
                },
            },
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)',
                },
            },
        });
        chart
            .line()
            .position('label*value')
            .color('name', colors);
        chart
            .point()
            .position('label*value')
            .color('name', colors)
            .shape('circle')
            .size(3);
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart
                .getAllGeoms()[0]
                ._attrs.dataArray.map(function (item) {
                var /** @type {?} */ origin = item[0]._origin;
                var /** @type {?} */ result = {
                    name: origin.name,
                    color: item[0].color,
                    checked: true,
                    value: item.reduce(function (p, n) { return p + n._origin.value; }, 0),
                };
                return result;
            });
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    G2RadarComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @return {?}
     */
    G2RadarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.install();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2RadarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.install();
    };
    /**
     * @return {?}
     */
    G2RadarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2RadarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-radar',
                    template: "\n  <h4 *ngIf=\"_title; else _titleTpl\">{{ _title }}</h4>\n  <div #container></div>\n  <div nz-row class=\"legend\" *ngIf=\"hasLegend\">\n    <div nz-col [nzSpan]=\"24 / legendData.length\" *ngFor=\"let i of legendData; let idx = index\" (click)=\"handleLegendClick(idx)\">\n      <div class=\"legend-item\">\n        <p>\n          <i class=\"dot\" [ngStyle]=\"{'background-color': !i.checked ? '#aaa' : i.color}\"></i>\n          <span>{{i.name}}</span>\n        </p>\n        <h6>{{i.value}}</h6>\n      </div>\n    </div>\n  </div>",
                    host: { '[class.ad-radar]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    G2RadarComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    G2RadarComponent.propDecorators = {
        "title": [{ type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "padding": [{ type: Input },],
        "hasLegend": [{ type: Input },],
        "tickCount": [{ type: Input },],
        "data": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2RadarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$29 = [G2RadarComponent];
var AdG2RadarModule = /** @class */ (function () {
    function AdG2RadarModule() {
    }
    /**
     * @return {?}
     */
    AdG2RadarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2RadarModule, providers: [] };
    };
    AdG2RadarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$29.slice(),
                    exports: COMPONENTS$29.slice(),
                },] },
    ];
    return AdG2RadarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2TagCloudComponent = /** @class */ (function () {
    function G2TagCloudComponent(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this.padding = 0;
        this._autoLabel = true;
        this.initFlag = false;
    }
    Object.defineProperty(G2TagCloudComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2TagCloudComponent.prototype, "autoLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoLabel;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoLabel = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2TagCloudComponent.prototype.initTagCloud = /**
     * @return {?}
     */
    function () {
        // 给point注册一个词云的shape
        G2.Shape.registerShape('point', 'cloud', {
            drawShape: /**
             * @param {?} cfg
             * @param {?} container
             * @return {?}
             */
            function (cfg, container) {
                var /** @type {?} */ attrs = Object.assign({}, {
                    fillOpacity: cfg.opacity,
                    fontSize: cfg.origin._origin.size,
                    rotate: cfg.origin._origin.rotate,
                    text: cfg.origin._origin.text,
                    textAlign: 'center',
                    fontFamily: cfg.origin._origin.font,
                    fill: cfg.color,
                    textBaseline: 'Alphabetic',
                }, cfg.style);
                return container.addShape('text', {
                    attrs: Object.assign(attrs, {
                        x: cfg.x,
                        y: cfg.y,
                    }),
                });
            },
        });
    };
    /**
     * @return {?}
     */
    G2TagCloudComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ dv = new DataSet.View().source(this.data);
        var /** @type {?} */ range = dv.range('value');
        var /** @type {?} */ min = range[0];
        var /** @type {?} */ max = range[1];
        var /** @type {?} */ height = +this.height;
        var /** @type {?} */ width = +this.el.nativeElement.offsetWidth;
        dv.transform({
            type: 'tag-cloud',
            fields: ['name', 'value'],
            size: [width, height],
            padding: this.padding,
            timeInterval: 5000,
            rotate: /**
             * @return {?}
             */
            function () {
                var /** @type {?} */ random = ~~(Math.random() * 4) % 4;
                if (random === 2) {
                    random = 0;
                }
                return random * 90; // 0, 90, 270
            },
            fontSize: /**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (d.value) {
                    return (d.value - min) / (max - min) * (80 - 24) + 24;
                }
                return 0;
            },
        });
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            width: width,
            height: height,
            padding: this.padding,
            forceFit: true,
        });
        chart.source(dv, {
            x: { nice: false },
            y: { nice: false },
        });
        chart.legend(false);
        chart.axis(false);
        chart.tooltip({
            showTitle: false,
        });
        chart.coord().reflect();
        chart
            .point()
            .position('x*y')
            .color('text')
            .shape('cloud')
            .tooltip('value*category');
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    };
    /**
     * @return {?}
     */
    G2TagCloudComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @return {?}
     */
    G2TagCloudComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.initTagCloud();
        this.renderChart();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2TagCloudComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.renderChart();
    };
    /**
     * @return {?}
     */
    G2TagCloudComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2TagCloudComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-tag-cloud',
                    template: "<div #container [ngStyle]=\"{'height.px': height}\"></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    G2TagCloudComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    G2TagCloudComponent.propDecorators = {
        "color": [{ type: Input },],
        "height": [{ type: Input },],
        "padding": [{ type: Input },],
        "data": [{ type: Input },],
        "autoLabel": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2TagCloudComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$30 = [G2TagCloudComponent];
var AdG2TagCloudModule = /** @class */ (function () {
    function AdG2TagCloudModule() {
    }
    /**
     * @return {?}
     */
    AdG2TagCloudModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2TagCloudModule, providers: [] };
    };
    AdG2TagCloudModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$30.slice(),
                    exports: COMPONENTS$30.slice(),
                },] },
    ];
    return AdG2TagCloudModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2TimelineComponent = /** @class */ (function () {
    function G2TimelineComponent(cd) {
        this.cd = cd;
        // region: fields
        this._title = '';
        this.colorMap = { y1: '#1890FF', y2: '#2FC25B' };
        this._height = 400;
        this.padding = [60, 20, 40, 40];
        this._borderWidth = 2;
        this.initFlag = false;
        cd.detach();
    }
    Object.defineProperty(G2TimelineComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2TimelineComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2TimelineComponent.prototype, "borderWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._borderWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._borderWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2TimelineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.install();
    };
    /**
     * @return {?}
     */
    G2TimelineComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // clean
        this.sliderNode.nativeElement.innerHTML = '';
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ MAX = 8;
        var /** @type {?} */ begin = this.data.length > MAX ? (this.data.length - MAX) / 2 : 0;
        var /** @type {?} */ ds = new DataSet({
            state: {
                start: this.data[begin - 1].x,
                end: this.data[begin - 1 + MAX].x,
            },
        });
        var /** @type {?} */ dv = ds.createView().source(this.data);
        dv.source(this.data).transform({
            type: 'filter',
            callback: /**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                var /** @type {?} */ time = new Date(obj.x).getTime(); // !注意：时间格式，建议转换为时间戳进行比较
                return time >= ds.state.start && time <= ds.state.end;
            },
        });
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
        });
        chart.axis('x', { title: false });
        chart.axis('y1', {
            title: false,
        });
        chart.axis('y2', false);
        var /** @type {?} */ max;
        if (this.data[0] && this.data[0].y1 && this.data[0].y2) {
            max = Math.max(this.data.sort(function (a, b) { return b.y1 - a.y1; })[0].y1, this.data.sort(function (a, b) { return b.y2 - a.y2; })[0].y2);
        }
        chart.source(dv, {
            x: {
                type: 'timeCat',
                tickCount: MAX,
                mask: 'HH:mm',
                range: [0, 1],
            },
            y1: {
                alias: this.titleMap.y1,
                max: max,
                min: 0,
            },
            y2: {
                alias: this.titleMap.y2,
                max: max,
                min: 0,
            },
        });
        chart.legend({
            position: 'top',
            custom: true,
            clickable: false,
            items: [
                { value: this.titleMap.y1, fill: this.colorMap.y1 },
                { value: this.titleMap.y2, fill: this.colorMap.y2 },
            ],
        });
        chart
            .line()
            .position('x*y1')
            .color(this.colorMap.y1)
            .size(this.borderWidth);
        chart
            .line()
            .position('x*y2')
            .color(this.colorMap.y2)
            .size(this.borderWidth);
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        }, 60);
        var /** @type {?} */ sliderPadding = Object.assign([], this.padding);
        sliderPadding[0] = 0;
        var /** @type {?} */ slider = new Slider({
            container: this.sliderNode.nativeElement,
            height: 26,
            padding: sliderPadding,
            scales: {
                x: {
                    type: 'time',
                    tickCount: 16,
                    mask: 'HH:MM',
                },
            },
            backgroundChart: {
                type: 'line',
            },
            start: ds.state.start,
            end: ds.state.end,
            xAxis: 'x',
            yAxis: 'y1',
            data: this.data,
            onChange: /**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var startValue = _a.startValue, endValue = _a.endValue;
                ds.setState('start', startValue);
                ds.setState('end', endValue);
            },
        });
        slider.render();
        setTimeout(function () {
            slider.forceFit();
            slider.repaint();
        }, 60);
        this.chart = chart;
        this.slider = slider;
    };
    /**
     * @return {?}
     */
    G2TimelineComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart)
            this.chart.destroy();
        if (this.slider)
            this.slider.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2TimelineComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.install();
    };
    /**
     * @return {?}
     */
    G2TimelineComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2TimelineComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-timeline',
                    template: "\n  <ng-container *ngIf=\"_title; else _titleTpl\"><h4>{{_title}}</h4></ng-container>\n  <div #container></div>\n  <div #slider></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    G2TimelineComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    G2TimelineComponent.propDecorators = {
        "title": [{ type: Input },],
        "data": [{ type: Input },],
        "titleMap": [{ type: Input },],
        "colorMap": [{ type: Input },],
        "height": [{ type: Input },],
        "padding": [{ type: Input },],
        "borderWidth": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
        "sliderNode": [{ type: ViewChild, args: ['slider',] },],
    };
    return G2TimelineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$31 = [G2TimelineComponent];
var AdG2TimelineModule = /** @class */ (function () {
    function AdG2TimelineModule() {
    }
    /**
     * @return {?}
     */
    AdG2TimelineModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2TimelineModule, providers: [] };
    };
    AdG2TimelineModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$31.slice(),
                    exports: COMPONENTS$31.slice(),
                },] },
    ];
    return AdG2TimelineModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var G2WaterWaveComponent = /** @class */ (function () {
    function G2WaterWaveComponent(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = '#1890FF';
        this._height = 160;
        this.initFlag = false;
        this.autoHideXLabels = false;
        this.scroll$ = null;
    }
    Object.defineProperty(G2WaterWaveComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2WaterWaveComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2WaterWaveComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ data = this.percent / 100;
        if (!data)
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ self = this;
        var /** @type {?} */ canvas = /** @type {?} */ (this.node.nativeElement);
        var /** @type {?} */ ctx = canvas.getContext('2d');
        var /** @type {?} */ canvasWidth = canvas.width;
        var /** @type {?} */ canvasHeight = canvas.height;
        var /** @type {?} */ radius = canvasWidth / 2;
        var /** @type {?} */ lineWidth = 2;
        var /** @type {?} */ cR = radius - lineWidth;
        ctx.beginPath();
        ctx.lineWidth = lineWidth * 2;
        var /** @type {?} */ axisLength = canvasWidth - lineWidth;
        var /** @type {?} */ unit = axisLength / 8;
        var /** @type {?} */ range = 0.2; // 振幅
        var /** @type {?} */ currRange = range;
        var /** @type {?} */ xOffset = lineWidth;
        var /** @type {?} */ sp = 0; // 周期偏移量
        var /** @type {?} */ currData = 0;
        var /** @type {?} */ waveupsp = 0.005; // 水波上涨速度
        var /** @type {?} */ arcStack = [];
        var /** @type {?} */ bR = radius - lineWidth;
        var /** @type {?} */ circleOffset = -(Math.PI / 2);
        var /** @type {?} */ circleLock = true;
        for (var /** @type {?} */ i = circleOffset; i < circleOffset + 2 * Math.PI; i += 1 / (8 * Math.PI)) {
            arcStack.push([radius + bR * Math.cos(i), radius + bR * Math.sin(i)]);
        }
        var /** @type {?} */ cStartPoint = arcStack.shift();
        ctx.strokeStyle = this.color;
        ctx.moveTo(cStartPoint[0], cStartPoint[1]);
        /**
         * @return {?}
         */
        function drawSin() {
            ctx.beginPath();
            ctx.save();
            var /** @type {?} */ sinStack = [];
            for (var /** @type {?} */ i = xOffset; i <= xOffset + axisLength; i += 20 / axisLength) {
                var /** @type {?} */ x = sp + (xOffset + i) / unit;
                var /** @type {?} */ y = Math.sin(x) * currRange;
                var /** @type {?} */ dx = i;
                var /** @type {?} */ dy = 2 * cR * (1 - currData) + (radius - cR) - unit * y;
                ctx.lineTo(dx, dy);
                sinStack.push([dx, dy]);
            }
            var /** @type {?} */ startPoint = sinStack.shift();
            ctx.lineTo(xOffset + axisLength, canvasHeight);
            ctx.lineTo(xOffset, canvasHeight);
            ctx.lineTo(startPoint[0], startPoint[1]);
            var /** @type {?} */ gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#1890FF');
            ctx.fillStyle = gradient;
            ctx.fill();
            ctx.restore();
        }
        /**
         * @return {?}
         */
        function render() {
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            if (circleLock) {
                if (arcStack.length) {
                    var /** @type {?} */ temp = arcStack.shift();
                    ctx.lineTo(temp[0], temp[1]);
                    ctx.stroke();
                }
                else {
                    circleLock = false;
                    ctx.lineTo(cStartPoint[0], cStartPoint[1]);
                    ctx.stroke();
                    arcStack = null;
                    ctx.globalCompositeOperation = 'destination-over';
                    ctx.beginPath();
                    ctx.lineWidth = lineWidth;
                    ctx.arc(radius, radius, bR, 0, 2 * Math.PI, true);
                    ctx.beginPath();
                    ctx.save();
                    ctx.arc(radius, radius, radius - 3 * lineWidth, 0, 2 * Math.PI, true);
                    ctx.restore();
                    ctx.clip();
                    ctx.fillStyle = '#1890FF';
                }
            }
            else {
                if (data >= 0.85) {
                    if (currRange > range / 4) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                else if (data <= 0.1) {
                    if (currRange < range * 1.5) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                }
                else {
                    if (currRange <= range) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                    if (currRange >= range) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                if (data - currData > 0) {
                    currData += waveupsp;
                }
                if (data - currData < 0) {
                    currData -= waveupsp;
                }
                sp += 0.07;
                drawSin();
            }
            self.timer = requestAnimationFrame(render);
        }
        render();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} radio
     * @return {?}
     */
    G2WaterWaveComponent.prototype.updateRadio = /**
     * @param {?} radio
     * @return {?}
     */
    function (radio) {
        this.renderer.setStyle(this.el.nativeElement, 'transform', "scale(" + radio + ")");
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initFlag = true;
        this.cd.detectChanges();
        this.updateRadio(1);
        this.installResizeEvent();
        setTimeout(function () { return _this.resize(); }, 130);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag) {
            this.cd.detectChanges();
            this.renderChart();
        }
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.timer)
            cancelAnimationFrame(this.timer);
        this.uninstallResizeEvent();
        this.uninstall();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.scroll$)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe(function () { return _this.resize(); }));
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        var offsetWidth = this.el.nativeElement.parentNode.offsetWidth;
        this.updateRadio(offsetWidth < this.height ? offsetWidth / this.height : 1);
        this.renderChart();
    };
    G2WaterWaveComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-water-wave',
                    template: "\n  <div [ngStyle]=\"{'height.px': height, 'width.px': height, 'overflow': 'hidden'}\">\n    <canvas #container class=\"canvas-wrap\" width=\"{{height*2}}\" height=\"{{height*2}}\"></canvas>\n  </div>\n  <div class=\"text\" [ngStyle]=\"{'width.px': height}\">\n    <ng-container *ngIf=\"_title; else _titleTpl\"><span>{{_title}}</span></ng-container>\n    <h4>{{percent}}%</h4>\n  </div>",
                    host: { '[class.ad-water-wave]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2WaterWaveComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    G2WaterWaveComponent.propDecorators = {
        "title": [{ type: Input },],
        "color": [{ type: Input },],
        "height": [{ type: Input },],
        "percent": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2WaterWaveComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var COMPONENTS$32 = [G2WaterWaveComponent];
var AdG2WaterWaveModule = /** @class */ (function () {
    function AdG2WaterWaveModule() {
    }
    /**
     * @return {?}
     */
    AdG2WaterWaveModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AdG2WaterWaveModule, providers: [] };
    };
    AdG2WaterWaveModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, NgZorroAntdModule],
                    declarations: COMPONENTS$32.slice(),
                    exports: COMPONENTS$32.slice(),
                },] },
    ];
    return AdG2WaterWaveModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MODULES = [
    AdErrorCollectModule,
    AdFooterToolbarModule,
    AdSidebarNavModule,
    AdDownFileModule,
    AdImageModule,
    AdAvatarListModule,
    AdDescListModule,
    AdEllipsisModule,
    AdGlobalFooterModule,
    AdExceptionModule,
    AdNoticeIconModule,
    AdNumberInfoModule,
    AdPageHeaderModule,
    AdResultModule,
    AdStandardFormRowModule,
    AdTagSelectModule,
    AdTrendModule,
    AdCountDownModule,
    AdSimpleTableModule,
    AdReuseTabModule,
    AdFullContentModule,
    AdXlsxModule,
    AdZipModule,
    AdNumberToChineseModule,
    AdLodopModule,
    AdQuickMenuModule,
    AdQRModule,
    AdG2BarModule,
    AdG2CardModule,
    AdG2ChartModule,
    AdG2GaugeModule,
    AdG2MiniAreaModule,
    AdG2MiniBarModule,
    AdG2MiniProgressModule,
    AdG2PieModule,
    AdG2RadarModule,
    AdG2TagCloudModule,
    AdG2TimelineModule,
    AdG2WaterWaveModule,
];
var DelonABCRootModule = /** @class */ (function () {
    function DelonABCRootModule() {
    }
    DelonABCRootModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        AdErrorCollectModule.forRoot(),
                        AdFooterToolbarModule.forRoot(),
                        AdSidebarNavModule.forRoot(),
                        AdDownFileModule.forRoot(),
                        AdImageModule.forRoot(),
                        AdAvatarListModule.forRoot(),
                        AdDescListModule.forRoot(),
                        AdEllipsisModule.forRoot(),
                        AdExceptionModule.forRoot(),
                        AdExceptionModule.forRoot(),
                        AdNoticeIconModule.forRoot(),
                        AdNumberInfoModule.forRoot(),
                        AdPageHeaderModule.forRoot(),
                        AdResultModule.forRoot(),
                        AdStandardFormRowModule.forRoot(),
                        AdTagSelectModule.forRoot(),
                        AdTrendModule.forRoot(),
                        AdCountDownModule.forRoot(),
                        AdSimpleTableModule.forRoot(),
                        AdReuseTabModule.forRoot(),
                        AdFullContentModule.forRoot(),
                        AdXlsxModule.forRoot(),
                        AdZipModule.forRoot(),
                        AdNumberToChineseModule.forRoot(),
                        AdLodopModule.forRoot(),
                        AdQuickMenuModule.forRoot(),
                        AdQRModule.forRoot(),
                        // charts
                        AdG2BarModule.forRoot(),
                        AdG2CardModule.forRoot(),
                        AdG2ChartModule.forRoot(),
                        AdG2GaugeModule.forRoot(),
                        AdG2MiniAreaModule.forRoot(),
                        AdG2MiniBarModule.forRoot(),
                        AdG2MiniProgressModule.forRoot(),
                        AdG2PieModule.forRoot(),
                        AdG2RadarModule.forRoot(),
                        AdG2TagCloudModule.forRoot(),
                        AdG2TimelineModule.forRoot(),
                        AdG2WaterWaveModule.forRoot(),
                    ],
                    exports: MODULES,
                },] },
    ];
    return DelonABCRootModule;
}());
var DelonABCModule = /** @class */ (function () {
    function DelonABCModule() {
    }
    /**
     * @return {?}
     */
    DelonABCModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: DelonABCRootModule };
    };
    DelonABCModule.decorators = [
        { type: NgModule, args: [{ exports: MODULES },] },
    ];
    return DelonABCModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ReuseTabStrategy = /** @class */ (function () {
    function ReuseTabStrategy(srv) {
        this.srv = srv;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    ReuseTabStrategy.prototype.shouldDetach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.srv.shouldDetach(route);
    };
    /**
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    ReuseTabStrategy.prototype.store = /**
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    function (route, handle) {
        this.srv.store(route, handle);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    ReuseTabStrategy.prototype.shouldAttach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.srv.shouldAttach(route);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    ReuseTabStrategy.prototype.retrieve = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.srv.retrieve(route);
    };
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    ReuseTabStrategy.prototype.shouldReuseRoute = /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    function (future, curr) {
        return this.srv.shouldReuseRoute(future, curr);
    };
    return ReuseTabStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { DelonABCModule, ErrorCollectComponent, AdErrorCollectModule, FooterToolbarComponent, AdFooterToolbarModule, SidebarNavComponent, AdSidebarNavModule, DownFileDirective, AdDownFileModule, ImageDirective, AdImageConfig, AdImageModule, AvatarListItemComponent, AvatarListComponent, AdAvatarListModule, DescListComponent, DescListItemComponent, AdDescListModule, EllipsisComponent, AdEllipsisModule, GlobalFooterComponent, AdGlobalFooterModule, ExceptionComponent, AdExceptionModule, NoticeIconComponent, AdNoticeIconModule, NumberInfoComponent, AdNumberInfoModule, AdPageHeaderConfig, PageHeaderComponent, AdPageHeaderModule, ResultComponent, AdResultModule, StandardFormRowComponent, AdStandardFormRowModule, TagSelectComponent, AdTagSelectModule, TrendComponent, AdTrendModule, CountDownComponent, AdCountDownModule, SimpleTableComponent, SimpleTableRowDirective, AdSimpleTableConfig, AdSimpleTableModule, ReuseTabComponent, ReuseTabService, ReuseTabStrategy, AdReuseTabModule, ReuseTabMatchMode, FullContentComponent, FullContentService, FullContentToggleDirective, AdFullContentModule, XlsxService, XlsxDirective, AdXlsxModule, DA_XLSX_CONFIG, ZipService, AdZipModule, DA_ZIP_CONFIG, numberToChinese, NumberToChinesePipe, AdNumberToChineseModule, AdLodopConfig, LodopService, AdLodopModule, QuickMenuComponent, AdQuickMenuModule, QRService, QRComponent, AdQRConfig, AdQRModule, G2BarComponent, AdG2BarModule, G2CardComponent, AdG2CardModule, G2ChartComponent, AdG2ChartModule, G2GaugeComponent, AdG2GaugeModule, G2MiniAreaComponent, AdG2MiniAreaModule, G2MiniBarComponent, AdG2MiniBarModule, G2ProgressComponent, AdG2MiniProgressModule, G2PieComponent, AdG2PieModule, G2RadarComponent, AdG2RadarModule, G2TagCloudComponent, AdG2TagCloudModule, G2TimelineComponent, AdG2TimelineModule, G2WaterWaveComponent, AdG2WaterWaveModule, DelonABCRootModule as ɵa, AvatarListItemComponent as ɵp, AvatarListComponent as ɵo, AdAvatarListModule as ɵn, G2BarComponent as ɵdd, AdG2BarModule as ɵdc, G2CardComponent as ɵdf, AdG2CardModule as ɵde, G2ChartComponent as ɵdh, AdG2ChartModule as ɵdg, G2GaugeComponent as ɵdj, AdG2GaugeModule as ɵdi, G2MiniAreaComponent as ɵdl, AdG2MiniAreaModule as ɵdk, G2MiniBarComponent as ɵdn, AdG2MiniBarModule as ɵdm, G2ProgressComponent as ɵdp, AdG2MiniProgressModule as ɵdo, G2PieComponent as ɵdr, AdG2PieModule as ɵdq, G2RadarComponent as ɵdt, AdG2RadarModule as ɵds, G2TagCloudComponent as ɵdv, AdG2TagCloudModule as ɵdu, G2TimelineComponent as ɵdx, AdG2TimelineModule as ɵdw, G2WaterWaveComponent as ɵdz, AdG2WaterWaveModule as ɵdy, CountDownComponent as ɵbr, AdCountDownModule as ɵbq, DescListItemComponent as ɵs, DescListComponent as ɵr, AdDescListConfig as ɵt, AdDescListModule as ɵq, DownFileDirective as ɵj, AdDownFileModule as ɵi, EllipsisComponent as ɵv, AdEllipsisModule as ɵu, ErrorCollectComponent as ɵc, AdErrorCollectConfig as ɵd, AdErrorCollectModule as ɵb, ExceptionComponent as ɵz, AdExceptionModule as ɵy, FooterToolbarComponent as ɵf, AdFooterToolbarModule as ɵe, FullContentToggleDirective as ɵck, FullContentComponent as ɵci, AdFullContentModule as ɵch, FullContentService as ɵcj, GlobalFooterComponent as ɵx, AdGlobalFooterModule as ɵw, AdImageConfig as ɵm, ImageDirective as ɵl, AdImageModule as ɵk, AdLodopConfig as ɵcv, AdLodopModule as ɵct, LodopService as ɵcu, NoticeIconTabComponent as ɵbc, NoticeIconComponent as ɵbb, AdNoticeIconModule as ɵba, NumberInfoComponent as ɵbe, AdNumberInfoModule as ɵbd, AdNumberToChineseModule as ɵcr, NumberToChinesePipe as ɵcs, PageHeaderComponent as ɵbg, AdPageHeaderConfig as ɵbh, AdPageHeaderModule as ɵbf, QRComponent as ɵcz, AdQRConfig as ɵda, AdQRModule as ɵcy, QRService as ɵdb, QuickMenuComponent as ɵcx, AdQuickMenuModule as ɵcw, ResultComponent as ɵbj, AdResultModule as ɵbi, ReuseTabContextMenuComponent as ɵce, ReuseTabContextComponent as ɵcf, ReuseTabContextDirective as ɵcg, ReuseTabContextService as ɵcc, ReuseTabComponent as ɵcb, AdReuseTabModule as ɵca, ReuseTabService as ɵcd, SidebarNavComponent as ɵh, AdSidebarNavModule as ɵg, SimpleTableExport as ɵbu, SimpleTableRowDirective as ɵbz, SimpleTableComponent as ɵbt, AdSimpleTableConfig as ɵby, AdSimpleTableModule as ɵbs, StandardFormRowComponent as ɵbl, AdStandardFormRowModule as ɵbk, TagSelectComponent as ɵbn, AdTagSelectModule as ɵbm, TrendComponent as ɵbp, AdTrendModule as ɵbo, DA_XLSX_CONFIG as ɵbw, XlsxDirective as ɵcm, AdXlsxModule as ɵcl, XlsxService as ɵbv, DA_ZIP_CONFIG as ɵcp, AdZipModule as ɵcn, ZipService as ɵco };
//# sourceMappingURL=abc.js.map
