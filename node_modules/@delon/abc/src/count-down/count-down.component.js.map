{"version":3,"file":"count-down.component.js","sourceRoot":"","sources":["../../../../../packages/abc/count-down/count-down.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AACvE,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAC1C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;;;qBA6B/B,IAAI,YAAY,EAAE;sBACjB,IAAI,YAAY,EAAU;mBAC7B,IAAI,YAAY,EAAE;;0BAZ9B,sCAAM;;;;;;kBAAC,KAAoB;YAC7B,IAAI,CAAC,MAAM,GAAG;gBACZ,QAAQ,EAAE,gBAAgB;gBAC1B,QAAQ,EACN,OAAO,KAAK,KAAK,QAAQ;oBACvB,CAAC,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE;oBACzC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC;aACzB,CAAC;;;;;;;;IAOJ,mCAAM;;;IAAN;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;KACnB;;;;;IAED,oCAAO;;;;IAAP,UAAQ,IAAY;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACxB;;;;IAED,sCAAS;;;IAAT;QACE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;KACjB;;gBAzCF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,0KAKT;oBACD,mBAAmB,EAAE,KAAK;iBAC3B;;;;2BAEE,KAAK;2BAKL,KAAK;0BAWL,MAAM;2BACN,MAAM;wBACN,MAAM;;6BAjCT;;SAca,kBAAkB","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport * as format from 'date-fns/format';\r\nimport * as addSeconds from 'date-fns/add_seconds';\r\n\r\n@Component({\r\n  selector: 'count-down',\r\n  template: `\r\n    <countdown *ngIf=\"config\" [config]=\"config\"\r\n      (start)=\"_start()\"\r\n      (finished)=\"_finished()\"\r\n      (notify)=\"_notify($event)\"></countdown>\r\n  `,\r\n  preserveWhitespaces: false,\r\n})\r\nexport class CountDownComponent {\r\n  @Input() config: any;\r\n\r\n  /**\r\n   * 目标时间\r\n   */\r\n  @Input()\r\n  set target(value: number | Date) {\r\n    this.config = {\r\n      template: `$!h!:$!m!:$!s!`,\r\n      stopTime:\r\n        typeof value === 'number'\r\n          ? addSeconds(new Date(), value).valueOf()\r\n          : format(value, 'x'),\r\n    };\r\n  }\r\n\r\n  @Output() begin = new EventEmitter();\r\n  @Output() notify = new EventEmitter<number>();\r\n  @Output() end = new EventEmitter();\r\n\r\n  _start() {\r\n    this.begin.emit();\r\n  }\r\n\r\n  _notify(time: number) {\r\n    this.notify.emit(time);\r\n  }\r\n\r\n  _finished() {\r\n    this.end.emit();\r\n  }\r\n}\r\n"]}