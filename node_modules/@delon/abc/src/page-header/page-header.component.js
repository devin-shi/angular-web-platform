/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, TemplateRef, ContentChild, Inject, Optional, ViewChild, ElementRef, Renderer2, } from '@angular/core';
import { Router } from '@angular/router';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { MenuService, ALAIN_I18N_TOKEN } from '@delon/theme';
import { isEmpty } from '@delon/util';
import { AdPageHeaderConfig } from './page-header.config';
var PageHeaderComponent = /** @class */ (function () {
    // endregion
    function PageHeaderComponent(cog, renderer, route, menuSrv, i18nSrv) {
        this.renderer = renderer;
        this.route = route;
        this.menuSrv = menuSrv;
        this.i18nSrv = i18nSrv;
        this._autoBreadcrumb = true;
        this.paths = [];
        Object.assign(this, cog);
    }
    Object.defineProperty(PageHeaderComponent.prototype, "autoBreadcrumb", {
        get: /**
         * 自动生成导航，以当前路由从主菜单中定位
         * @return {?}
         */
        function () {
            return this._autoBreadcrumb;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoBreadcrumb = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.genBreadcrumb = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.breadcrumb || !this.autoBreadcrumb || !this.menuSrv)
            return;
        var /** @type {?} */ menus = this.menuSrv.getPathByUrl(this.route.url);
        if (menus.length <= 0)
            return;
        var /** @type {?} */ paths = [];
        menus.forEach(function (item) {
            if (typeof item.hideInBreadcrumb !== 'undefined' && item.hideInBreadcrumb)
                return;
            var /** @type {?} */ title = item.text;
            if (item.i18n && _this.i18nSrv)
                title = _this.i18nSrv.fanyi(item.i18n);
            paths.push({ title: title, link: item.link && [item.link] });
        });
        // add home
        if (this.home) {
            paths.splice(0, 0, {
                title: (this.home_i18n &&
                    this.i18nSrv &&
                    this.i18nSrv.fanyi(this.home_i18n)) ||
                    this.home,
                link: [this.home_link],
            });
        }
        this.paths = paths;
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.checkContent = /**
     * @return {?}
     */
    function () {
        if (isEmpty(this.conTpl.nativeElement)) {
            this.renderer.setAttribute(this.conTpl.nativeElement, 'hidden', '');
        }
        else {
            this.renderer.removeAttribute(this.conTpl.nativeElement, 'hidden');
        }
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.genBreadcrumb();
    };
    /**
     * @return {?}
     */
    PageHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.checkContent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PageHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.autoBreadcrumb && !changes.autoBreadcrumb.firstChange)
            this.genBreadcrumb();
    };
    PageHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'page-header',
                    template: "\n  <ng-container *ngIf=\"!breadcrumb; else breadcrumb\">\n    <nz-breadcrumb *ngIf=\"paths && paths.length > 0\">\n      <nz-breadcrumb-item *ngFor=\"let i of paths\">\n        <ng-container *ngIf=\"i.link\"><a [routerLink]=\"i.link\">{{i.title}}</a></ng-container>\n        <ng-container *ngIf=\"!i.link\">{{i.title}}</ng-container>\n      </nz-breadcrumb-item>\n    </nz-breadcrumb>\n  </ng-container>\n  <div class=\"detail\">\n    <div *ngIf=\"logo\" class=\"logo\"><ng-template [ngTemplateOutlet]=\"logo\"></ng-template></div>\n    <div class=\"main\">\n      <div class=\"row\">\n        <h1 *ngIf=\"title\" class=\"title\">{{title}}</h1>\n        <div *ngIf=\"action\" class=\"action\"><ng-template [ngTemplateOutlet]=\"action\"></ng-template></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"desc\" (cdkObserveContent)=\"checkContent()\" #conTpl><ng-content></ng-content><ng-template [ngTemplateOutlet]=\"content\"></ng-template></div>\n        <div *ngIf=\"extra\" class=\"extra\"><ng-template [ngTemplateOutlet]=\"extra\"></ng-template></div>\n      </div>\n    </div>\n  </div>\n  <ng-template [ngTemplateOutlet]=\"tab\"></ng-template>\n  ",
                    host: {
                        '[class.content__title]': 'true',
                        '[class.ad-page-header]': 'true',
                    },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    PageHeaderComponent.ctorParameters = function () { return [
        { type: AdPageHeaderConfig, },
        { type: Renderer2, },
        { type: Router, },
        { type: MenuService, decorators: [{ type: Optional },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
    ]; };
    PageHeaderComponent.propDecorators = {
        "conTpl": [{ type: ViewChild, args: ['conTpl',] },],
        "title": [{ type: Input },],
        "home": [{ type: Input },],
        "home_link": [{ type: Input },],
        "home_i18n": [{ type: Input },],
        "autoBreadcrumb": [{ type: Input },],
        "breadcrumb": [{ type: ContentChild, args: ['breadcrumb',] },],
        "logo": [{ type: ContentChild, args: ['logo',] },],
        "action": [{ type: ContentChild, args: ['action',] },],
        "content": [{ type: ContentChild, args: ['content',] },],
        "extra": [{ type: ContentChild, args: ['extra',] },],
        "tab": [{ type: ContentChild, args: ['tab',] },],
    };
    return PageHeaderComponent;
}());
export { PageHeaderComponent };
function PageHeaderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PageHeaderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PageHeaderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    PageHeaderComponent.propDecorators;
    /** @type {?} */
    PageHeaderComponent.prototype.conTpl;
    /** @type {?} */
    PageHeaderComponent.prototype.title;
    /** @type {?} */
    PageHeaderComponent.prototype.home;
    /** @type {?} */
    PageHeaderComponent.prototype.home_link;
    /** @type {?} */
    PageHeaderComponent.prototype.home_i18n;
    /** @type {?} */
    PageHeaderComponent.prototype._autoBreadcrumb;
    /** @type {?} */
    PageHeaderComponent.prototype.paths;
    /** @type {?} */
    PageHeaderComponent.prototype.breadcrumb;
    /** @type {?} */
    PageHeaderComponent.prototype.logo;
    /** @type {?} */
    PageHeaderComponent.prototype.action;
    /** @type {?} */
    PageHeaderComponent.prototype.content;
    /** @type {?} */
    PageHeaderComponent.prototype.extra;
    /** @type {?} */
    PageHeaderComponent.prototype.tab;
    /** @type {?} */
    PageHeaderComponent.prototype.renderer;
    /** @type {?} */
    PageHeaderComponent.prototype.route;
    /** @type {?} */
    PageHeaderComponent.prototype.menuSrv;
    /** @type {?} */
    PageHeaderComponent.prototype.i18nSrv;
}
//# sourceMappingURL=page-header.component.js.map