{"version":3,"file":"simple-table-export.js","sourceRoot":"","sources":["../../../../../packages/abc/simple-table/simple-table-export.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { deepGet } from '@delon/util';\nimport { XlsxService } from '../xlsx/xlsx.service';\nimport { SimpleTableColumn, STExportOptions } from './interface';\n\n@Injectable()\nexport class SimpleTableExport {\n  constructor(@Optional() private xlsxSrv: XlsxService) {}\n\n  private _stGet(item: any, col: SimpleTableColumn): any {\n    const ret: any = { t: 's', v: '' };\n\n    if (col.format) {\n      ret.v = col.format(item, col);\n    } else {\n      const val = deepGet(item, col.index as string[], '');\n      if (typeof val === 'undefined') {\n        ret.v = '';\n      } else {\n        ret.v = val;\n        switch (col.type) {\n          case 'currency':\n            ret.t = 'n';\n            break;\n          case 'date':\n            ret.t = 'd';\n            break;\n          case 'yn':\n            ret.v = ret === col.ynTruth ? col.ynYes || '是' : col.ynNo || '否';\n            break;\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  private genSheet(opt: STExportOptions): { [sheet: string]: any } {\n    const sheets: { [sheet: string]: any } = {};\n    const sheet = (sheets[opt.sheetname || 'Sheet1'] = {});\n    const colData = opt._c.filter(\n      w =>\n        w.exported !== false &&\n        w.index &&\n        (!w.buttons || w.buttons.length === 0),\n    );\n    const cc = colData.length,\n      dc = opt._d.length;\n    // region: column\n    for (let i = 0; i < cc; i++) {\n      sheet[`${String.fromCharCode(65 + i)}1`] = {\n        t: 's',\n        v: colData[i].title,\n      };\n    }\n    // endregion\n\n    // region: content\n    for (let i = 0; i < dc; i++) {\n      for (let j = 0; j < cc; j++) {\n        sheet[`${String.fromCharCode(65 + j)}${i + 2}`] = this._stGet(\n          opt._d[i],\n          colData[j],\n        );\n      }\n    }\n    // endregion\n\n    sheet['!ref'] = `A1:${String.fromCharCode(65 + cc - 1)}${dc + 1}`;\n\n    return sheets;\n  }\n\n  export(opt: STExportOptions) {\n    if (!this.xlsxSrv)\n      throw new Error(`muse be import 'AdXlsxModule' module, but got null`);\n    const sheets = this.genSheet(opt);\n    return this.xlsxSrv.export({\n      sheets,\n      filename: opt.filename,\n      callback: opt.callback,\n    });\n  }\n}\n"]}