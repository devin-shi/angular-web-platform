/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Inject, Input, Output, EventEmitter, Renderer2, ElementRef, TemplateRef, ContentChild, Optional, } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { DOCUMENT } from '@angular/platform-browser';
import { ACLService } from '@delon/acl';
import { tap, map, filter } from 'rxjs/operators';
import { of } from 'rxjs/observable/of';
import { coerceBooleanProperty, coerceNumberProperty, } from '@angular/cdk/coercion';
import { CNCurrencyPipe, DatePipe, YNPipe, ModalHelper, ALAIN_I18N_TOKEN, } from '@delon/theme';
import { deepGet, deepCopy } from '@delon/util';
import { AdSimpleTableConfig } from './simple-table.config';
import { SimpleTableExport } from './simple-table-export';
var SimpleTableComponent = /** @class */ (function () {
    // endregion
    function SimpleTableComponent(defConfig, http, el, renderer, exportSrv, acl, i18nSrv, modal, currenty, date, yn, number, doc) {
        this.defConfig = defConfig;
        this.http = http;
        this.el = el;
        this.renderer = renderer;
        this.exportSrv = exportSrv;
        this.acl = acl;
        this.i18nSrv = i18nSrv;
        this.modal = modal;
        this.currenty = currenty;
        this.date = date;
        this.yn = yn;
        this.number = number;
        this.doc = doc;
        this._inited = false;
        this._data = [];
        this._isAjax = false;
        this._isPagination = true;
        this._classMap = [];
        this._allChecked = false;
        this._indeterminate = false;
        this._columns = [];
        /**
         * 请求方法
         */
        this.reqMehtod = 'GET';
        this._reqReName = { pi: 'pi', ps: 'ps' };
        /**
         * 请求异常时回调
         */
        this.reqError = new EventEmitter();
        this._resReName = { total: ['total'], list: ['list'] };
        /**
         * 列描述
         */
        this.columns = [];
        this._ps = 10;
        this._pi = 1;
        this._total = 0;
        this._loading = false;
        this._loadingDelay = 0;
        this._bordered = false;
        /**
         * table大小
         */
        this.size = 'default';
        this._showSizeChanger = false;
        this._showQuickJumper = false;
        /**
         * 是否显示总数据量
         */
        this._totalTpl = "";
        this._isPageIndexReset = true;
        /**
         * 分页方向
         */
        this.pagePlacement = 'right';
        this._toTopInChange = true;
        this._toTopOffset = 100;
        this._multiSort = false;
        /**
         * 页码、每页数量变化时回调
         */
        this.change = new EventEmitter();
        /**
         * checkbox变化时回调，参数为当前所选清单
         */
        this.checkboxChange = new EventEmitter();
        /**
         * radio变化时回调，参数为当前所选
         */
        this.radioChange = new EventEmitter();
        /**
         * 排序回调
         */
        this.sortChange = new EventEmitter();
        /**
         * Filter回调
         */
        this.filterChange = new EventEmitter();
        // endregion
        // region: sort
        this._sortMap = {};
        this._sortColumn = null;
        Object.assign(this, deepCopy(defConfig));
    }
    Object.defineProperty(SimpleTableComponent.prototype, "reqReName", {
        get: /**
         * @return {?}
         */
        function () {
            return this._reqReName;
        },
        set: /**
         * 重命名请求参数 `pi`、`ps`
         * - `{ pi: 'Page' }` => `pi` 会被替换成 Page
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._reqReName = Object.assign(this._reqReName, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "resReName", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resReName;
        },
        set: /**
         * 重命名返回参数 `total`、`list`
         * - `{ total: 'Total' }` => Total 会被当作 `total`
         * @param {?} cur
         * @return {?}
         */
        function (cur) {
            var /** @type {?} */ ret = {};
            if (cur) {
                if (cur.list)
                    ret.list = Array.isArray(cur.list) ? cur.list : cur.list.split('.');
                else
                    ret.list = ['list'];
                if (cur.total)
                    ret.total = Array.isArray(cur.total) ? cur.total : cur.total.split('.');
                else
                    ret.total = ['total'];
            }
            else {
                ret = { total: ['total'], list: ['list'] };
            }
            this._resReName = ret;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "ps", {
        get: /**
         * 每页数量，当设置为 `0` 表示不分页，默认：`10`
         * @return {?}
         */
        function () {
            return this._ps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ps = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "pi", {
        get: /**
         * 当前页码
         * @return {?}
         */
        function () {
            return this._pi;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pi = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "total", {
        get: /**
         * 数据总量
         * @return {?}
         */
        function () {
            return this._total;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._total = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showPagination", {
        get: /**
         * 是否显示分页器
         * @return {?}
         */
        function () {
            return this._showPagination;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showPagination = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loading", {
        get: /**
         * 是否显示Loading
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "loadingDelay", {
        get: /**
         * 延迟显示加载效果的时间（防止闪烁）
         * @return {?}
         */
        function () {
            return this._loadingDelay;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loadingDelay = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "bordered", {
        get: /**
         * 是否显示边框
         * @return {?}
         */
        function () {
            return this._bordered;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._bordered = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showSizeChanger", {
        get: /**
         * 是否显示pagination中改变页数
         * @return {?}
         */
        function () {
            return this._showSizeChanger;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showSizeChanger = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showQuickJumper", {
        get: /**
         * 是否显示pagination中快速跳转
         * @return {?}
         */
        function () {
            return this._showQuickJumper;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showQuickJumper = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "showTotal", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (typeof value === 'string' && value.length) {
                this._totalTpl = value;
            }
            else if (coerceBooleanProperty(value)) {
                this._totalTpl = "\u5171 {{total}} \u6761";
            }
            else {
                this._totalTpl = '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} total
     * @param {?} range
     * @return {?}
     */
    SimpleTableComponent.prototype.renderTotal = /**
     * @param {?} total
     * @param {?} range
     * @return {?}
     */
    function (total, range) {
        return this._totalTpl
            ? this._totalTpl
                .replace('{{total}}', total)
                .replace('{{range[0]}}', range[0])
                .replace('{{range[1]}}', range[1])
            : '';
    };
    Object.defineProperty(SimpleTableComponent.prototype, "isPageIndexReset", {
        get: /**
         * 数据变更后是否保留在数据变更前的页码
         * @return {?}
         */
        function () {
            return this._isPageIndexReset;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isPageIndexReset = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopInChange", {
        get: /**
         * 切换分页时返回顶部
         * @return {?}
         */
        function () {
            return this._toTopInChange;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toTopInChange = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "toTopOffset", {
        get: /**
         * 返回顶部偏移值
         * @return {?}
         */
        function () {
            return this._toTopOffset;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toTopOffset = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleTableComponent.prototype, "multiSort", {
        get: /**
         * 是否多排序，建议后端支持时使用，默认：`false`
         * @return {?}
         */
        function () {
            return this._multiSort;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._multiSort = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} url
     * @return {?}
     */
    SimpleTableComponent.prototype.getAjaxData = /**
     * @param {?=} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        var /** @type {?} */ params = Object.assign((_a = {},
            _a[this.reqReName.pi] = this.pi,
            _a[this.reqReName.ps] = this.ps,
            _a), this.extraParams, this.getReqSortMap(), this.getReqFilterMap());
        return this.http
            .request(this.reqMehtod || 'GET', url || this._url, {
            params: params,
            body: this.reqBody,
            headers: this.reqHeaders,
        })
            .pipe(map(function (res) {
            // list
            var /** @type {?} */ ret = deepGet(res, /** @type {?} */ (_this.resReName.list), []);
            if (ret == null || !Array.isArray(ret))
                return [];
            // total
            var /** @type {?} */ retTotal = _this.resReName.total &&
                deepGet(res, /** @type {?} */ (_this.resReName.total), null);
            _this.total = retTotal == null ? _this.total || 0 : +retTotal;
            return /** @type {?} */ (ret);
        }));
        var _a;
    };
    /**
     * 根据页码重新加载数据
     *
     * @param pi 指定当前页码，默认：`1`
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 根据页码重新加载数据
     *
     * @param {?=} pi 指定当前页码，默认：`1`
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.load = /**
     * 根据页码重新加载数据
     *
     * @param {?=} pi 指定当前页码，默认：`1`
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (pi, extraParams) {
        if (pi === void 0) { pi = 1; }
        if (pi !== -1)
            this.pi = pi;
        this.extraParams = extraParams || null;
        this._change('pi');
    };
    /**
     * 重新刷新当前页
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 重新刷新当前页
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.reload = /**
     * 重新刷新当前页
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (extraParams) {
        this.load(-1, extraParams);
    };
    /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param extraParams 重新指定 `extraParams` 值
     */
    /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    SimpleTableComponent.prototype.reset = /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    function (extraParams) {
        this.load(1, extraParams);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    SimpleTableComponent.prototype._change = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (!this._inited)
            return;
        this._genAjax();
        this._genData();
        this._toTop();
        this.change.emit({
            type: type,
            pi: this.pi,
            ps: this.ps,
            total: this.total,
        });
    };
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    SimpleTableComponent.prototype._genAjax = /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    function (forceRefresh) {
        var _this = this;
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (!this._isAjax)
            return;
        this.loading = true;
        if (forceRefresh === true)
            this.pi = 1;
        this.getAjaxData().subscribe(function (res) { return _this._subscribeData(res); }, function (err) {
            _this.loading = false;
            _this.reqError.emit(err);
        });
    };
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    SimpleTableComponent.prototype._genData = /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this._isAjax)
            return;
        var /** @type {?} */ data = /** @type {?} */ (this.data) || [];
        // sort
        data = data.slice(0);
        var /** @type {?} */ sorterFn = this.getSorterFn();
        if (sorterFn) {
            data = this.recursiveSort(data, sorterFn);
        }
        // filter
        this._columns.filter(function (w) { return w.filters && w.filters.length; }).forEach(function (c) {
            var /** @type {?} */ values = c.filters.filter(function (w) { return w.checked; });
            if (values.length === 0)
                return;
            var /** @type {?} */ onFilter = c.filter;
            data = data.filter(function (record) {
                return values.some(function (v) { return onFilter(v, record); });
            });
        });
        if (forceRefresh) {
            if (this.isPageIndexReset) {
                this.pi = 1;
            }
            else {
                var /** @type {?} */ maxPageIndex = Math.ceil(data.length / this.ps);
                this.pi = !this.pi
                    ? 1
                    : this.pi > maxPageIndex
                        ? maxPageIndex
                        : this.pi;
            }
        }
        this.total = data.length;
        this._isPagination =
            typeof this.showPagination === 'undefined'
                ? this.ps > 0 && this.total > this.ps
                : this.showPagination;
        this._subscribeData(this._isPagination
            ? data.slice((this.pi - 1) * this.ps, this.pi * this.ps)
            : data);
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._toTop = /**
     * @return {?}
     */
    function () {
        if (!this.toTopInChange)
            return;
        if (this.scroll) {
            (/** @type {?} */ (this.el.nativeElement))
                .querySelector('.ant-table-body')
                .scrollTo(0, 0);
            return;
        }
        if (this.el.nativeElement.scrollIntoView)
            this.el.nativeElement.scrollIntoView();
        // todo: toTopOffset
        // fix header height
        this.doc.documentElement.scrollTop -= this.toTopOffset;
    };
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype._get = /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (item, col) {
        if (col.format)
            return col.format(item, col);
        var /** @type {?} */ value = deepGet(item, /** @type {?} */ (col.index), col.default);
        if (typeof value === 'undefined')
            return col.default;
        var /** @type {?} */ ret = value;
        switch (col.type) {
            case 'img':
                ret = "<img src=\"" + value + "\" class=\"img\">";
                break;
            case 'number':
                ret = this.number.transform(value, col.numberDigits);
                break;
            case 'currency':
                ret = this.currenty.transform(value);
                break;
            case 'date':
                ret = this.date.transform(value, col.dateFormat);
                break;
            case 'yn':
                ret = this.yn.transform(value === col.ynTruth, col.ynYes, col.ynNo);
                break;
        }
        return ret || col.default;
    };
    /**
     * @param {?} e
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype._click = /**
     * @param {?} e
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (e, item, col) {
        e.preventDefault();
        e.stopPropagation();
        if (col.click)
            col.click(item, this);
        return false;
    };
    /**
     * @param {?=} urlOrData
     * @return {?}
     */
    SimpleTableComponent.prototype.getDataObs = /**
     * @param {?=} urlOrData
     * @return {?}
     */
    function (urlOrData) {
        return urlOrData || Array.isArray(this.data)
            ? of((/** @type {?} */ (urlOrData)) || (/** @type {?} */ (this.data)))
            : (/** @type {?} */ (this.data));
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.processData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.data) {
            this._isAjax = false;
            this.data = [];
            return;
        }
        this._isAjax = false;
        if (typeof this.data === 'string') {
            this._url = /** @type {?} */ (this.data);
            this._isAjax = true;
            this._genAjax(true);
        }
        else if (Array.isArray(this.data)) {
            this._genData(true);
        }
        else {
            if (!this.data$) {
                this.data$ = /** @type {?} */ (this.data
                    .pipe(tap(function () { return (_this.loading = true); }))
                    .subscribe(function (res) {
                    _this.data = res;
                    _this._genData(true);
                }));
            }
        }
    };
    /**
     * @param {?} res
     * @return {?}
     */
    SimpleTableComponent.prototype._subscribeData = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        if (this.preDataChange)
            res = this.preDataChange(res);
        this.loading = false;
        this._data = res;
        this._refCheck();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getReqSortMap = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ ret = {};
        if (!this._sortOrder)
            return ret;
        if (this.multiSort) {
            Object.keys(this._sortMap).forEach(function (key) {
                var /** @type {?} */ item = _this._sortMap[key];
                if (item.v) {
                    ret[item.key] =
                        (item.column.sortReName || _this.sortReName || {})[item.v] || item.v;
                }
            });
        }
        else {
            var /** @type {?} */ mapData = this._sortMap[this._sortIndex];
            ret[mapData.key] =
                (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] ||
                    mapData.v;
        }
        return ret;
    };
    /**
     * @param {?} data
     * @param {?} sorterFn
     * @return {?}
     */
    SimpleTableComponent.prototype.recursiveSort = /**
     * @param {?} data
     * @param {?} sorterFn
     * @return {?}
     */
    function (data, sorterFn) {
        var _this = this;
        var /** @type {?} */ childrenColumnName = 'children';
        return data.sort(sorterFn).map(function (item) {
            return item[childrenColumnName]
                ? tslib_1.__assign({}, item, (_a = {}, _a[childrenColumnName] = _this.recursiveSort(item[childrenColumnName], sorterFn), _a)) : item;
            var _a;
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getSorterFn = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // _sortMap
        if (!this._sortOrder ||
            !this._sortColumn ||
            typeof this._sortColumn.sorter !== 'function') {
            return;
        }
        return function (a, b) {
            var /** @type {?} */ result = (/** @type {?} */ (((_this._sortColumn)).sorter))(a, b);
            if (result !== 0) {
                return _this._sortOrder === 'descend' ? -result : result;
            }
            return 0;
        };
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    SimpleTableComponent.prototype.sort = /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    function (index, value) {
        var _this = this;
        if (this._sortIndex === index && this._sortOrder === value)
            return;
        this._sortColumn = this._columns[index];
        this._sortOrder = value;
        this._sortIndex = index;
        if (this.multiSort) {
            this._sortMap[index].v = value;
        }
        else {
            Object.keys(this._sortMap).forEach(function (key) { return (_this._sortMap[key].v = +key === index ? value : null); });
        }
        this._genAjax(true);
        this._genData(true);
        this.sortChange.emit({
            value: value,
            map: this.getReqSortMap(),
            column: this._sortColumn,
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.getReqFilterMap = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ ret = {};
        this._columns.filter(function (w) { return w.filtered === true; }).forEach(function (col) {
            var /** @type {?} */ values = col.filters.filter(function (f) { return f.checked === true; });
            var /** @type {?} */ obj = {};
            if (col.filterReName)
                obj = col.filterReName(col.filters, col);
            else
                obj[col.filterKey || col["indexKey"]] = values.map(function (i) { return i.value; }).join(',');
            ret = Object.assign(ret, obj);
        });
        return ret;
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.handleFilter = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        col.filtered = col.filters.findIndex(function (w) { return w.checked; }) !== -1;
        this._genAjax(true);
        this._genData(true);
        this.filterChange.emit(col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.filterConfirm = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        this.handleFilter(col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    SimpleTableComponent.prototype.filterClear = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        col.filters.forEach(function (i) { return (i.checked = false); });
        this.handleFilter(col);
    };
    /**
     * @param {?} col
     * @param {?} item
     * @param {?} checked
     * @return {?}
     */
    SimpleTableComponent.prototype.filterRadio = /**
     * @param {?} col
     * @param {?} item
     * @param {?} checked
     * @return {?}
     */
    function (col, item, checked) {
        col.filters.forEach(function (i) { return (i.checked = false); });
        item.checked = checked;
    };
    // endregion
    // region: checkbox
    /** 清除所有 `checkbox` */
    /**
     * 清除所有 `checkbox`
     * @return {?}
     */
    SimpleTableComponent.prototype.clearCheck = /**
     * 清除所有 `checkbox`
     * @return {?}
     */
    function () {
        return this._checkAll(false);
    };
    /**
     * @param {?=} checked
     * @return {?}
     */
    SimpleTableComponent.prototype._checkAll = /**
     * @param {?=} checked
     * @return {?}
     */
    function (checked) {
        checked = typeof checked === 'undefined' ? this._allChecked : checked;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return (i.checked = checked); });
        return this._refCheck()._checkNotify();
    };
    /**
     * @param {?} i
     * @param {?} value
     * @return {?}
     */
    SimpleTableComponent.prototype._checkSelection = /**
     * @param {?} i
     * @param {?} value
     * @return {?}
     */
    function (i, value) {
        i.checked = value;
        return this._refCheck()._checkNotify();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._refCheck = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ validData = this._data.filter(function (w) { return !w.disabled; });
        var /** @type {?} */ checkedList = validData.filter(function (w) { return w.checked === true; });
        this._allChecked =
            checkedList.length > 0 && checkedList.length === validData.length;
        var /** @type {?} */ allUnChecked = validData.every(function (value) { return !value.checked; });
        this._indeterminate = !this._allChecked && !allUnChecked;
        return this;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    SimpleTableComponent.prototype._rowSelection = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (row.select)
            row.select(this._data);
        return this._refCheck()._checkNotify();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype._checkNotify = /**
     * @return {?}
     */
    function () {
        this.checkboxChange.emit(this._data.filter(function (w) { return !w.disabled && w.checked === true; }));
        return this;
    };
    // endregion
    // region: radio
    /** 清除所有 `radio` */
    /**
     * 清除所有 `radio`
     * @return {?}
     */
    SimpleTableComponent.prototype.clearRadio = /**
     * 清除所有 `radio`
     * @return {?}
     */
    function () {
        this._data.filter(function (w) { return w.checked; }).forEach(function (item) { return (item.checked = false); });
        this.radioChange.emit(null);
        return this;
    };
    /**
     * @param {?} idx
     * @param {?} checked
     * @param {?} item
     * @return {?}
     */
    SimpleTableComponent.prototype._refRadio = /**
     * @param {?} idx
     * @param {?} checked
     * @param {?} item
     * @return {?}
     */
    function (idx, checked, item) {
        if (item.disabled === true)
            return;
        this._data.filter(function (w) { return !w.disabled; }).forEach(function (i) { return (i.checked = false); });
        item.checked = checked;
        this.radioChange.emit(item);
        return this;
    };
    // endregion
    // region: buttons
    /**
     * @param {?} list
     * @return {?}
     */
    SimpleTableComponent.prototype.btnCoerceIf = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var item = list_1[_i];
            if (!item.if)
                item.if = function () { return true; };
            if (!item.children)
                item.children = [];
            if (item.children.length > 0)
                this.btnCoerceIf(item.children);
        }
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    SimpleTableComponent.prototype.btnClick = /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    function (record, btn) {
        var _this = this;
        if (btn.type === 'modal' || btn.type === 'static') {
            var /** @type {?} */ obj = {};
            obj[btn.paramName || this.defConfig.modalParamsName || 'record'] = record;
            (/** @type {?} */ (this.modal[btn.type === 'modal' ? 'open' : 'static']))(btn.component, Object.assign(obj, btn.params && btn.params(record)), btn.size, btn.modalOptions)
                .pipe(filter(function (w) { return typeof w !== 'undefined'; }))
                .subscribe(function (res) {
                if (btn.click)
                    _this.btnCallback(record, btn, res);
            });
            return;
        }
        this.btnCallback(record, btn);
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @param {?=} modal
     * @return {?}
     */
    SimpleTableComponent.prototype.btnCallback = /**
     * @param {?} record
     * @param {?} btn
     * @param {?=} modal
     * @return {?}
     */
    function (record, btn, modal) {
        if (!btn.click)
            return;
        if (typeof btn.click === 'string') {
            switch (btn.click) {
                case 'load':
                    this.load();
                    break;
                case 'reload':
                    this.reload();
                    break;
            }
        }
        else {
            btn.click(record, modal, this);
        }
    };
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    SimpleTableComponent.prototype.btnText = /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    function (record, btn) {
        if (btn.format)
            return btn.format(record, btn);
        return btn.text;
    };
    // endregion
    // region: fixed
    /**
     * @param {?} list
     * @return {?}
     */
    SimpleTableComponent.prototype.fixedCoerce = /**
     * @param {?} list
     * @return {?}
     */
    function (list) {
        list.forEach(function (item, idx) {
            if (item.fixed && item.width) {
                if (item.fixed === 'left') {
                    item["_left"] = idx === 0 ? '0px' : list[idx - 1].width;
                }
                else if (item.fixed === 'right') {
                    item["_right"] = idx === list.length - 1 ? '0px' : list[idx + 1].width;
                }
            }
        });
    };
    // endregion
    // region: export
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param opt 额外参数
     */
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param {?=} urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param {?=} opt 额外参数
     * @return {?}
     */
    SimpleTableComponent.prototype.export = /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param {?=} urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param {?=} opt 额外参数
     * @return {?}
     */
    function (urlOrData, opt) {
        var _this = this;
        ((!urlOrData && this._isAjax) ||
            (urlOrData && typeof urlOrData === 'string')
            ? this.getAjaxData(/** @type {?} */ (urlOrData))
            : this.getDataObs(urlOrData)).subscribe(function (res) {
            return _this.exportSrv.export(Object.assign({}, opt, /** @type {?} */ ({
                _d: res,
                _c: _this._columns,
            })));
        });
    };
    // endregion
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._inited = true;
        this.updateColumns();
        this.processData();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.setClass = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._classMap.forEach(function (cls) {
            return _this.renderer.removeClass(_this.el.nativeElement, cls);
        });
        this._classMap = [];
        if (this.pagePlacement)
            this._classMap.push('ad-st__p' + this.pagePlacement);
        this._classMap.forEach(function (cls) {
            return _this.renderer.addClass(_this.el.nativeElement, cls);
        });
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.updateColumns = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._columns = [];
        if (!this.columns || this.columns.length === 0)
            throw new Error("the columns property muse be define!");
        var /** @type {?} */ checkboxCount = 0;
        var /** @type {?} */ radioCount = 0;
        var /** @type {?} */ sortMap = {};
        var /** @type {?} */ idx = 0;
        var /** @type {?} */ newColumns = [];
        var /** @type {?} */ copyColumens = deepCopy(this.columns);
        for (var _i = 0, copyColumens_1 = copyColumens; _i < copyColumens_1.length; _i++) {
            var item = copyColumens_1[_i];
            if (this.acl && item.acl && !this.acl.can(item.acl))
                continue;
            if (item.index) {
                if (!Array.isArray(item.index))
                    item.index = item.index.split('.');
                item.indexKey = item.index.join('.');
            }
            // rowSelection
            if (!item.selections)
                item.selections = [];
            if (item.type === 'checkbox') {
                ++checkboxCount;
                if (!item.width)
                    item.width = (item.selections.length > 0 ? 60 : 50) + "px";
            }
            if (item.type === 'radio') {
                ++radioCount;
                item.selections = [];
                if (!item.width)
                    item.width = '50px';
            }
            if (!item.className) {
                item.className = {
                    // 'checkbox': 'text-center',
                    // 'radio': 'text-center',
                    number: 'text-right',
                    currency: 'text-right',
                    date: 'text-center',
                }[item.type];
            }
            if (item.type === 'yn' && typeof item.ynTruth === 'undefined')
                item.ynTruth = true;
            // sorter
            if (item.sorter) {
                sortMap[idx] = {
                    enabled: true,
                    v: item.sort,
                    key: item.sortKey || item.indexKey,
                    column: item,
                };
                if (item.sort && !this._sortColumn) {
                    this._sortColumn = item;
                    this._sortOrder = item.sort;
                    this._sortIndex = idx;
                }
            }
            else {
                sortMap[idx] = {
                    enabled: false,
                };
            }
            // filter
            if (!item.filter || !item.filters)
                item.filters = [];
            if (typeof item.filterMultiple === 'undefined')
                item.filterMultiple = true;
            if (!item.filterConfirmText)
                item.filterConfirmText = "\u786E\u8BA4";
            if (!item.filterClearText)
                item.filterClearText = "\u91CD\u7F6E";
            if (!item.filterIcon)
                item.filterIcon = "anticon anticon-filter";
            item.filtered = item.filters.findIndex(function (w) { return w.checked; }) !== -1;
            if (this.acl) {
                item.selections = item.selections.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
                item.filters = item.filters.filter(function (w) { return !w.acl || _this.acl.can(w.acl); });
            }
            // buttons
            var /** @type {?} */ buttons = [];
            if (item.buttons) {
                for (var _a = 0, _b = item.buttons; _a < _b.length; _a++) {
                    var btn = _b[_a];
                    if (this.acl && btn.acl && !this.acl.can(btn.acl))
                        continue;
                    if (btn.type === 'del' && typeof btn.pop === 'undefined')
                        btn.pop = true;
                    if (btn.pop === true) {
                        btn._type = 2;
                        if (typeof btn.popTitle === 'undefined')
                            btn.popTitle = "\u786E\u8BA4\u5220\u9664\u5417\uFF1F";
                    }
                    if (btn.children && btn.children.length > 0) {
                        btn._type = 3;
                    }
                    if (!btn._type)
                        btn._type = 1;
                    // i18n
                    if (btn.i18n && this.i18nSrv)
                        btn.text = this.i18nSrv.fanyi(btn.i18n);
                    buttons.push(btn);
                }
                if (buttons.length === 0)
                    continue;
                this.btnCoerceIf(buttons);
            }
            item.buttons = buttons;
            // i18n
            if (item.i18n && this.i18nSrv)
                item.title = this.i18nSrv.fanyi(item.i18n);
            ++idx;
            newColumns.push(item);
        }
        this.fixedCoerce(newColumns);
        this._columns = newColumns;
        if (checkboxCount > 1)
            throw new Error("just only one column checkbox");
        if (radioCount > 1)
            throw new Error("just only one column radio");
        this._sortMap = sortMap;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && this._inited)
            this.updateColumns();
        if (changes.data && this._inited)
            this.processData();
        this.setClass();
    };
    /**
     * @return {?}
     */
    SimpleTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.data$) {
            this.data$.unsubscribe();
            this.data$ = null;
        }
    };
    SimpleTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'simple-table',
                    template: "<nz-table [nzData]=\"_data\" [(nzPageIndex)]=\"pi\" (nzPageIndexChange)=\"_change('pi')\" [(nzPageSize)]=\"ps\" (nzPageSizeChange)=\"_change('ps')\" [nzTotal]=\"total\" [nzShowPagination]=\"_isPagination\" [nzFrontPagination]=\"false\" [nzBordered]=\"bordered\" [nzSize]=\"size\" [nzLoading]=\"loading\" [nzLoadingDelay]=\"loadingDelay\" [nzScroll]=\"scroll\" [nzTitle]=\"header\" [nzFooter]=\"footer\" [nzNoResult]=\"noResult\" [nzPageSizeOptions]=\"pageSizeOptions\" [nzShowQuickJumper]=\"showQuickJumper\" [nzShowSizeChanger]=\"showSizeChanger\" [nzShowTotal]=\"totalTpl\"> <thead> <tr> <th *ngIf=\"expand\" [nzShowExpand]=\"expand\"></th> <th *ngFor=\"let c of _columns; let index=index\" [nzWidth]=\"c.width\" [nzLeft]=\"c._left\" [nzRight]=\"c._right\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\" [attr.data-col]=\"c.indexKey\" [nzShowSort]=\"_sortMap[index].enabled\" [(nzSort)]=\"_sortMap[index].v\" (nzSortChange)=\"sort(index, $event)\"> <ng-template #renderTitle [ngTemplateOutlet]=\"c.__renderTitle\" [ngTemplateOutletContext]=\"{$implicit: c, index: index }\"></ng-template> <ng-container *ngIf=\"!c.__renderTitle; else renderTitle\"> <ng-container [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [(ngModel)]=\"_allChecked\" [nzIndeterminate]=\"_indeterminate\" (ngModelChange)=\"_checkAll()\"></label> <nz-dropdown *ngIf=\"c.selections.length\"> <span nz-dropdown> <i class=\"anticon anticon-down\"></i> </span> <ul nz-menu> <li nz-menu-item *ngFor=\"let rw of c.selections\" (click)=\"_rowSelection(rw)\" [innerHTML]=\"rw.text\"> </li> </ul> </nz-dropdown> </ng-container> <ng-container *ngSwitchDefault> <span [innerHTML]=\"c.title\"></span> </ng-container> </ng-container> <nz-dropdown *ngIf=\"c.filters.length > 0\" nzTrigger=\"click\" [hasFilterButton]=\"true\" [nzClickHide]=\"false\" [(nzVisible)]=\"c.filterVisible\"> <i class=\"{{c.filterIcon}}\" [ngClass]=\"{'ant-table-filter-selected': c.filtered}\" nz-dropdown></i> <ul nz-menu> <ng-container *ngIf=\"c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-checkbox [(ngModel)]=\"filter.checked\">{{filter.text}}</label> </li> </ng-container> <ng-container *ngIf=\"!c.filterMultiple\"> <li nz-menu-item *ngFor=\"let filter of c.filters\"> <label nz-radio [ngModel]=\"filter.checked\" (ngModelChange)=\"filterRadio(c, filter, $event)\">{{filter.text}}</label> </li> </ng-container> </ul> <div class=\"ant-table-filter-dropdown-btns\"> <a class=\"ant-table-filter-dropdown-link confirm\" (click)=\"c.filterVisible = false\"> <span (click)=\"filterConfirm(c)\">{{c.filterConfirmText}}</span> </a> <a class=\"ant-table-filter-dropdown-link clear\" (click)=\"c.filterVisible = false\"> <span (click)=\"filterClear(c)\">{{c.filterClearText}}</span> </a> </div> </nz-dropdown> </ng-container> </th> </tr> </thead> <tbody> <ng-container *ngFor=\"let i of _data; let index=index\"> <tr> <td *ngIf=\"expand\" [nzShowExpand]=\"expand\" [(nzExpand)]=\"i.expand\"></td> <td *ngFor=\"let c of _columns\" [nzLeft]=\"c._left\" [nzRight]=\"c._right\" [nzCheckbox]=\"c.type === 'checkbox'\" [ngClass]=\"c.className\" [attr.colspan]=\"c.colSpan\"> <ng-template #render [ngTemplateOutlet]=\"c.__render\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> <ng-container *ngIf=\"!c.__render; else render\"> <ng-container *ngIf=\"c.index\" [ngSwitch]=\"c.type\"> <ng-container *ngSwitchCase=\"'checkbox'\"> <label nz-checkbox [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_checkSelection(i, $event)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'radio'\"> <label nz-radio [nzDisabled]=\"i.disabled\" [ngModel]=\"i.checked\" (ngModelChange)=\"_refRadio(index, $event, i)\"></label> </ng-container> <ng-container *ngSwitchCase=\"'link'\"> <a (click)=\"_click($event, i, c)\" [innerHTML]=\"_get(i, c)\"></a> </ng-container> <span *ngSwitchDefault [innerHTML]=\"_get(i, c)\"></span> </ng-container> <ng-container *ngFor=\"let btn of c.buttons; let last=last\"> <ng-container *ngIf=\"btn.if(i, btn, c)\" [ngSwitch]=\"btn._type\"> <ng-container *ngSwitchCase=\"2\"> <nz-popconfirm [nzTitle]=\"btn.popTitle\" (nzOnConfirm)=\"btnClick(i, btn)\"> <a nz-popconfirm [innerHTML]=\"btnText(i, btn)\"></a> </nz-popconfirm> </ng-container> <ng-container *ngSwitchCase=\"3\"> <nz-dropdown> <a class=\"ant-dropdown-link\" nz-dropdown> {{btnText(i, btn)}} <i class=\"anticon anticon-down\"></i> </a> <ul nz-menu> <ng-container *ngFor=\"let subBtn of btn.children\"> <li nz-menu-item *ngIf=\"btn.if(i, btn, c)\"> <a (click)=\"btnClick(i, subBtn)\" [innerHTML]=\"btnText(i, subBtn)\"></a> </li> </ng-container> </ul> </nz-dropdown> </ng-container> <a *ngSwitchDefault (click)=\"btnClick(i, btn)\" [innerHTML]=\"btnText(i, btn)\"></a> <nz-divider *ngIf=\"!last\" nzType=\"vertical\"></nz-divider> </ng-container> </ng-container> <ng-template [ngIf]=\"!c.__renderExpanded\" [ngTemplateOutlet]=\"c.__renderExpanded\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> </ng-container> </td> </tr> <tr [nzExpand]=\"i.expand\"> <td></td> <td [attr.colspan]=\"_columns.length\"> <ng-template [ngTemplateOutlet]=\"expand\" [ngTemplateOutletContext]=\"{$implicit: i, index: index, column: c }\"></ng-template> </td> </tr> </ng-container> <ng-template [ngIf]=\"!loading\" [ngTemplateOutlet]=\"body\"></ng-template> </tbody> <ng-template #totalTpl let-range=\"range\" let-total>{{ renderTotal(total, range) }}</ng-template> </nz-table> ",
                    host: { '[class.ad-st]': 'true' },
                    providers: [SimpleTableExport, CNCurrencyPipe, DatePipe, YNPipe, DecimalPipe],
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    SimpleTableComponent.ctorParameters = function () { return [
        { type: AdSimpleTableConfig, },
        { type: HttpClient, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: SimpleTableExport, },
        { type: ACLService, decorators: [{ type: Optional },] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
        { type: ModalHelper, },
        { type: CNCurrencyPipe, },
        { type: DatePipe, },
        { type: YNPipe, },
        { type: DecimalPipe, },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    SimpleTableComponent.propDecorators = {
        "data": [{ type: Input },],
        "extraParams": [{ type: Input },],
        "reqMehtod": [{ type: Input },],
        "reqBody": [{ type: Input },],
        "reqHeaders": [{ type: Input },],
        "reqReName": [{ type: Input },],
        "reqError": [{ type: Output },],
        "resReName": [{ type: Input },],
        "columns": [{ type: Input },],
        "ps": [{ type: Input },],
        "pi": [{ type: Input },],
        "total": [{ type: Input },],
        "showPagination": [{ type: Input },],
        "loading": [{ type: Input },],
        "loadingDelay": [{ type: Input },],
        "bordered": [{ type: Input },],
        "size": [{ type: Input },],
        "scroll": [{ type: Input },],
        "showSizeChanger": [{ type: Input },],
        "pageSizeOptions": [{ type: Input },],
        "showQuickJumper": [{ type: Input },],
        "showTotal": [{ type: Input },],
        "isPageIndexReset": [{ type: Input },],
        "pagePlacement": [{ type: Input },],
        "toTopInChange": [{ type: Input },],
        "toTopOffset": [{ type: Input },],
        "sortReName": [{ type: Input },],
        "multiSort": [{ type: Input },],
        "preDataChange": [{ type: Input },],
        "header": [{ type: ContentChild, args: ['header',] },],
        "body": [{ type: ContentChild, args: ['body',] },],
        "footer": [{ type: ContentChild, args: ['footer',] },],
        "expand": [{ type: ContentChild, args: ['expand',] },],
        "noResult": [{ type: Input },],
        "widthConfig": [{ type: Input },],
        "change": [{ type: Output },],
        "checkboxChange": [{ type: Output },],
        "radioChange": [{ type: Output },],
        "sortChange": [{ type: Output },],
        "filterChange": [{ type: Output },],
    };
    return SimpleTableComponent;
}());
export { SimpleTableComponent };
function SimpleTableComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SimpleTableComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SimpleTableComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SimpleTableComponent.propDecorators;
    /** @type {?} */
    SimpleTableComponent.prototype.data$;
    /** @type {?} */
    SimpleTableComponent.prototype._inited;
    /** @type {?} */
    SimpleTableComponent.prototype._data;
    /** @type {?} */
    SimpleTableComponent.prototype._url;
    /** @type {?} */
    SimpleTableComponent.prototype._isAjax;
    /** @type {?} */
    SimpleTableComponent.prototype._isPagination;
    /** @type {?} */
    SimpleTableComponent.prototype._classMap;
    /** @type {?} */
    SimpleTableComponent.prototype._allChecked;
    /** @type {?} */
    SimpleTableComponent.prototype._indeterminate;
    /** @type {?} */
    SimpleTableComponent.prototype._columns;
    /**
     * 数据源
     * @type {?}
     */
    SimpleTableComponent.prototype.data;
    /**
     * 额外请求参数，默认自动附加 `pi`、`ps` 至URL
     * - `{ status: 'new' }` => `url?pi=1&ps=10&status=new`
     * @type {?}
     */
    SimpleTableComponent.prototype.extraParams;
    /**
     * 请求方法
     * @type {?}
     */
    SimpleTableComponent.prototype.reqMehtod;
    /**
     * 请求体 `body`
     * @type {?}
     */
    SimpleTableComponent.prototype.reqBody;
    /**
     * 请求体 `Header`
     * @type {?}
     */
    SimpleTableComponent.prototype.reqHeaders;
    /** @type {?} */
    SimpleTableComponent.prototype._reqReName;
    /**
     * 请求异常时回调
     * @type {?}
     */
    SimpleTableComponent.prototype.reqError;
    /** @type {?} */
    SimpleTableComponent.prototype._resReName;
    /**
     * 列描述
     * @type {?}
     */
    SimpleTableComponent.prototype.columns;
    /** @type {?} */
    SimpleTableComponent.prototype._ps;
    /** @type {?} */
    SimpleTableComponent.prototype._pi;
    /** @type {?} */
    SimpleTableComponent.prototype._total;
    /** @type {?} */
    SimpleTableComponent.prototype._showPagination;
    /** @type {?} */
    SimpleTableComponent.prototype._loading;
    /** @type {?} */
    SimpleTableComponent.prototype._loadingDelay;
    /** @type {?} */
    SimpleTableComponent.prototype._bordered;
    /**
     * table大小
     * @type {?}
     */
    SimpleTableComponent.prototype.size;
    /**
     * 纵向支持滚动，也可用于指定滚动区域的高度：`{ y: '300px', x: '300px' }`
     * @type {?}
     */
    SimpleTableComponent.prototype.scroll;
    /** @type {?} */
    SimpleTableComponent.prototype._showSizeChanger;
    /**
     * pagination中每页显示条目数下拉框值
     * @type {?}
     */
    SimpleTableComponent.prototype.pageSizeOptions;
    /** @type {?} */
    SimpleTableComponent.prototype._showQuickJumper;
    /**
     * 是否显示总数据量
     * @type {?}
     */
    SimpleTableComponent.prototype._totalTpl;
    /** @type {?} */
    SimpleTableComponent.prototype._isPageIndexReset;
    /**
     * 分页方向
     * @type {?}
     */
    SimpleTableComponent.prototype.pagePlacement;
    /** @type {?} */
    SimpleTableComponent.prototype._toTopInChange;
    /** @type {?} */
    SimpleTableComponent.prototype._toTopOffset;
    /**
     * 重命名排序值，`columns` 的重命名高于属性
     * @type {?}
     */
    SimpleTableComponent.prototype.sortReName;
    /** @type {?} */
    SimpleTableComponent.prototype._multiSort;
    /**
     * 数据处理前回调
     * @type {?}
     */
    SimpleTableComponent.prototype.preDataChange;
    /**
     * `header` 标题
     * @type {?}
     */
    SimpleTableComponent.prototype.header;
    /**
     * 额外 `body` 内容
     * @type {?}
     */
    SimpleTableComponent.prototype.body;
    /**
     * `footer` 底部
     * @type {?}
     */
    SimpleTableComponent.prototype.footer;
    /**
     * `expand` 可展开，当数据源中包括 `expand` 表示展开状态
     * @type {?}
     */
    SimpleTableComponent.prototype.expand;
    /** @type {?} */
    SimpleTableComponent.prototype.noResult;
    /** @type {?} */
    SimpleTableComponent.prototype.widthConfig;
    /**
     * 页码、每页数量变化时回调
     * @type {?}
     */
    SimpleTableComponent.prototype.change;
    /**
     * checkbox变化时回调，参数为当前所选清单
     * @type {?}
     */
    SimpleTableComponent.prototype.checkboxChange;
    /**
     * radio变化时回调，参数为当前所选
     * @type {?}
     */
    SimpleTableComponent.prototype.radioChange;
    /**
     * 排序回调
     * @type {?}
     */
    SimpleTableComponent.prototype.sortChange;
    /**
     * Filter回调
     * @type {?}
     */
    SimpleTableComponent.prototype.filterChange;
    /** @type {?} */
    SimpleTableComponent.prototype._sortMap;
    /** @type {?} */
    SimpleTableComponent.prototype._sortColumn;
    /** @type {?} */
    SimpleTableComponent.prototype._sortOrder;
    /** @type {?} */
    SimpleTableComponent.prototype._sortIndex;
    /** @type {?} */
    SimpleTableComponent.prototype.defConfig;
    /** @type {?} */
    SimpleTableComponent.prototype.http;
    /** @type {?} */
    SimpleTableComponent.prototype.el;
    /** @type {?} */
    SimpleTableComponent.prototype.renderer;
    /** @type {?} */
    SimpleTableComponent.prototype.exportSrv;
    /** @type {?} */
    SimpleTableComponent.prototype.acl;
    /** @type {?} */
    SimpleTableComponent.prototype.i18nSrv;
    /** @type {?} */
    SimpleTableComponent.prototype.modal;
    /** @type {?} */
    SimpleTableComponent.prototype.currenty;
    /** @type {?} */
    SimpleTableComponent.prototype.date;
    /** @type {?} */
    SimpleTableComponent.prototype.yn;
    /** @type {?} */
    SimpleTableComponent.prototype.number;
    /** @type {?} */
    SimpleTableComponent.prototype.doc;
}
//# sourceMappingURL=simple-table.component.js.map