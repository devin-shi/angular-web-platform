/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { deepGet } from '@delon/util';
import { XlsxService } from '../xlsx/xlsx.service';
var SimpleTableExport = /** @class */ (function () {
    function SimpleTableExport(xlsxSrv) {
        this.xlsxSrv = xlsxSrv;
    }
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    SimpleTableExport.prototype._stGet = /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    function (item, col) {
        var /** @type {?} */ ret = { t: 's', v: '' };
        if (col.format) {
            ret.v = col.format(item, col);
        }
        else {
            var /** @type {?} */ val = deepGet(item, /** @type {?} */ (col.index), '');
            if (typeof val === 'undefined') {
                ret.v = '';
            }
            else {
                ret.v = val;
                switch (col.type) {
                    case 'currency':
                        ret.t = 'n';
                        break;
                    case 'date':
                        ret.t = 'd';
                        break;
                    case 'yn':
                        ret.v = ret === col.ynTruth ? col.ynYes || '是' : col.ynNo || '否';
                        break;
                }
            }
        }
        return ret;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    SimpleTableExport.prototype.genSheet = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        var /** @type {?} */ sheets = {};
        var /** @type {?} */ sheet = (sheets[opt.sheetname || 'Sheet1'] = {});
        var /** @type {?} */ colData = opt._c.filter(function (w) {
            return w.exported !== false &&
                w.index &&
                (!w.buttons || w.buttons.length === 0);
        });
        var /** @type {?} */ cc = colData.length, /** @type {?} */
        dc = opt._d.length;
        // region: column
        for (var /** @type {?} */ i = 0; i < cc; i++) {
            sheet[String.fromCharCode(65 + i) + "1"] = {
                t: 's',
                v: colData[i].title,
            };
        }
        // endregion
        // region: content
        for (var /** @type {?} */ i = 0; i < dc; i++) {
            for (var /** @type {?} */ j = 0; j < cc; j++) {
                sheet["" + String.fromCharCode(65 + j) + (i + 2)] = this._stGet(opt._d[i], colData[j]);
            }
        }
        // endregion
        sheet['!ref'] = "A1:" + String.fromCharCode(65 + cc - 1) + (dc + 1);
        return sheets;
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    SimpleTableExport.prototype.export = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        if (!this.xlsxSrv)
            throw new Error("muse be import 'AdXlsxModule' module, but got null");
        var /** @type {?} */ sheets = this.genSheet(opt);
        return this.xlsxSrv.export({
            sheets: sheets,
            filename: opt.filename,
            callback: opt.callback,
        });
    };
    SimpleTableExport.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SimpleTableExport.ctorParameters = function () { return [
        { type: XlsxService, decorators: [{ type: Optional },] },
    ]; };
    return SimpleTableExport;
}());
export { SimpleTableExport };
function SimpleTableExport_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SimpleTableExport.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SimpleTableExport.ctorParameters;
    /** @type {?} */
    SimpleTableExport.prototype.xlsxSrv;
}
//# sourceMappingURL=simple-table-export.js.map