/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, HostBinding, ViewChild, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
var G2MiniBarComponent = /** @class */ (function () {
    function G2MiniBarComponent(cd) {
        this.cd = cd;
        // region: fields
        this.color = '#1890FF';
        this._height = 0;
        this._borderWidth = 5;
        this.padding = [8, 8, 8, 8];
        this.cd.detach();
    }
    Object.defineProperty(G2MiniBarComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2MiniBarComponent.prototype, "borderWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._borderWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._borderWidth = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.install = /**
     * @return {?}
     */
    function () {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
            legend: null,
        });
        chart.axis(false);
        chart.source(this.data, {
            x: {
                type: 'cat',
            },
            y: {
                min: 0,
            },
        });
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            crosshairs: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: "0px 4px" },
        });
        chart
            .interval()
            .position('x*y')
            .size(this.borderWidth)
            .color(this.color)
            .tooltip('x*y', function (x, y) {
            return {
                name: x,
                value: y,
            };
        });
        chart.render();
        setTimeout(function () {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    };
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2MiniBarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.install();
    };
    /**
     * @return {?}
     */
    G2MiniBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.uninstall();
    };
    G2MiniBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-mini-bar',
                    template: "<div #container></div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    G2MiniBarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    G2MiniBarComponent.propDecorators = {
        "color": [{ type: Input },],
        "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
        "borderWidth": [{ type: Input },],
        "padding": [{ type: Input },],
        "data": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2MiniBarComponent;
}());
export { G2MiniBarComponent };
function G2MiniBarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    G2MiniBarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    G2MiniBarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    G2MiniBarComponent.propDecorators;
    /** @type {?} */
    G2MiniBarComponent.prototype.color;
    /** @type {?} */
    G2MiniBarComponent.prototype._height;
    /** @type {?} */
    G2MiniBarComponent.prototype._borderWidth;
    /** @type {?} */
    G2MiniBarComponent.prototype.padding;
    /** @type {?} */
    G2MiniBarComponent.prototype.data;
    /** @type {?} */
    G2MiniBarComponent.prototype.node;
    /** @type {?} */
    G2MiniBarComponent.prototype.chart;
    /** @type {?} */
    G2MiniBarComponent.prototype.cd;
}
//# sourceMappingURL=mini-bar.component.js.map