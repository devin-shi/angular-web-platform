/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, TemplateRef, Renderer2, ChangeDetectionStrategy, ChangeDetectorRef, } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { FromEventObservable } from 'rxjs/observable/FromEventObservable';
import { coerceNumberProperty } from '@angular/cdk/coercion';
var G2WaterWaveComponent = /** @class */ (function () {
    function G2WaterWaveComponent(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = '#1890FF';
        this._height = 160;
        this.initFlag = false;
        this.autoHideXLabels = false;
        this.scroll$ = null;
    }
    Object.defineProperty(G2WaterWaveComponent.prototype, "title", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof TemplateRef) {
                this._title = null;
                this._titleTpl = value;
            }
            else
                this._title = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2WaterWaveComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(G2WaterWaveComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._percent = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.renderChart = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ data = this.percent / 100;
        if (!data)
            return;
        this.node.nativeElement.innerHTML = '';
        var /** @type {?} */ self = this;
        var /** @type {?} */ canvas = /** @type {?} */ (this.node.nativeElement);
        var /** @type {?} */ ctx = canvas.getContext('2d');
        var /** @type {?} */ canvasWidth = canvas.width;
        var /** @type {?} */ canvasHeight = canvas.height;
        var /** @type {?} */ radius = canvasWidth / 2;
        var /** @type {?} */ lineWidth = 2;
        var /** @type {?} */ cR = radius - lineWidth;
        ctx.beginPath();
        ctx.lineWidth = lineWidth * 2;
        var /** @type {?} */ axisLength = canvasWidth - lineWidth;
        var /** @type {?} */ unit = axisLength / 8;
        var /** @type {?} */ range = 0.2; // 振幅
        var /** @type {?} */ currRange = range;
        var /** @type {?} */ xOffset = lineWidth;
        var /** @type {?} */ sp = 0; // 周期偏移量
        var /** @type {?} */ currData = 0;
        var /** @type {?} */ waveupsp = 0.005; // 水波上涨速度
        var /** @type {?} */ arcStack = [];
        var /** @type {?} */ bR = radius - lineWidth;
        var /** @type {?} */ circleOffset = -(Math.PI / 2);
        var /** @type {?} */ circleLock = true;
        for (var /** @type {?} */ i = circleOffset; i < circleOffset + 2 * Math.PI; i += 1 / (8 * Math.PI)) {
            arcStack.push([radius + bR * Math.cos(i), radius + bR * Math.sin(i)]);
        }
        var /** @type {?} */ cStartPoint = arcStack.shift();
        ctx.strokeStyle = this.color;
        ctx.moveTo(cStartPoint[0], cStartPoint[1]);
        /**
         * @return {?}
         */
        function drawSin() {
            ctx.beginPath();
            ctx.save();
            var /** @type {?} */ sinStack = [];
            for (var /** @type {?} */ i = xOffset; i <= xOffset + axisLength; i += 20 / axisLength) {
                var /** @type {?} */ x = sp + (xOffset + i) / unit;
                var /** @type {?} */ y = Math.sin(x) * currRange;
                var /** @type {?} */ dx = i;
                var /** @type {?} */ dy = 2 * cR * (1 - currData) + (radius - cR) - unit * y;
                ctx.lineTo(dx, dy);
                sinStack.push([dx, dy]);
            }
            var /** @type {?} */ startPoint = sinStack.shift();
            ctx.lineTo(xOffset + axisLength, canvasHeight);
            ctx.lineTo(xOffset, canvasHeight);
            ctx.lineTo(startPoint[0], startPoint[1]);
            var /** @type {?} */ gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#1890FF');
            ctx.fillStyle = gradient;
            ctx.fill();
            ctx.restore();
        }
        /**
         * @return {?}
         */
        function render() {
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            if (circleLock) {
                if (arcStack.length) {
                    var /** @type {?} */ temp = arcStack.shift();
                    ctx.lineTo(temp[0], temp[1]);
                    ctx.stroke();
                }
                else {
                    circleLock = false;
                    ctx.lineTo(cStartPoint[0], cStartPoint[1]);
                    ctx.stroke();
                    arcStack = null;
                    ctx.globalCompositeOperation = 'destination-over';
                    ctx.beginPath();
                    ctx.lineWidth = lineWidth;
                    ctx.arc(radius, radius, bR, 0, 2 * Math.PI, true);
                    ctx.beginPath();
                    ctx.save();
                    ctx.arc(radius, radius, radius - 3 * lineWidth, 0, 2 * Math.PI, true);
                    ctx.restore();
                    ctx.clip();
                    ctx.fillStyle = '#1890FF';
                }
            }
            else {
                if (data >= 0.85) {
                    if (currRange > range / 4) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                else if (data <= 0.1) {
                    if (currRange < range * 1.5) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                }
                else {
                    if (currRange <= range) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                    if (currRange >= range) {
                        var /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                if (data - currData > 0) {
                    currData += waveupsp;
                }
                if (data - currData < 0) {
                    currData -= waveupsp;
                }
                sp += 0.07;
                drawSin();
            }
            self.timer = requestAnimationFrame(render);
        }
        render();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.uninstall = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} radio
     * @return {?}
     */
    G2WaterWaveComponent.prototype.updateRadio = /**
     * @param {?} radio
     * @return {?}
     */
    function (radio) {
        this.renderer.setStyle(this.el.nativeElement, 'transform', "scale(" + radio + ")");
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initFlag = true;
        this.cd.detectChanges();
        this.updateRadio(1);
        this.installResizeEvent();
        setTimeout(function () { return _this.resize(); }, 130);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag) {
            this.cd.detectChanges();
            this.renderChart();
        }
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.timer)
            cancelAnimationFrame(this.timer);
        this.uninstallResizeEvent();
        this.uninstall();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.installResizeEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.scroll$)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable.create(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe(function () { return _this.resize(); }));
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.uninstallResizeEvent = /**
     * @return {?}
     */
    function () {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    };
    /**
     * @return {?}
     */
    G2WaterWaveComponent.prototype.resize = /**
     * @return {?}
     */
    function () {
        var offsetWidth = this.el.nativeElement.parentNode.offsetWidth;
        this.updateRadio(offsetWidth < this.height ? offsetWidth / this.height : 1);
        this.renderChart();
    };
    G2WaterWaveComponent.decorators = [
        { type: Component, args: [{
                    selector: 'g2-water-wave',
                    template: "\n  <div [ngStyle]=\"{'height.px': height, 'width.px': height, 'overflow': 'hidden'}\">\n    <canvas #container class=\"canvas-wrap\" width=\"{{height*2}}\" height=\"{{height*2}}\"></canvas>\n  </div>\n  <div class=\"text\" [ngStyle]=\"{'width.px': height}\">\n    <ng-container *ngIf=\"_title; else _titleTpl\"><span>{{_title}}</span></ng-container>\n    <h4>{{percent}}%</h4>\n  </div>",
                    host: { '[class.ad-water-wave]': 'true' },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                },] },
    ];
    // endregion
    /** @nocollapse */
    G2WaterWaveComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    G2WaterWaveComponent.propDecorators = {
        "title": [{ type: Input },],
        "color": [{ type: Input },],
        "height": [{ type: Input },],
        "percent": [{ type: Input },],
        "node": [{ type: ViewChild, args: ['container',] },],
    };
    return G2WaterWaveComponent;
}());
export { G2WaterWaveComponent };
function G2WaterWaveComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    G2WaterWaveComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    G2WaterWaveComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    G2WaterWaveComponent.propDecorators;
    /** @type {?} */
    G2WaterWaveComponent.prototype._title;
    /** @type {?} */
    G2WaterWaveComponent.prototype._titleTpl;
    /** @type {?} */
    G2WaterWaveComponent.prototype.color;
    /** @type {?} */
    G2WaterWaveComponent.prototype._height;
    /** @type {?} */
    G2WaterWaveComponent.prototype._percent;
    /** @type {?} */
    G2WaterWaveComponent.prototype.node;
    /** @type {?} */
    G2WaterWaveComponent.prototype.initFlag;
    /** @type {?} */
    G2WaterWaveComponent.prototype.timer;
    /** @type {?} */
    G2WaterWaveComponent.prototype.autoHideXLabels;
    /** @type {?} */
    G2WaterWaveComponent.prototype.scroll$;
    /** @type {?} */
    G2WaterWaveComponent.prototype.el;
    /** @type {?} */
    G2WaterWaveComponent.prototype.renderer;
    /** @type {?} */
    G2WaterWaveComponent.prototype.cd;
}
//# sourceMappingURL=water-wave.component.js.map