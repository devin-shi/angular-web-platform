{"version":3,"file":"mini-progress.component.js","sourceRoot":"","sources":["../../../../../../packages/abc/charts/mini-progress/mini-progress.component.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;;;;qBAqB1C,SAAS;;0BAGtB,uCAAM;;;;;YACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;;;;;;QAEtB,UAAW,KAAU;YACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACxE;;;;0BAIG,4CAAW;;;;;YACb,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;;;;;;QAE3B,UAAgB,KAAU;YACxB,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;SACjD;;;;0BAIG,wCAAO;;;;;YACT,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;;;;;QAEvB,UAAY,KAAU;YACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACzE;;;;;gBA7CF,SAAS,SAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,QAAQ,EAAE,mdAUT;oBACD,IAAI,EAAE,EAAE,wBAAwB,EAAE,MAAM,EAAE;oBAC1C,mBAAmB,EAAE,KAAK;iBAC3B;;;;;0BAIE,KAAK;2BAEL,KAAK;gCASL,KAAK;4BASL,KAAK;;8BA1CR;;SAmBa,mBAAmB","sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\n\r\n@Component({\r\n  selector: 'g2-mini-progress',\r\n  template: `\r\n  <nz-tooltip [nzTitle]=\"'目标值: ' + target + '%'\">\r\n    <div nz-tooltip class=\"target\" [ngStyle]=\"{'left.%': target}\">\r\n      <span [ngStyle]=\"{'background-color': color}\"></span>\r\n      <span [ngStyle]=\"{'background-color': color}\"></span>\r\n    </div>\r\n  </nz-tooltip>\r\n  <div class=\"progress-wrap\">\r\n    <div class=\"progress\" [ngStyle]=\"{'background-color': color, 'width.%': percent, 'height.px':strokeWidth}\"></div>\r\n  </div>\r\n  `,\r\n  host: { '[class.ad-g2-progress]': 'true' },\r\n  preserveWhitespaces: false,\r\n})\r\nexport class G2ProgressComponent {\r\n  // region: fields\r\n\r\n  @Input() color = '#1890FF';\r\n\r\n  @Input()\r\n  get target() {\r\n    return this._target;\r\n  }\r\n  set target(value: any) {\r\n    this._target = Math.min(Math.max(coerceNumberProperty(value), 0), 100);\r\n  }\r\n  private _target: number;\r\n\r\n  @Input()\r\n  get strokeWidth() {\r\n    return this._strokeWidth;\r\n  }\r\n  set strokeWidth(value: any) {\r\n    this._strokeWidth = coerceNumberProperty(value);\r\n  }\r\n  private _strokeWidth: number;\r\n\r\n  @Input()\r\n  get percent() {\r\n    return this._percent;\r\n  }\r\n  set percent(value: any) {\r\n    this._percent = Math.min(Math.max(coerceNumberProperty(value), 0), 100);\r\n  }\r\n  private _percent: number;\r\n\r\n  // endregion\r\n}\r\n"]}