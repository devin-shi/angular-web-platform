{"version":3,"file":"zip.service.js","sourceRoot":"","sources":["../../../../../packages/abc/zip/zip.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,WAAW,EAAc,MAAM,aAAa,CAAC;AAEtD,OAAO,EAEL,aAAa,GAGd,MAAM,aAAa,CAAC;;IAMnB,oBACiC,QACvB,MACA;QAFuB,WAAM,GAAN,MAAM;QAC7B,SAAI,GAAJ,IAAI;QACJ,SAAI,GAAJ,IAAI;KACV;;;;IAEI,yBAAI;;;;QACV,qBAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAC1B;YACE,GAAG,EAAE,4CAA4C;YACjD,KAAK,EAAE,EAAE;SACV,EACD,IAAI,CAAC,MAAM,CACZ,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;;;;;IAGnD,0BAAK;;;;cAAC,GAAQ;QACpB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;;IAGtE,SAAS;;;;;;;IACT,yBAAI;;;;;;IAAJ,UAAK,SAAwB,EAAE,OAAa;QAA5C,iBAyBC;QAxBC,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACtC,KAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;;gBAEf,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAClC,KAAI,CAAC,IAAI;yBACN,OAAO,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC;yBAC1D,SAAS,CACR,UAAC,GAAgB;wBACf,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,EAAZ,CAAY,CAAC,CAAC;qBACzD,EACD,UAAC,GAAQ;wBACP,MAAM,CAAC,GAAG,CAAC,CAAC;qBACb,CACF,CAAC;oBACJ,MAAM,CAAC;iBACR;;gBAED,qBAAM,MAAM,GAAe,IAAI,UAAU,EAAE,CAAC;gBAC5C,MAAM,CAAC,MAAM,GAAG,UAAC,CAAM;oBACrB,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,EAAZ,CAAY,CAAC,CAAC;iBACrE,CAAC;gBACF,MAAM,CAAC,kBAAkB,mBAAO,SAAS,EAAC,CAAC;aAC5C,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,yBAAyB;;;;;IACzB,2BAAM;;;;IAAN;QAAA,iBAOC;QANC,MAAM,CAAC,IAAI,OAAO,CAAM,UAAA,OAAO;YAC7B,KAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;gBACf,qBAAM,OAAO,GAAQ,IAAI,KAAK,EAAE,CAAC;gBACjC,OAAO,CAAC,OAAO,CAAC,CAAC;aAClB,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED;;;;;OAKG;;;;;;;;IACH,4BAAO;;;;;;;IAAP,UAAQ,GAAQ,EAAE,IAAY,EAAE,GAAW;QAA3C,iBAaC;QAZC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,SAAS,CACtE,UAAC,GAAgB;gBACf,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBACpB,OAAO,EAAE,CAAC;aACX,EACD,UAAC,KAAU;gBACT,MAAM,CAAC,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aACxB,CACF,CAAC;SACH,CAAC,CAAC;KACJ;IAED;;;;;OAKG;;;;;;;;IACH,yBAAI;;;;;;;IAAJ,UAAK,GAAQ,EAAE,OAAwB;QACrC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChB,qBAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,GAAG;iBACA,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC;iBACvE,IAAI,CACH,UAAC,IAAU;gBACT,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC;oBAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,IAAI,cAAc,CAAC,CAAC;gBAC7C,OAAO,EAAE,CAAC;aACX,EACD,UAAA,GAAG;gBACD,MAAM,CAAC,GAAG,CAAC,CAAC;aACb,CACF,CAAC;SACL,CAAC,CAAC;KACJ;;gBA1GF,UAAU;;;;gDAGN,MAAM,SAAC,aAAa;gBAhBhB,UAAU;gBAEV,WAAW;;qBAHpB;;SAea,UAAU","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { saveAs } from 'file-saver';\nimport { LazyService, LazyResult } from '@delon/util';\n\nimport {\n  ZipConfig,\n  DA_ZIP_CONFIG,\n  ZipWriteOptions,\n  ZipSaveOptions,\n} from './interface';\n\ndeclare var JSZip: any;\n\n@Injectable()\nexport class ZipService {\n  constructor(\n    @Inject(DA_ZIP_CONFIG) private config: ZipConfig,\n    private http: HttpClient,\n    private lazy: LazyService,\n  ) {}\n\n  private init(): Promise<LazyResult[]> {\n    const config = Object.assign(\n      {\n        url: `//cdn.bootcss.com/jszip/3.1.5/jszip.min.js`,\n        utils: [],\n      },\n      this.config,\n    );\n\n    return this.lazy.load([config.url].concat(config.utils));\n  }\n\n  private check(zip: any) {\n    if (!zip) throw new Error('get instance via `ZipService.create()`');\n  }\n\n  /** 解压 */\n  read(fileOrUrl: File | string, options?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      this.init().then(() => {\n        // from url\n        if (typeof fileOrUrl === 'string') {\n          this.http\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\n            .subscribe(\n              (res: ArrayBuffer) => {\n                JSZip.loadAsync(res, options).then(ret => resolve(ret));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n          return;\n        }\n        // from file\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n          JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));\n        };\n        reader.readAsBinaryString(<File>fileOrUrl);\n      });\n    });\n  }\n\n  /** 创建 Zip 实例，用于创建压缩文件 */\n  create(): Promise<any> {\n    return new Promise<any>(resolve => {\n      this.init().then(() => {\n        const zipFile: any = new JSZip();\n        resolve(zipFile);\n      });\n    });\n  }\n\n  /**\n   * 下载URL资源并写入 zip\n   * @param zip Zip 实例\n   * @param path Zip 路径，例如： `text.txt`、`txt/hi.txt`\n   * @param url URL 地址\n   */\n  pushUrl(zip: any, path: string, url: string): Promise<void> {\n    this.check(zip);\n    return new Promise<void>((resolve, reject) => {\n      this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe(\n        (res: ArrayBuffer) => {\n          zip.file(path, res);\n          resolve();\n        },\n        (error: any) => {\n          reject({ url, error });\n        },\n      );\n    });\n  }\n\n  /**\n   * 保存Zip并执行打开保存对话框\n   *\n   * @param zip zip 对象，务必通过 `create()` 构建\n   * @param options 额外参数，\n   */\n  save(zip: any, options?: ZipSaveOptions): Promise<void> {\n    this.check(zip);\n    const opt = Object.assign({}, options);\n    return new Promise<void>((resolve, reject) => {\n      zip\n        .generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update)\n        .then(\n          (data: Blob) => {\n            if (opt.callback) opt.callback(data);\n            saveAs(data, opt.filename || 'download.zip');\n            resolve();\n          },\n          err => {\n            reject(err);\n          },\n        );\n    });\n  }\n}\n"]}