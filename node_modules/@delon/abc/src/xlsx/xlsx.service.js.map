{"version":3,"file":"xlsx.service.js","sourceRoot":"","sources":["../../../../../packages/abc/xlsx/xlsx.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { saveAs } from 'file-saver';\nimport { LazyService, LazyResult } from '@delon/util';\nimport {\n  XlsxExportOptions,\n  DA_XLSX_CONFIG,\n  XlsxConfig,\n  XlsxExportSheet,\n} from './interface';\n\ndeclare var XLSX: any;\n\n@Injectable()\nexport class XlsxService {\n  constructor(\n    @Inject(DA_XLSX_CONFIG) private config: XlsxConfig,\n    private http: HttpClient,\n    private lazy: LazyService,\n  ) {}\n\n  private init(): Promise<LazyResult[]> {\n    const config = Object.assign(\n      {\n        url: `//cdn.bootcss.com/xlsx/0.11.17/xlsx.full.min.js`,\n        modules: [],\n      },\n      this.config,\n    );\n\n    return this.lazy.load([config.url].concat(config.modules));\n  }\n\n  private read(wb: any): { [key: string]: any[][] } {\n    const ret: any = {};\n    wb.SheetNames.forEach(name => {\n      const sheet: any = wb.Sheets[name];\n      ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n    });\n    return ret;\n  }\n\n  /** 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式 */\n  import(fileOrUrl: File | string): Promise<{ [key: string]: any[][] }> {\n    return new Promise<{ [key: string]: any[][] }>((resolver, reject) => {\n      this.init().then(() => {\n        // from url\n        if (typeof fileOrUrl === 'string') {\n          this.http\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\n            .subscribe(\n              (res: ArrayBuffer) => {\n                const wb = XLSX.read(new Uint8Array(res), { type: 'array' });\n                resolver(this.read(wb));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n          return;\n        }\n        // from file\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n          const wb: any = XLSX.read(e.target.result, { type: 'binary' });\n          resolver(this.read(wb));\n        };\n        reader.readAsArrayBuffer(fileOrUrl);\n      });\n    });\n  }\n\n  /** 导出 */\n  export(options: XlsxExportOptions): Promise<void> {\n    return this.init().then(() => {\n      const wb: any = XLSX.utils.book_new();\n      if (Array.isArray(options.sheets)) {\n        (<XlsxExportSheet[]>options.sheets).forEach(\n          (value: XlsxExportSheet, index: number) => {\n            const ws: any = XLSX.utils.aoa_to_sheet(value.data);\n            XLSX.utils.book_append_sheet(\n              wb,\n              ws,\n              value.name || `Sheet${index + 1}`,\n            );\n          },\n        );\n      } else {\n        wb.SheetNames = Object.keys(options.sheets);\n        wb.Sheets = options.sheets;\n      }\n\n      if (options.callback) options.callback(wb);\n\n      const wbout: ArrayBuffer = XLSX.write(\n        wb,\n        Object.assign(\n          {\n            bookType: 'xlsx',\n            type: 'array',\n          },\n          options.opts,\n        ),\n      );\n      saveAs(\n        new Blob([wbout], { type: 'application/octet-stream' }),\n        options.filename || 'export.xlsx',\n      );\n    });\n  }\n}\n"]}