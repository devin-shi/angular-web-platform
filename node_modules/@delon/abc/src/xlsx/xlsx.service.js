/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { saveAs } from 'file-saver';
import { LazyService } from '@delon/util';
import { DA_XLSX_CONFIG, } from './interface';
var XlsxService = /** @class */ (function () {
    function XlsxService(config, http, lazy) {
        this.config = config;
        this.http = http;
        this.lazy = lazy;
    }
    /**
     * @return {?}
     */
    XlsxService.prototype.init = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ config = Object.assign({
            url: "//cdn.bootcss.com/xlsx/0.11.17/xlsx.full.min.js",
            modules: [],
        }, this.config);
        return this.lazy.load([config.url].concat(config.modules));
    };
    /**
     * @param {?} wb
     * @return {?}
     */
    XlsxService.prototype.read = /**
     * @param {?} wb
     * @return {?}
     */
    function (wb) {
        var /** @type {?} */ ret = {};
        wb.SheetNames.forEach(function (name) {
            var /** @type {?} */ sheet = wb.Sheets[name];
            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        });
        return ret;
    };
    /** 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式 */
    /**
     * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
     * @param {?} fileOrUrl
     * @return {?}
     */
    XlsxService.prototype.import = /**
     * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
     * @param {?} fileOrUrl
     * @return {?}
     */
    function (fileOrUrl) {
        var _this = this;
        return new Promise(function (resolver, reject) {
            _this.init().then(function () {
                // from url
                if (typeof fileOrUrl === 'string') {
                    _this.http
                        .request('GET', fileOrUrl, { responseType: 'arraybuffer' })
                        .subscribe(function (res) {
                        var /** @type {?} */ wb = XLSX.read(new Uint8Array(res), { type: 'array' });
                        resolver(_this.read(wb));
                    }, function (err) {
                        reject(err);
                    });
                    return;
                }
                // from file
                var /** @type {?} */ reader = new FileReader();
                reader.onload = function (e) {
                    var /** @type {?} */ wb = XLSX.read(e.target.result, { type: 'binary' });
                    resolver(_this.read(wb));
                };
                reader.readAsArrayBuffer(fileOrUrl);
            });
        });
    };
    /** 导出 */
    /**
     * 导出
     * @param {?} options
     * @return {?}
     */
    XlsxService.prototype.export = /**
     * 导出
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.init().then(function () {
            var /** @type {?} */ wb = XLSX.utils.book_new();
            if (Array.isArray(options.sheets)) {
                (/** @type {?} */ (options.sheets)).forEach(function (value, index) {
                    var /** @type {?} */ ws = XLSX.utils.aoa_to_sheet(value.data);
                    XLSX.utils.book_append_sheet(wb, ws, value.name || "Sheet" + (index + 1));
                });
            }
            else {
                wb.SheetNames = Object.keys(options.sheets);
                wb.Sheets = options.sheets;
            }
            if (options.callback)
                options.callback(wb);
            var /** @type {?} */ wbout = XLSX.write(wb, Object.assign({
                bookType: 'xlsx',
                type: 'array',
            }, options.opts));
            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');
        });
    };
    XlsxService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    XlsxService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DA_XLSX_CONFIG,] },] },
        { type: HttpClient, },
        { type: LazyService, },
    ]; };
    return XlsxService;
}());
export { XlsxService };
function XlsxService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    XlsxService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    XlsxService.ctorParameters;
    /** @type {?} */
    XlsxService.prototype.config;
    /** @type {?} */
    XlsxService.prototype.http;
    /** @type {?} */
    XlsxService.prototype.lazy;
}
//# sourceMappingURL=xlsx.service.js.map