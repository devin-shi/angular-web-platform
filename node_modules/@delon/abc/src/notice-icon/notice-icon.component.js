/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, Output, EventEmitter, } from '@angular/core';
import { coerceNumberProperty, coerceBooleanProperty, } from '@angular/cdk/coercion';
var NoticeIconComponent = /** @class */ (function () {
    function NoticeIconComponent() {
        this.data = [];
        this._loading = false;
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
        this._popoverVisible = false;
        this.popoverVisibleChange = new EventEmitter();
    }
    Object.defineProperty(NoticeIconComponent.prototype, "count", {
        get: /**
         * 图标上的消息总数
         * @return {?}
         */
        function () {
            return this._count;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._count = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "loading", {
        get: /**
         * 弹出卡片加载状态
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NoticeIconComponent.prototype, "popoverVisible", {
        get: /**
         * 手动控制Popover显示
         * @return {?}
         */
        function () {
            return this._popoverVisible;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._popoverVisible = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} result
     * @return {?}
     */
    NoticeIconComponent.prototype.onVisibleChange = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        this.popoverVisibleChange.emit(result);
    };
    /**
     * @param {?} i
     * @return {?}
     */
    NoticeIconComponent.prototype.onSelect = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        this.select.emit(i);
    };
    /**
     * @param {?} title
     * @return {?}
     */
    NoticeIconComponent.prototype.onClear = /**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        this.clear.emit(title);
    };
    NoticeIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notice-icon',
                    template: "\n  <nz-badge *ngIf=\"data?.length === 0\" [nzCount]=\"count\">\n    <i class=\"anticon anticon-bell\"></i>\n  </nz-badge>\n  <nz-popover *ngIf=\"data?.length > 0\"\n    [nzVisible]=\"popoverVisible\" (nzVisibleChange)=\"onVisibleChange($event)\" nzTrigger=\"click\"\n    nzPlacement=\"bottomRight\"\n    nzOverlayClassName=\"ad-notice-icon-con\">\n    <div nz-popover class=\"item\">\n      <nz-badge [nzCount]=\"count\">\n        <i class=\"anticon anticon-bell\"></i>\n      </nz-badge>\n    </div>\n    <ng-template #nzTemplate>\n      <nz-spin [nzSpinning]=\"loading\" [nzDelay]=\"0\">\n        <nz-tabset>\n          <nz-tab *ngFor=\"let i of data\" [nzTitle]=\"i.title\">\n            <notice-icon-tab\n              [data]=\"i\"\n              (select)=\"onSelect($event)\"\n              (clear)=\"onClear($event)\"></notice-icon-tab>\n          </nz-tab>\n        </nz-tabset>\n      </nz-spin>\n    </ng-template>\n  </nz-popover>\n  ",
                    host: { '[class.ad-notice-icon]': 'true' },
                    preserveWhitespaces: false,
                },] },
    ];
    /** @nocollapse */
    NoticeIconComponent.propDecorators = {
        "data": [{ type: Input },],
        "count": [{ type: Input },],
        "loading": [{ type: Input },],
        "select": [{ type: Output },],
        "clear": [{ type: Output },],
        "popoverVisible": [{ type: Input },],
        "popoverVisibleChange": [{ type: Output },],
    };
    return NoticeIconComponent;
}());
export { NoticeIconComponent };
function NoticeIconComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NoticeIconComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NoticeIconComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NoticeIconComponent.propDecorators;
    /** @type {?} */
    NoticeIconComponent.prototype.data;
    /** @type {?} */
    NoticeIconComponent.prototype._count;
    /** @type {?} */
    NoticeIconComponent.prototype._loading;
    /** @type {?} */
    NoticeIconComponent.prototype.select;
    /** @type {?} */
    NoticeIconComponent.prototype.clear;
    /** @type {?} */
    NoticeIconComponent.prototype._popoverVisible;
    /** @type {?} */
    NoticeIconComponent.prototype.popoverVisibleChange;
}
//# sourceMappingURL=notice-icon.component.js.map