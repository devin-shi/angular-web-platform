import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, NO_ERRORS_SCHEMA, NgModule, Optional, Output, Pipe, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { CommonModule, DOCUMENT, DecimalPipe, LocationStrategy } from '@angular/common';
import { DOCUMENT as DOCUMENT$1 } from '@angular/platform-browser';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { ActivatedRoute, ActivationEnd, ActivationStart, NavigationEnd, Router, RouterModule } from '@angular/router';
import { NgZorroAntdModule } from 'ng-zorro-antd';
import { debounceTime, filter, map, share, tap } from 'rxjs/operators';
import { ALAIN_I18N_TOKEN, CNCurrencyPipe, DatePipe, MenuService, ModalHelper, SettingsService, YNPipe } from '@delon/theme';
import { HttpClient } from '@angular/common/http';
import { saveAs } from 'file-saver';
import { DelonUtilModule, LazyService, deepCopy, deepGet, isEmpty } from '@delon/util';
import { CountdownModule } from 'ngx-countdown';
import format from 'date-fns/format';
import addSeconds from 'date-fns/add_seconds';
import { FormsModule } from '@angular/forms';
import { ACLService } from '@delon/acl';
import { of as of$1 } from 'rxjs/observable/of';
import { combineLatest as combineLatest$1 } from 'rxjs/observable/combineLatest';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { Overlay, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Subscription as Subscription$1 } from 'rxjs/Subscription';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { FromEventObservable as FromEventObservable$1 } from 'rxjs/observable/FromEventObservable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdErrorCollectConfig {
    constructor() {
        /**
         * 监听频率
         */
        this.freq = 500;
        /**
         * 顶部偏移值
         */
        this.offsetTop = 65 + 64 + 8 * 2;
    }
}
AdErrorCollectConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 错误消息采集器
 * PS：虽然此法并不好看，但对响应式表单&模板表单有很好的效果。
 */
class ErrorCollectComponent {
    /**
     * @param {?} cog
     * @param {?} el
     * @param {?} renderer
     * @param {?} cd
     * @param {?} doc
     */
    constructor(cog, el, renderer, cd, doc) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this.doc = doc;
        this.$time = null;
        this._freq = 500;
        this._offsetTop = 65 + 64 + 8 * 2;
        this._hiden = true;
        this.count = 0;
        Object.assign(this, cog);
    }
    /**
     * @return {?}
     */
    get freq() {
        return this._freq;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set freq(value) {
        this._freq = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get offsetTop() {
        return this._offsetTop;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set offsetTop(value) {
        this._offsetTop = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get errEls() {
        return this.formEl.querySelectorAll('.has-error');
    }
    /**
     * @return {?}
     */
    update() {
        const /** @type {?} */ count = this.errEls.length;
        if (count === this.count)
            return;
        this.count = count;
        this._hiden = count === 0;
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    _click() {
        if (this.count === 0)
            return false;
        // nz-form-control
        const /** @type {?} */ els = this.errEls;
        const /** @type {?} */ formItemEl = this.findParent(els[0], '[nz-form-control]') || els[0];
        formItemEl.scrollIntoView(true);
        // fix header height
        this.doc.documentElement.scrollTop -= this.offsetTop;
    }
    /**
     * @return {?}
     */
    install() {
        this.uninstall();
        this.$time = setInterval(() => this.update(), this.freq);
        this.update();
    }
    /**
     * @return {?}
     */
    uninstall() {
        clearInterval(this.$time);
    }
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    findParent(el, selector) {
        let /** @type {?} */ retEl = null;
        while (el) {
            if (el.querySelector(selector)) {
                retEl = el;
                break;
            }
            el = el.parentElement;
        }
        return retEl;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formEl = this.findParent(this.el.nativeElement, 'form');
        if (this.formEl === null)
            throw new Error('未找到有效 form 元素');
        (/** @type {?} */ (this.el.nativeElement)).classList.add('error-collect', 'pr-lg', 'text-error', 'point');
        this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
ErrorCollectComponent.decorators = [
    { type: Component, args: [{
                selector: 'error-collect, [error-collect]',
                template: `
  <i class="anticon anticon-exclamation-circle"></i>
  <span class="pl-sm">{{count}}</span>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
ErrorCollectComponent.ctorParameters = () => [
    { type: AdErrorCollectConfig, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
];
ErrorCollectComponent.propDecorators = {
    "freq": [{ type: Input },],
    "offsetTop": [{ type: Input },],
    "_hiden": [{ type: HostBinding, args: ['class.d-none',] },],
    "_click": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS = [ErrorCollectComponent];
class AdErrorCollectModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AdErrorCollectModule,
            providers: [AdErrorCollectConfig],
        };
    }
}
AdErrorCollectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS],
                exports: [...COMPONENTS],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const CLS = 'ad-footer-toolbar';
class FooterToolbarComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} doc
     */
    constructor(el, renderer, doc) {
        this.el = el;
        this.renderer = renderer;
        this.doc = doc;
        this._errorCollect = false;
    }
    /**
     * @return {?}
     */
    get errorCollect() {
        return this._errorCollect;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set errorCollect(value) {
        this._errorCollect = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        (/** @type {?} */ (this.el.nativeElement)).classList.add(CLS);
        this.renderer.addClass(this.el.nativeElement, CLS);
        this.doc.querySelector('body').classList.add(`has-${CLS}`);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.doc.querySelector('body').classList.remove(`has-${CLS}`);
    }
}
FooterToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'footer-toolbar',
                template: `
  <div class="left"><ng-container *ngIf="extra" [ngTemplateOutlet]="extra"></ng-container></div>
  <div class="right">
    <error-collect *ngIf="errorCollect"></error-collect>
    <ng-content></ng-content>
  </div>
  `,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
FooterToolbarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
];
FooterToolbarComponent.propDecorators = {
    "errorCollect": [{ type: Input },],
    "extra": [{ type: ContentChild, args: ['extra',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$1 = [FooterToolbarComponent];
class AdFooterToolbarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdFooterToolbarModule, providers: [] };
    }
}
AdFooterToolbarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, AdErrorCollectModule],
                declarations: [...COMPONENTS$1],
                exports: [...COMPONENTS$1],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const SHOWCLS = 'nav-floating-show';
const FLOATINGCLS = 'nav-floating';
class SidebarNavComponent {
    /**
     * @param {?} menuSrv
     * @param {?} settings
     * @param {?} router
     * @param {?} locationStrategy
     * @param {?} render
     * @param {?} cd
     * @param {?} doc
     * @param {?} el
     */
    constructor(menuSrv, settings, router$$1, locationStrategy, render, cd, doc, el) {
        this.menuSrv = menuSrv;
        this.settings = settings;
        this.router = router$$1;
        this.locationStrategy = locationStrategy;
        this.render = render;
        this.cd = cd;
        this.doc = doc;
        this.list = [];
        this.autoCloseUnderPad = true;
        this.select = new EventEmitter();
        this.rootEl = /** @type {?} */ (el.nativeElement);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.bodyEl = this.doc.querySelector('body');
        this.menuSrv.openedByUrl(this.router.url);
        this.genFloatingContainer();
        this.change$ = /** @type {?} */ (this.menuSrv.change.subscribe(res => {
            this.list = res;
            this.cd.detectChanges();
        }));
        this.installUnderPad();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    floatingAreaClickHandle(e) {
        e.stopPropagation();
        e.preventDefault();
        const /** @type {?} */ linkNode = /** @type {?} */ (e.target);
        if (linkNode.nodeName !== 'A') {
            return false;
        }
        let /** @type {?} */ url = linkNode.getAttribute('href');
        if (url && url.startsWith('#')) {
            url = url.slice(1);
        }
        // 如果配置了bashHref 则去掉baseHref
        const /** @type {?} */ baseHerf = this.locationStrategy.getBaseHref();
        if (baseHerf) {
            url = url.slice(baseHerf.length);
        }
        this.router.navigateByUrl(url);
        this.onSelect(this.menuSrv.getPathByUrl(url).pop());
        this.hideAll();
        return false;
    }
    /**
     * @return {?}
     */
    clearFloatingContainer() {
        if (!this.floatingEl)
            return;
        this.floatingEl.removeEventListener('click', this.floatingAreaClickHandle.bind(this));
        // fix ie: https://github.com/cipchk/delon/issues/52
        if (this.floatingEl.hasOwnProperty('remove')) {
            this.floatingEl.remove();
        }
        else if (this.floatingEl.parentNode) {
            this.floatingEl.parentNode.removeChild(this.floatingEl);
        }
    }
    /**
     * @return {?}
     */
    genFloatingContainer() {
        this.clearFloatingContainer();
        this.floatingEl = this.render.createElement('div');
        this.floatingEl.classList.add(FLOATINGCLS + '-container');
        this.floatingEl.addEventListener('click', this.floatingAreaClickHandle.bind(this), false);
        this.bodyEl.appendChild(this.floatingEl);
    }
    /**
     * @param {?} linkNode
     * @param {?} item
     * @return {?}
     */
    genSubNode(linkNode, item) {
        const /** @type {?} */ id = `_sidebar-nav-${item["__id"]}`;
        const /** @type {?} */ node = /** @type {?} */ (linkNode.nextElementSibling.cloneNode(true));
        node.id = id;
        node.classList.add(FLOATINGCLS);
        node.addEventListener('mouseleave', () => {
            node.classList.remove(SHOWCLS);
        }, false);
        this.floatingEl.appendChild(node);
        return node;
    }
    /**
     * @return {?}
     */
    hideAll() {
        const /** @type {?} */ allNode = this.floatingEl.querySelectorAll('.' + FLOATINGCLS);
        for (let /** @type {?} */ i = 0; i < allNode.length; i++) {
            allNode[i].classList.remove(SHOWCLS);
        }
    }
    /**
     * @param {?} linkNode
     * @param {?} node
     * @return {?}
     */
    calPos(linkNode, node) {
        const /** @type {?} */ rect = linkNode.getBoundingClientRect();
        // bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14721015/
        const /** @type {?} */ scrollTop = Math.max(this.doc.documentElement.scrollTop, this.bodyEl.scrollTop);
        const /** @type {?} */ top = rect.top + scrollTop, /** @type {?} */
        left = rect.right + 5;
        node.style.top = `${top}px`;
        node.style.left = `${left}px`;
    }
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    showSubMenu(e, item) {
        if (this.settings.layout.collapsed !== true) {
            return;
        }
        e.preventDefault();
        const /** @type {?} */ linkNode = /** @type {?} */ (e.target);
        this.genFloatingContainer();
        const /** @type {?} */ subNode = this.genSubNode(/** @type {?} */ (linkNode), item);
        this.hideAll();
        subNode.classList.add(SHOWCLS);
        this.calPos(/** @type {?} */ (linkNode), subNode);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelect(item) {
        this.select.emit(item);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    toggleOpen(item) {
        this.menuSrv.visit((i, p) => {
            if (i !== item)
                i["_open"] = false;
        });
        let /** @type {?} */ pItem = item["__parent"];
        while (pItem) {
            pItem._open = true;
            pItem = pItem.__parent;
        }
        item._open = !item._open;
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.hideAll();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.change$.unsubscribe();
        if (this.route$)
            this.route$.unsubscribe();
        this.clearFloatingContainer();
    }
    /**
     * @return {?}
     */
    installUnderPad() {
        if (!this.autoCloseUnderPad)
            return;
        this.route$ = /** @type {?} */ (this.router.events
            .pipe(filter(e => e instanceof NavigationEnd))
            .subscribe(s => this.underPad()));
        this.underPad();
    }
    /**
     * @return {?}
     */
    underPad() {
        if (window.innerWidth < 992 && !this.settings.layout.collapsed) {
            this.settings.setLayout('collapsed', true);
        }
    }
}
SidebarNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'sidebar-nav',
                template: `<ul class="nav"> <ng-container *ngFor="let group of list"> <ng-template [ngIf]="group._hidden !== true"> <li class="nav-group-title"> <span>{{ group.text }}</span> </li> <ng-container *ngFor="let child1 of group.children"> <li *ngIf="child1._hidden !== true" [routerLinkActive]="['nav-item-selected']" [class.nav-submenu-open]="child1._open"> <!-- link --> <a *ngIf="child1._type === 1" (click)="onSelect(child1)" [routerLink]="child1.link" [target]="child1.target"> <i *ngIf="!settings.layout.collapsed" class="{{ child1.icon }}"></i> <nz-tooltip *ngIf="settings.layout.collapsed" nzPlacement="right" [nzTitle]="child1.text"> <span nz-tooltip> <i class="{{ child1.icon }}"></i> </span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- external link --> <a *ngIf="child1._type === 2" href="{{ child1.externalLink }}" target="{{child1.target}}"> <i *ngIf="!settings.layout.collapsed" class="{{ child1.icon }}"></i> <nz-tooltip *ngIf="settings.layout.collapsed" nzPlacement="right" [nzTitle]="child1.text"> <span nz-tooltip> <i class="{{ child1.icon }}"></i> </span> </nz-tooltip> <span>{{ child1.text }}</span> </a> <!-- has children link --> <a *ngIf="child1._type === 3" class="nav-sub-title" (click)="toggleOpen(child1)" (mouseenter)="showSubMenu($event, child1)"> <i class="{{ child1.icon }}"></i> <span>{{ child1.text }}</span> </a> <!-- badge --> <div *ngIf="child1.badge" title="{{child1.badge}}" class="badge badge-{{child1.badge_status}}" [class.badge-dot]="child1.badge_dot"> <em>{{child1.badge}}</em> </div> <!-- Level 2 --> <ul *ngIf="child1._type === 3" class="nav nav-sub nav-depth{{child1._depth}}"> <ng-container *ngFor="let child2 of child1.children"> <li *ngIf="child2._hidden !== true" [routerLinkActive]="['nav-item-selected']" [class.nav-submenu-open]="child2._open"> <!-- link --> <a *ngIf="child2._type === 1" (click)="onSelect(child2)" [routerLink]="child2.link" [target]="child2.target">{{ child2.text }}</a> <!-- external link --> <a *ngIf="child2._type === 2" href="{{ child2.externalLink }}" target="{{ child2.target }}">{{ child2.text }}</a> <!-- has children link --> <a *ngIf="child2._type === 3" class="nav-sub-title" (click)="toggleOpen(child2)"> {{ child2.text }} </a> <!-- badge --> <div *ngIf="child2.badge" title="{{child2.badge}}" class="badge badge-{{child2.badge_status}}" [class.badge-dot]="child2.badge_dot"> <em>{{child2.badge}}</em> </div> <!-- Level 3 --> <ul *ngIf="child2._type === 3" class="nav nav-sub nav-depth{{child2._depth}}"> <ng-container *ngFor="let child3 of child2.children"> <li *ngIf="child3._hidden !== true" [routerLinkActive]="['nav-item-selected']" [class.nav-submenu-open]="child3._open"> <!-- link --> <a *ngIf="child3._type === 1" (click)="onSelect(child3)" [routerLink]="child3.link" [target]="child3.target">{{ child3.text }}</a> <!-- external link --> <a *ngIf="child3._type === 2" href="{{ child3.externalLink }}" target="{{ child3.target }}">{{ child3.text }}</a> <!-- badge --> <div *ngIf="child3.badge" title="{{child3.badge}}" class="badge badge-{{child3.badge_status}}" [class.badge-dot]="child3.badge_dot"> <em>{{child3.badge}}</em> </div> </li> </ng-container> </ul> </li> </ng-container> </ul> </li> </ng-container> </ng-template> </ng-container> </ul> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
SidebarNavComponent.ctorParameters = () => [
    { type: MenuService, },
    { type: SettingsService, },
    { type: Router, },
    { type: LocationStrategy, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: ElementRef, },
];
SidebarNavComponent.propDecorators = {
    "autoCloseUnderPad": [{ type: Input },],
    "select": [{ type: Output },],
    "onClick": [{ type: HostListener, args: ['document:click', ['$event.target'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdSidebarNavModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdSidebarNavModule, providers: [] };
    }
}
AdSidebarNavModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, NgZorroAntdModule],
                declarations: [SidebarNavComponent],
                exports: [SidebarNavComponent],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文件下载
 *
 * ```html
 * <button nz-button down-file http-url="assets/demo{{i}}" file-name="demo中文">{{i}}</button>
 * ```
 */
class DownFileDirective {
    /**
     * @param {?} el
     * @param {?} http
     */
    constructor(el, http$$1) {
        this.el = el;
        this.http = http$$1;
        /**
         * 请求类型
         */
        this.httpMethod = 'get';
        /**
         * 成功回调
         */
        this.success = new EventEmitter();
        /**
         * 错误回调
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    _click() {
        this.el.nativeElement.disabled = true;
        this.http
            .request(this.httpMethod, this.httpUrl, {
            params: this.httpData || {},
            responseType: 'blob',
            observe: 'response',
        })
            .subscribe((res) => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            const /** @type {?} */ fileName = this.fileName ||
                res.headers.get('filename') ||
                res.headers.get('x-filename');
            saveAs(res.body, decodeURI(fileName));
            this.success.emit(res);
            this.el.nativeElement.disabled = false;
        }, err => {
            this.error.emit(err);
            this.el.nativeElement.disabled = false;
        });
    }
}
DownFileDirective.decorators = [
    { type: Directive, args: [{ selector: '[down-file]' },] },
];
/** @nocollapse */
DownFileDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: HttpClient, },
];
DownFileDirective.propDecorators = {
    "httpData": [{ type: Input, args: ['http-data',] },],
    "httpMethod": [{ type: Input, args: ['http-method',] },],
    "httpUrl": [{ type: Input, args: ['http-url',] },],
    "fileName": [{ type: Input, args: ['file-name',] },],
    "success": [{ type: Output },],
    "error": [{ type: Output },],
    "_click": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DIRECTIVES = [DownFileDirective];
class AdDownFileModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdDownFileModule, providers: [] };
    }
}
AdDownFileModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...DIRECTIVES],
                exports: [...DIRECTIVES],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdImageConfig {
    constructor() {
        /**
         * 默认大小，默认值：`64`，单位：px
         */
        this.size = 64;
        /**
         * 错误图片
         */
        this.error = './assets/img/logo.svg';
    }
}
AdImageConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * img标签
 * + 支持微信、qq头像规则缩略图规则
 * + 支持移除http&https协议http
 * + 支持增加onerror事件
 */
class ImageDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} DEF
     */
    constructor(el, render, DEF) {
        this.el = el;
        this.render = render;
        this.size = 64;
        this.error = './assets/img/logo.svg';
        this.inited = false;
        Object.assign(this, deepCopy(DEF));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.update();
        this.updateError();
        this.inited = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.inited) {
            if (changes.error)
                this.updateError();
            else
                this.update();
        }
    }
    /**
     * @return {?}
     */
    update() {
        let /** @type {?} */ newSrc = this.src;
        // region: fix weixin & qq avatar size
        if (newSrc.includes('qlogo.cn')) {
            const /** @type {?} */ arr = newSrc.split('/'), /** @type {?} */
            size = arr[arr.length - 1];
            arr[arr.length - 1] =
                size === '0' || +size !== this.size ? this.size.toString() : size;
            newSrc = arr.join('/');
        }
        // endregion
        // region: remove https & http
        const /** @type {?} */ isHttp = newSrc.startsWith('http:'), /** @type {?} */
        isHttps = newSrc.startsWith('https:');
        if (isHttp || isHttps)
            newSrc = newSrc.substr(isHttp ? 5 : 6);
        // endregion
        this.render.setAttribute(this.el.nativeElement, 'src', newSrc);
    }
    /**
     * @return {?}
     */
    updateError() {
        this.render.setAttribute(this.el.nativeElement, 'onerror', `this.src='${this.error}';`);
    }
}
ImageDirective.decorators = [
    { type: Directive, args: [{ selector: '[_src]' },] },
];
/** @nocollapse */
ImageDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: AdImageConfig, },
];
ImageDirective.propDecorators = {
    "src": [{ type: Input, args: ['_src',] },],
    "size": [{ type: Input },],
    "error": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DIRECTIVES$1 = [ImageDirective];
class AdImageModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdImageModule, providers: [AdImageConfig] };
    }
}
AdImageModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, DelonUtilModule],
                declarations: [...DIRECTIVES$1],
                exports: [...DIRECTIVES$1],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AvatarListItemComponent {
}
AvatarListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'avatar-list-item, [avatar-list-item]',
                template: ``,
            },] },
];
/** @nocollapse */
AvatarListItemComponent.propDecorators = {
    "src": [{ type: Input },],
    "text": [{ type: Input },],
    "icon": [{ type: Input },],
    "tips": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AvatarListComponent {
    constructor() {
        this._size = '';
        this._avatarSize = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this._size = value === 'default' ? '' : value;
        switch (value) {
            case 'large':
            case 'small':
            case 'default':
                this._avatarSize = value;
                break;
            default:
                this._avatarSize = 'small';
                break;
        }
    }
}
AvatarListComponent.decorators = [
    { type: Component, args: [{
                selector: 'avatar-list',
                template: `
  <ul>
    <li *ngFor="let i of _items" class="item" [ngClass]="_size">
      <nz-tooltip *ngIf="i.tips" [nzTitle]="i.tips">
        <nz-avatar nz-tooltip [nzSrc]="i.src" [nzText]="i.text" [nzIcon]="i.icon" [nzSize]="_avatarSize"></nz-avatar>
      </nz-tooltip>
      <nz-avatar *ngIf="!i.tips" [nzSrc]="i.src" [nzText]="i.text" [nzIcon]="i.icon" [nzSize]="_avatarSize"></nz-avatar>
    </li>
  </ul>
  `,
                host: { '[class.ad-avatar-list]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
AvatarListComponent.propDecorators = {
    "size": [{ type: Input },],
    "_items": [{ type: ContentChildren, args: [AvatarListItemComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$2 = [AvatarListComponent, AvatarListItemComponent];
const ZORROMODULES = [NgZorroAntdModule];
class AdAvatarListModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdAvatarListModule, providers: [] };
    }
}
AdAvatarListModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ...ZORROMODULES],
                declarations: [...COMPONENTS$2],
                exports: [...COMPONENTS$2],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DescListItemComponent {
    constructor() {
        // region fields
        this._term = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set term(value) {
        if (value instanceof TemplateRef) {
            this._term = null;
            this._termTpl = value;
        }
        else
            this._term = value;
    }
}
DescListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'desc-list-item',
                template: `
  <ng-template #tpl>
    <div class="ad-desc-list__term" *ngIf="_term || _termTpl">
      <ng-container *ngIf="_term; else _termTpl">{{_term}}</ng-container>
    </div>
    <div class="ad-desc-list__detail"><ng-content></ng-content></div>
  </ng-template>
  `,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
DescListItemComponent.propDecorators = {
    "term": [{ type: Input },],
    "tpl": [{ type: ViewChild, args: ['tpl',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdDescListConfig {
    constructor() {
        /**
         * 布局方式
         */
        this.layout = 'horizontal';
        /**
         * 列表项间距，单位为 `px`
         */
        this.gutter = 32;
    }
}
AdDescListConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DescListComponent {
    /**
     * @param {?} cog
     * @param {?} el
     * @param {?} renderer
     */
    constructor(cog, el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // region fields
        this._title = '';
        this._gutter = 32;
        this.layout = 'horizontal';
        this._xs = 24;
        this._sm = 12;
        this._md = 8;
        this._col = 3;
        this._classMap = [];
        Object.assign(this, cog);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * 列表项间距，单位为 `px`
     * @return {?}
     */
    get gutter() {
        return this._gutter;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set gutter(value) {
        this._gutter = coerceNumberProperty(value);
    }
    /**
     * 指定信息最多分几列展示，最终一行几列由 col 配置结合响应式规则决定
     * @return {?}
     */
    get col() {
        return this._col;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set col(value) {
        this._col = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    setClass() {
        this._classMap.forEach(cls => this.renderer.removeClass(this.el.nativeElement, cls));
        this._classMap = ['desc-list', this.layout];
        if (this.size)
            this._classMap.push(this.size);
        this._classMap.forEach(cls => this.renderer.addClass(this.el.nativeElement, cls));
    }
    /**
     * @return {?}
     */
    setResponsive() {
        const /** @type {?} */ responsive = {
            1: { xs: 24 },
            2: { xs: 24, sm: 12 },
            3: { xs: 24, sm: 12, md: 8 },
            4: { xs: 24, sm: 12, md: 6 },
        }[this.col > 4 ? 4 : this.col];
        this._xs = responsive.xs;
        this._sm = responsive.sm;
        this._md = responsive.md;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClass();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.setClass();
        if (changes.col)
            this.setResponsive();
    }
}
DescListComponent.decorators = [
    { type: Component, args: [{
                selector: 'desc-list',
                template: `
  <div *ngIf="_title || _titleTpl" class="ad-desc-list__title">
    <ng-container *ngIf="_title; else _titleTpl">{{_title}}</ng-container>
  </div>
  <div nz-row [nzGutter]="gutter">
    <div nz-col [nzXs]="_xs" [nzSm]="_sm" [nzMd]="_md" *ngFor="let i of _items">
      <ng-template [ngTemplateOutlet]="i.tpl"></ng-template>
    </div>
  </div>
  `,
                host: { '[class.ad-desc-list]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
DescListComponent.ctorParameters = () => [
    { type: AdDescListConfig, },
    { type: ElementRef, },
    { type: Renderer2, },
];
DescListComponent.propDecorators = {
    "title": [{ type: Input },],
    "size": [{ type: Input },],
    "gutter": [{ type: Input },],
    "layout": [{ type: Input },],
    "col": [{ type: Input },],
    "_items": [{ type: ContentChildren, args: [DescListItemComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$3 = [DescListComponent, DescListItemComponent];
const ZORROMODULES$1 = [NgZorroAntdModule];
class AdDescListModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdDescListModule, providers: [AdDescListConfig] };
    }
}
AdDescListModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ...ZORROMODULES$1],
                declarations: [...COMPONENTS$3],
                exports: [...COMPONENTS$3],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EllipsisComponent {
    constructor() {
        this._lines = 3;
    }
    /**
     * 在按照行数截取下最大的行数，超过则截取省略
     * @return {?}
     */
    get lines() {
        return this._lines;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set lines(value) {
        this._lines = coerceNumberProperty(value);
    }
}
EllipsisComponent.decorators = [
    { type: Component, args: [{
                selector: 'ellipsis',
                template: `<ng-content></ng-content>`,
                host: { '[class.ad-ellipsis]': 'true' },
            },] },
];
/** @nocollapse */
EllipsisComponent.propDecorators = {
    "lines": [{ type: Input }, { type: HostBinding, args: ['style.-webkit-line-clamp',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$4 = [EllipsisComponent];
class AdEllipsisModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdEllipsisModule, providers: [] };
    }
}
AdEllipsisModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$4],
                exports: [...COMPONENTS$4],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GlobalFooterComponent {
}
GlobalFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'global-footer',
                template: `
  <div *ngIf="links && links.length > 0" class="links">
    <a *ngFor="let i of links" routerLink="{{i.href}}" [attr.target]="i.blankTarget">{{i.title}}</a>
  </div>
  <div class="copyright"><ng-content></ng-content></div>
  `,
                host: { '[class.ad-global-footer]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
GlobalFooterComponent.propDecorators = {
    "links": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$5 = [GlobalFooterComponent];
class AdGlobalFooterModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdGlobalFooterModule, providers: [] };
    }
}
AdGlobalFooterModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                declarations: [...COMPONENTS$5],
                exports: [...COMPONENTS$5],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ExceptionComponent {
    constructor() {
        this._img = '';
        this._title = '';
        this._desc = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        const /** @type {?} */ item = {
            403: {
                img: 'https://gw.alipayobjects.com/zos/rmsportal/wZcnGqRDyhPOEYFcZDnb.svg',
                title: '403',
                desc: '抱歉，你无权访问该页面',
            },
            404: {
                img: 'https://gw.alipayobjects.com/zos/rmsportal/KpnpchXsobRgLElEozzI.svg',
                title: '404',
                desc: '抱歉，你访问的页面不存在',
            },
            500: {
                img: 'https://gw.alipayobjects.com/zos/rmsportal/RVRUAYdCGeYNBWoKiIwB.svg',
                title: '500',
                desc: '抱歉，服务器出错了',
            },
        }[value];
        if (!item)
            return;
        this._img = item.img;
        this._title = item.title;
        this._desc = item.desc;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set img(value) {
        this._img = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        this._title = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set desc(value) {
        this._desc = value;
    }
}
ExceptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'exception',
                template: `
  <div class="img-block">
    <div class="img" [ngStyle]="{'background-image': 'url(' + _img + ')'}"></div>
  </div>
  <div class="cont">
    <h1 [innerHTML]="_title"></h1>
    <div class="desc" [innerHTML]="_desc"></div>
    <ng-template #defaultActions>
      <button nz-button [routerLink]="['/']" [nzType]="'primary'">返回首页</button>
      <ng-content></ng-content>
    </ng-template>
    <div class="actions" *ngIf="actions; else defaultActions">
      <ng-template [ngTemplateOutlet]="actions"></ng-template>
      <ng-content></ng-content>
    </div>
  </div>
  `,
                host: { '[class.ad-exception]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
ExceptionComponent.propDecorators = {
    "type": [{ type: Input },],
    "img": [{ type: Input },],
    "title": [{ type: Input },],
    "desc": [{ type: Input },],
    "actions": [{ type: ContentChild, args: ['actions',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$6 = [ExceptionComponent];
const ZORROMODULES$2 = [NgZorroAntdModule];
class AdExceptionModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdExceptionModule, providers: [] };
    }
}
AdExceptionModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, ...ZORROMODULES$2],
                declarations: [...COMPONENTS$6],
                exports: [...COMPONENTS$6],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NoticeIconComponent {
    constructor() {
        this.data = [];
        this._loading = false;
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
        this._popoverVisible = false;
        this.popoverVisibleChange = new EventEmitter();
    }
    /**
     * 图标上的消息总数
     * @return {?}
     */
    get count() {
        return this._count;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set count(value) {
        this._count = coerceNumberProperty(value);
    }
    /**
     * 弹出卡片加载状态
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = coerceBooleanProperty(value);
    }
    /**
     * 手动控制Popover显示
     * @return {?}
     */
    get popoverVisible() {
        return this._popoverVisible;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set popoverVisible(value) {
        this._popoverVisible = coerceBooleanProperty(value);
    }
    /**
     * @param {?} result
     * @return {?}
     */
    onVisibleChange(result) {
        this.popoverVisibleChange.emit(result);
    }
    /**
     * @param {?} i
     * @return {?}
     */
    onSelect(i) {
        this.select.emit(i);
    }
    /**
     * @param {?} title
     * @return {?}
     */
    onClear(title) {
        this.clear.emit(title);
    }
}
NoticeIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'notice-icon',
                template: `
  <nz-badge *ngIf="data?.length === 0" [nzCount]="count">
    <i class="anticon anticon-bell"></i>
  </nz-badge>
  <nz-popover *ngIf="data?.length > 0"
    [nzVisible]="popoverVisible" (nzVisibleChange)="onVisibleChange($event)" nzTrigger="click"
    nzPlacement="bottomRight"
    nzOverlayClassName="ad-notice-icon-con">
    <div nz-popover class="item">
      <nz-badge [nzCount]="count">
        <i class="anticon anticon-bell"></i>
      </nz-badge>
    </div>
    <ng-template #nzTemplate>
      <nz-spin [nzSpinning]="loading" [nzDelay]="0">
        <nz-tabset>
          <nz-tab *ngFor="let i of data" [nzTitle]="i.title">
            <notice-icon-tab
              [data]="i"
              (select)="onSelect($event)"
              (clear)="onClear($event)"></notice-icon-tab>
          </nz-tab>
        </nz-tabset>
      </nz-spin>
    </ng-template>
  </nz-popover>
  `,
                host: { '[class.ad-notice-icon]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
NoticeIconComponent.propDecorators = {
    "data": [{ type: Input },],
    "count": [{ type: Input },],
    "loading": [{ type: Input },],
    "select": [{ type: Output },],
    "clear": [{ type: Output },],
    "popoverVisible": [{ type: Input },],
    "popoverVisibleChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NoticeIconTabComponent {
    constructor() {
        this.select = new EventEmitter();
        this.clear = new EventEmitter();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onClick(item) {
        this.select.emit({
            title: this.data.title,
            item,
        });
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clear.emit(this.data.title);
    }
}
NoticeIconTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'notice-icon-tab',
                template: `
  <div *ngIf="data.list?.length === 0; else listTpl" class="not-found">
    <img *ngIf="data.emptyImage" src="{{data.emptyImage}}" alt="not found" />
    <p>{{data.emptyText || '无通知'}}</p>
  </div>
  <ng-template #listTpl>
    <nz-list [nzDataSource]="data.list" [nzRenderItem]="item">
      <ng-template #item let-item>
        <nz-list-item (click)="onClick(item)" [ngClass]="{'read': item.read}">
          <nz-list-item-meta
            [nzTitle]="nzTitle"
            [nzDescription]="nzDescription"
            [nzAvatar]="item.avatar">
            <ng-template #nzTitle>
              {{item.title}}
              <div class="extra" *ngIf="item.extra"><nz-tag [nzColor]="item.color">{{item.extra}}</nz-tag></div>
            </ng-template>
            <ng-template #nzDescription>
              <div *ngIf="item.description" class="description">{{item.description}}</div>
              <div *ngIf="item.datetime" class="datetime">{{item.datetime}}</div>
            </ng-template>
          </nz-list-item-meta>
        </nz-list-item>
      </ng-template>
    </nz-list>
    <div class="clear" (click)="onClear()">{{ data.clearText || '清空' }}</div>
  </ng-template>
  `,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
NoticeIconTabComponent.propDecorators = {
    "data": [{ type: Input },],
    "select": [{ type: Output },],
    "clear": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$7 = [NoticeIconComponent];
const ZORROMODULES$3 = [NgZorroAntdModule];
class AdNoticeIconModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdNoticeIconModule, providers: [] };
    }
}
AdNoticeIconModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ...ZORROMODULES$3],
                declarations: [...COMPONENTS$7, NoticeIconTabComponent],
                exports: [...COMPONENTS$7],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NumberInfoComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} cd
     */
    constructor(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        this._title = '';
        this._subTitle = '';
        this._total = '';
        this._isSubTotal = false;
        this._subTotal = '';
        /**
         * 状态样式
         */
        this.theme = 'light';
        this._gap = 8;
        this._classMap = [];
    }
    /**
     * 标题
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * 子标题
     * @param {?} value
     * @return {?}
     */
    set subTitle(value) {
        if (value instanceof TemplateRef) {
            this._subTitle = null;
            this._subTitleTpl = value;
        }
        else
            this._subTitle = value;
    }
    /**
     * 总量
     * @param {?} value
     * @return {?}
     */
    set total(value) {
        if (value instanceof TemplateRef) {
            this._total = null;
            this._totalTpl = value;
        }
        else
            this._total = '' + value;
    }
    /**
     * 总量后缀
     * @param {?} value
     * @return {?}
     */
    set subTotal(value) {
        if (value instanceof TemplateRef) {
            this._subTotal = null;
            this._subTotalTpl = value;
        }
        else
            this._subTotal = value;
        this._isSubTotal = !!value;
    }
    /**
     * 设置数字和描述直接的间距（像素）
     * @return {?}
     */
    get gap() {
        return this._gap;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set gap(value) {
        this._gap = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    setClass() {
        this._classMap.forEach(cls => this.renderer.removeClass(this.el.nativeElement, cls));
        this._classMap = [`number-info`];
        if (this.theme)
            this._classMap.push(this.theme);
        this._classMap.forEach(v => this.renderer.addClass(this.el.nativeElement, v));
        this.cd.detectChanges();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.setClass();
    }
}
NumberInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'number-info',
                template: `
  <div *ngIf="_title || _titleTpl" class="title"><ng-container *ngIf="_title; else _titleTpl">{{_title}}</ng-container></div>
  <div *ngIf="_subTitle || _subTitleTpl" class="sub-title"><ng-container *ngIf="_subTitle; else _subTitleTpl">{{_subTitle}}</ng-container></div>
  <div class="value" [ngStyle]="{'margin-top.px': gap}">
    <span><ng-container *ngIf="_total; else _totalTpl">{{_total}}</ng-container><em class="suffix" *ngIf="suffix">{{suffix}}</em></span>
    <span *ngIf="status || _isSubTotal" class="sub-total">
      <ng-container *ngIf="_subTotal; else _subTotalTpl">{{_subTotal}}</ng-container>
      <i *ngIf="status" class="anticon anticon-caret-{{status}}"></i>
    </span>
  </div>
  `,
                host: { '[class.ad-number-info]': 'true' },
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
NumberInfoComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NumberInfoComponent.propDecorators = {
    "title": [{ type: Input },],
    "subTitle": [{ type: Input },],
    "total": [{ type: Input },],
    "subTotal": [{ type: Input },],
    "suffix": [{ type: Input },],
    "status": [{ type: Input },],
    "theme": [{ type: Input },],
    "gap": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$8 = [NumberInfoComponent];
class AdNumberInfoModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdNumberInfoModule, providers: [] };
    }
}
AdNumberInfoModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$8],
                exports: [...COMPONENTS$8],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdPageHeaderConfig {
    constructor() {
        /**
         * 首页文本，若指定空表示不显示
         */
        this.home = '首页';
        /**
         * 首页链接
         */
        this.home_link = '/';
        /**
         * 自动生成导航，以当前路由从主菜单中定位
         */
        this.autoBreadcrumb = true;
    }
}
AdPageHeaderConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PageHeaderComponent {
    /**
     * @param {?} cog
     * @param {?} renderer
     * @param {?} route
     * @param {?} menuSrv
     * @param {?} i18nSrv
     */
    constructor(cog, renderer, route, menuSrv, i18nSrv) {
        this.renderer = renderer;
        this.route = route;
        this.menuSrv = menuSrv;
        this.i18nSrv = i18nSrv;
        this._autoBreadcrumb = true;
        this.paths = [];
        Object.assign(this, cog);
    }
    /**
     * 自动生成导航，以当前路由从主菜单中定位
     * @return {?}
     */
    get autoBreadcrumb() {
        return this._autoBreadcrumb;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoBreadcrumb(value) {
        this._autoBreadcrumb = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    genBreadcrumb() {
        if (this.breadcrumb || !this.autoBreadcrumb || !this.menuSrv)
            return;
        const /** @type {?} */ menus = this.menuSrv.getPathByUrl(this.route.url);
        if (menus.length <= 0)
            return;
        const /** @type {?} */ paths = [];
        menus.forEach(item => {
            if (typeof item.hideInBreadcrumb !== 'undefined' && item.hideInBreadcrumb)
                return;
            let /** @type {?} */ title = item.text;
            if (item.i18n && this.i18nSrv)
                title = this.i18nSrv.fanyi(item.i18n);
            paths.push({ title, link: item.link && [item.link] });
        });
        // add home
        if (this.home) {
            paths.splice(0, 0, {
                title: (this.home_i18n &&
                    this.i18nSrv &&
                    this.i18nSrv.fanyi(this.home_i18n)) ||
                    this.home,
                link: [this.home_link],
            });
        }
        this.paths = paths;
    }
    /**
     * @return {?}
     */
    checkContent() {
        if (isEmpty(this.conTpl.nativeElement)) {
            this.renderer.setAttribute(this.conTpl.nativeElement, 'hidden', '');
        }
        else {
            this.renderer.removeAttribute(this.conTpl.nativeElement, 'hidden');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.genBreadcrumb();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.checkContent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.autoBreadcrumb && !changes.autoBreadcrumb.firstChange)
            this.genBreadcrumb();
    }
}
PageHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'page-header',
                template: `
  <ng-container *ngIf="!breadcrumb; else breadcrumb">
    <nz-breadcrumb *ngIf="paths && paths.length > 0">
      <nz-breadcrumb-item *ngFor="let i of paths">
        <ng-container *ngIf="i.link"><a [routerLink]="i.link">{{i.title}}</a></ng-container>
        <ng-container *ngIf="!i.link">{{i.title}}</ng-container>
      </nz-breadcrumb-item>
    </nz-breadcrumb>
  </ng-container>
  <div class="detail">
    <div *ngIf="logo" class="logo"><ng-template [ngTemplateOutlet]="logo"></ng-template></div>
    <div class="main">
      <div class="row">
        <h1 *ngIf="title" class="title">{{title}}</h1>
        <div *ngIf="action" class="action"><ng-template [ngTemplateOutlet]="action"></ng-template></div>
      </div>
      <div class="row">
        <div class="desc" (cdkObserveContent)="checkContent()" #conTpl><ng-content></ng-content><ng-template [ngTemplateOutlet]="content"></ng-template></div>
        <div *ngIf="extra" class="extra"><ng-template [ngTemplateOutlet]="extra"></ng-template></div>
      </div>
    </div>
  </div>
  <ng-template [ngTemplateOutlet]="tab"></ng-template>
  `,
                host: {
                    '[class.content__title]': 'true',
                    '[class.ad-page-header]': 'true',
                },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
PageHeaderComponent.ctorParameters = () => [
    { type: AdPageHeaderConfig, },
    { type: Renderer2, },
    { type: Router, },
    { type: MenuService, decorators: [{ type: Optional },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
];
PageHeaderComponent.propDecorators = {
    "conTpl": [{ type: ViewChild, args: ['conTpl',] },],
    "title": [{ type: Input },],
    "home": [{ type: Input },],
    "home_link": [{ type: Input },],
    "home_i18n": [{ type: Input },],
    "autoBreadcrumb": [{ type: Input },],
    "breadcrumb": [{ type: ContentChild, args: ['breadcrumb',] },],
    "logo": [{ type: ContentChild, args: ['logo',] },],
    "action": [{ type: ContentChild, args: ['action',] },],
    "content": [{ type: ContentChild, args: ['content',] },],
    "extra": [{ type: ContentChild, args: ['extra',] },],
    "tab": [{ type: ContentChild, args: ['tab',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$9 = [PageHeaderComponent];
const ZORROMODULES$4 = [NgZorroAntdModule];
class AdPageHeaderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdPageHeaderModule, providers: [AdPageHeaderConfig] };
    }
}
AdPageHeaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, DelonUtilModule, ...ZORROMODULES$4],
                declarations: [...COMPONENTS$9],
                exports: [...COMPONENTS$9],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ResultComponent {
    constructor() {
        // region: fields
        this._type = '';
        this._icon = '';
        this._title = '';
        this._description = '';
        this._extra = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = value;
        switch (value) {
            case 'success':
                this._icon = 'check-circle';
                break;
            case 'error':
                this._icon = 'close-circle';
                break;
            default:
                this._icon = value;
                break;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set description(value) {
        if (value instanceof TemplateRef) {
            this._description = null;
            this._descriptionTpl = value;
        }
        else
            this._description = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set extra(value) {
        if (value instanceof TemplateRef) {
            this._extra = null;
            this._extraTpl = value;
        }
        else
            this._extra = value;
    }
}
ResultComponent.decorators = [
    { type: Component, args: [{
                selector: 'result',
                template: `
  <div class="icon"><i class="anticon anticon-{{_icon}} {{_type}}"></i></div>
  <div class="title"><ng-container *ngIf="_title; else _titleTpl">{{_title}}</ng-container></div>
  <div *ngIf="_description || _descriptionTpl" class="description"><ng-container *ngIf="_description; else _descriptionTpl">{{_description}}</ng-container></div>
  <div *ngIf="_extra || _extraTpl" class="extra">
    <ng-container *ngIf="_extra; else _extraTpl">{{_extra}}</ng-container>
  </div>
  <div class="actions"><ng-content></ng-content></div>
  `,
                host: { '[class.ad-result]': 'true' },
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
ResultComponent.propDecorators = {
    "type": [{ type: Input },],
    "title": [{ type: Input },],
    "description": [{ type: Input },],
    "extra": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$10 = [ResultComponent];
class AdResultModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdResultModule, providers: [] };
    }
}
AdResultModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$10],
                exports: [...COMPONENTS$10],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StandardFormRowComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._classMap = [];
    }
    /**
     * 是否整行
     * @return {?}
     */
    get block() {
        return this._block;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set block(value) {
        this._block = coerceBooleanProperty(value);
    }
    /**
     * 是否最后一行
     * @return {?}
     */
    get last() {
        return this._last;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set last(value) {
        this._last = coerceBooleanProperty(value);
    }
    /**
     * 是否网格布局
     * @return {?}
     */
    get grid() {
        return this._grid;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set grid(value) {
        this._grid = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    setClass() {
        this._classMap.forEach(cls => this.renderer.removeClass(this.el.nativeElement, cls));
        this._classMap = [`standard-form-row`];
        if (this.block)
            this._classMap.push('block');
        if (this.grid)
            this._classMap.push('grid');
        if (this.last)
            this._classMap.push('last');
        this._classMap.forEach(v => this.renderer.addClass(this.el.nativeElement, v));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.setClass();
    }
}
StandardFormRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'standard-form-row',
                template: `
  <div *ngIf="title" class="label"><span>{{title}}</span></div>
  <div class="control"><ng-content></ng-content></div>
  `,
                host: { '[class.ad-standard-form-row]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
StandardFormRowComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
StandardFormRowComponent.propDecorators = {
    "title": [{ type: Input },],
    "block": [{ type: Input },],
    "last": [{ type: Input },],
    "grid": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$11 = [StandardFormRowComponent];
class AdStandardFormRowModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdStandardFormRowModule, providers: [] };
    }
}
AdStandardFormRowModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$11],
                exports: [...COMPONENTS$11],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TagSelectComponent {
    constructor() {
        this._expandable = true;
        this.expand = false;
        this.change = new EventEmitter();
    }
    /**
     * 是否启用 `展开与收进`
     * @return {?}
     */
    get expandable() {
        return this._expandable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set expandable(value) {
        this._expandable = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    trigger() {
        this.expand = !this.expand;
        this.change.emit(this.expand);
    }
}
TagSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'tag-select',
                template: `
    <ng-content></ng-content>
    <a *ngIf="expandable" class="trigger" (click)="trigger()">{{expand ? '收起' : '展开'}}<i class="anticon anticon-{{expand ? 'up' : 'down'}} ml-sm"></i></a>`,
                host: { '[class.ad-tag-select]': 'true' },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
TagSelectComponent.propDecorators = {
    "expandable": [{ type: HostBinding, args: ['class.has-expand',] }, { type: Input },],
    "expand": [{ type: HostBinding, args: ['class.expanded',] },],
    "change": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$12 = [TagSelectComponent];
class AdTagSelectModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdTagSelectModule, providers: [] };
    }
}
AdTagSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$12],
                exports: [...COMPONENTS$12],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TrendComponent {
    constructor() {
        this._colorful = true;
    }
    /**
     * 是否彩色标记
     * @return {?}
     */
    get colorful() {
        return this._colorful;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set colorful(value) {
        this._colorful = coerceBooleanProperty(value);
    }
}
TrendComponent.decorators = [
    { type: Component, args: [{
                selector: 'trend',
                template: `
  <ng-content></ng-content>
  <span *ngIf="flag" class="{{flag}}"><i class="anticon anticon-caret-{{flag}}"></i></span>
  `,
                host: {
                    '[class.ad-trend]': 'true',
                    '[class.grey]': '!colorful',
                },
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
TrendComponent.propDecorators = {
    "flag": [{ type: Input },],
    "colorful": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$13 = [TrendComponent];
class AdTrendModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdTrendModule, providers: [] };
    }
}
AdTrendModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$13],
                exports: [...COMPONENTS$13],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CountDownComponent {
    constructor() {
        this.begin = new EventEmitter();
        this.notify = new EventEmitter();
        this.end = new EventEmitter();
    }
    /**
     * 目标时间
     * @param {?} value
     * @return {?}
     */
    set target(value) {
        this.config = {
            template: `$!h!:$!m!:$!s!`,
            stopTime: typeof value === 'number'
                ? addSeconds(new Date(), value).valueOf()
                : format(value, 'x'),
        };
    }
    /**
     * @return {?}
     */
    _start() {
        this.begin.emit();
    }
    /**
     * @param {?} time
     * @return {?}
     */
    _notify(time) {
        this.notify.emit(time);
    }
    /**
     * @return {?}
     */
    _finished() {
        this.end.emit();
    }
}
CountDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'count-down',
                template: `
    <countdown *ngIf="config" [config]="config"
      (start)="_start()"
      (finished)="_finished()"
      (notify)="_notify($event)"></countdown>
  `,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
CountDownComponent.propDecorators = {
    "config": [{ type: Input },],
    "target": [{ type: Input },],
    "begin": [{ type: Output },],
    "notify": [{ type: Output },],
    "end": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$14 = [CountDownComponent];
class AdCountDownModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdCountDownModule, providers: [] };
    }
}
AdCountDownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, CountdownModule],
                declarations: [...COMPONENTS$14],
                exports: [...COMPONENTS$14],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdSimpleTableConfig {
    constructor() {
        /**
         * pagination中每页显示条目数下拉框值
         */
        this.pageSizeOptions = [10, 20, 30, 40, 50];
        /**
         * 是否显示总数据量，默认：`共 {{total}} 条`
         */
        this.showTotal = `共 {{total}} 条`;
    }
}
AdSimpleTableConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DA_XLSX_CONFIG = new InjectionToken('DA_XLSX_CONFIG');
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class XlsxService {
    /**
     * @param {?} config
     * @param {?} http
     * @param {?} lazy
     */
    constructor(config, http$$1, lazy) {
        this.config = config;
        this.http = http$$1;
        this.lazy = lazy;
    }
    /**
     * @return {?}
     */
    init() {
        const /** @type {?} */ config = Object.assign({
            url: `//cdn.bootcss.com/xlsx/0.11.17/xlsx.full.min.js`,
            modules: [],
        }, this.config);
        return this.lazy.load([config.url].concat(config.modules));
    }
    /**
     * @param {?} wb
     * @return {?}
     */
    read(wb) {
        const /** @type {?} */ ret = {};
        wb.SheetNames.forEach(name => {
            const /** @type {?} */ sheet = wb.Sheets[name];
            ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        });
        return ret;
    }
    /**
     * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
     * @param {?} fileOrUrl
     * @return {?}
     */
    import(fileOrUrl) {
        return new Promise((resolver, reject) => {
            this.init().then(() => {
                // from url
                if (typeof fileOrUrl === 'string') {
                    this.http
                        .request('GET', fileOrUrl, { responseType: 'arraybuffer' })
                        .subscribe((res) => {
                        const /** @type {?} */ wb = XLSX.read(new Uint8Array(res), { type: 'array' });
                        resolver(this.read(wb));
                    }, (err) => {
                        reject(err);
                    });
                    return;
                }
                // from file
                const /** @type {?} */ reader = new FileReader();
                reader.onload = (e) => {
                    const /** @type {?} */ wb = XLSX.read(e.target.result, { type: 'binary' });
                    resolver(this.read(wb));
                };
                reader.readAsArrayBuffer(fileOrUrl);
            });
        });
    }
    /**
     * 导出
     * @param {?} options
     * @return {?}
     */
    export(options) {
        return this.init().then(() => {
            const /** @type {?} */ wb = XLSX.utils.book_new();
            if (Array.isArray(options.sheets)) {
                (/** @type {?} */ (options.sheets)).forEach((value, index) => {
                    const /** @type {?} */ ws = XLSX.utils.aoa_to_sheet(value.data);
                    XLSX.utils.book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);
                });
            }
            else {
                wb.SheetNames = Object.keys(options.sheets);
                wb.Sheets = options.sheets;
            }
            if (options.callback)
                options.callback(wb);
            const /** @type {?} */ wbout = XLSX.write(wb, Object.assign({
                bookType: 'xlsx',
                type: 'array',
            }, options.opts));
            saveAs(new Blob([wbout], { type: 'application/octet-stream' }), options.filename || 'export.xlsx');
        });
    }
}
XlsxService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
XlsxService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DA_XLSX_CONFIG,] },] },
    { type: HttpClient, },
    { type: LazyService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimpleTableExport {
    /**
     * @param {?} xlsxSrv
     */
    constructor(xlsxSrv) {
        this.xlsxSrv = xlsxSrv;
    }
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    _stGet(item, col) {
        const /** @type {?} */ ret = { t: 's', v: '' };
        if (col.format) {
            ret.v = col.format(item, col);
        }
        else {
            const /** @type {?} */ val = deepGet(item, /** @type {?} */ (col.index), '');
            if (typeof val === 'undefined') {
                ret.v = '';
            }
            else {
                ret.v = val;
                switch (col.type) {
                    case 'currency':
                        ret.t = 'n';
                        break;
                    case 'date':
                        ret.t = 'd';
                        break;
                    case 'yn':
                        ret.v = ret === col.ynTruth ? col.ynYes || '是' : col.ynNo || '否';
                        break;
                }
            }
        }
        return ret;
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    genSheet(opt) {
        const /** @type {?} */ sheets = {};
        const /** @type {?} */ sheet = (sheets[opt.sheetname || 'Sheet1'] = {});
        const /** @type {?} */ colData = opt._c.filter(w => w.exported !== false &&
            w.index &&
            (!w.buttons || w.buttons.length === 0));
        const /** @type {?} */ cc = colData.length, /** @type {?} */
        dc = opt._d.length;
        // region: column
        for (let /** @type {?} */ i = 0; i < cc; i++) {
            sheet[`${String.fromCharCode(65 + i)}1`] = {
                t: 's',
                v: colData[i].title,
            };
        }
        // endregion
        // region: content
        for (let /** @type {?} */ i = 0; i < dc; i++) {
            for (let /** @type {?} */ j = 0; j < cc; j++) {
                sheet[`${String.fromCharCode(65 + j)}${i + 2}`] = this._stGet(opt._d[i], colData[j]);
            }
        }
        // endregion
        sheet['!ref'] = `A1:${String.fromCharCode(65 + cc - 1)}${dc + 1}`;
        return sheets;
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    export(opt) {
        if (!this.xlsxSrv)
            throw new Error(`muse be import 'AdXlsxModule' module, but got null`);
        const /** @type {?} */ sheets = this.genSheet(opt);
        return this.xlsxSrv.export({
            sheets,
            filename: opt.filename,
            callback: opt.callback,
        });
    }
}
SimpleTableExport.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SimpleTableExport.ctorParameters = () => [
    { type: XlsxService, decorators: [{ type: Optional },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimpleTableComponent {
    /**
     * @param {?} defConfig
     * @param {?} http
     * @param {?} el
     * @param {?} renderer
     * @param {?} exportSrv
     * @param {?} acl
     * @param {?} i18nSrv
     * @param {?} modal
     * @param {?} currenty
     * @param {?} date
     * @param {?} yn
     * @param {?} number
     * @param {?} doc
     */
    constructor(defConfig, http$$1, el, renderer, exportSrv, acl$$1, i18nSrv, modal, currenty, date, yn, number, doc) {
        this.defConfig = defConfig;
        this.http = http$$1;
        this.el = el;
        this.renderer = renderer;
        this.exportSrv = exportSrv;
        this.acl = acl$$1;
        this.i18nSrv = i18nSrv;
        this.modal = modal;
        this.currenty = currenty;
        this.date = date;
        this.yn = yn;
        this.number = number;
        this.doc = doc;
        this._inited = false;
        this._data = [];
        this._isAjax = false;
        this._isPagination = true;
        this._classMap = [];
        this._allChecked = false;
        this._indeterminate = false;
        this._columns = [];
        /**
         * 请求方法
         */
        this.reqMehtod = 'GET';
        this._reqReName = { pi: 'pi', ps: 'ps' };
        /**
         * 请求异常时回调
         */
        this.reqError = new EventEmitter();
        this._resReName = { total: ['total'], list: ['list'] };
        /**
         * 列描述
         */
        this.columns = [];
        this._ps = 10;
        this._pi = 1;
        this._total = 0;
        this._loading = false;
        this._loadingDelay = 0;
        this._bordered = false;
        /**
         * table大小
         */
        this.size = 'default';
        this._showSizeChanger = false;
        this._showQuickJumper = false;
        /**
         * 是否显示总数据量
         */
        this._totalTpl = ``;
        this._isPageIndexReset = true;
        /**
         * 分页方向
         */
        this.pagePlacement = 'right';
        this._toTopInChange = true;
        this._toTopOffset = 100;
        this._multiSort = false;
        /**
         * 页码、每页数量变化时回调
         */
        this.change = new EventEmitter();
        /**
         * checkbox变化时回调，参数为当前所选清单
         */
        this.checkboxChange = new EventEmitter();
        /**
         * radio变化时回调，参数为当前所选
         */
        this.radioChange = new EventEmitter();
        /**
         * 排序回调
         */
        this.sortChange = new EventEmitter();
        /**
         * Filter回调
         */
        this.filterChange = new EventEmitter();
        // endregion
        // region: sort
        this._sortMap = {};
        this._sortColumn = null;
        Object.assign(this, deepCopy(defConfig));
    }
    /**
     * 重命名请求参数 `pi`、`ps`
     * - `{ pi: 'Page' }` => `pi` 会被替换成 Page
     * @param {?} value
     * @return {?}
     */
    set reqReName(value) {
        this._reqReName = Object.assign(this._reqReName, value);
    }
    /**
     * @return {?}
     */
    get reqReName() {
        return this._reqReName;
    }
    /**
     * 重命名返回参数 `total`、`list`
     * - `{ total: 'Total' }` => Total 会被当作 `total`
     * @param {?} cur
     * @return {?}
     */
    set resReName(cur) {
        let /** @type {?} */ ret = {};
        if (cur) {
            if (cur.list)
                ret.list = Array.isArray(cur.list) ? cur.list : cur.list.split('.');
            else
                ret.list = ['list'];
            if (cur.total)
                ret.total = Array.isArray(cur.total) ? cur.total : cur.total.split('.');
            else
                ret.total = ['total'];
        }
        else {
            ret = { total: ['total'], list: ['list'] };
        }
        this._resReName = ret;
    }
    /**
     * @return {?}
     */
    get resReName() {
        return this._resReName;
    }
    /**
     * 每页数量，当设置为 `0` 表示不分页，默认：`10`
     * @return {?}
     */
    get ps() {
        return this._ps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ps(value) {
        this._ps = coerceNumberProperty(value);
    }
    /**
     * 当前页码
     * @return {?}
     */
    get pi() {
        return this._pi;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pi(value) {
        this._pi = coerceNumberProperty(value);
    }
    /**
     * 数据总量
     * @return {?}
     */
    get total() {
        return this._total;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set total(value) {
        this._total = coerceNumberProperty(value);
    }
    /**
     * 是否显示分页器
     * @return {?}
     */
    get showPagination() {
        return this._showPagination;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showPagination(value) {
        this._showPagination = coerceBooleanProperty(value);
    }
    /**
     * 是否显示Loading
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = coerceBooleanProperty(value);
    }
    /**
     * 延迟显示加载效果的时间（防止闪烁）
     * @return {?}
     */
    get loadingDelay() {
        return this._loadingDelay;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set loadingDelay(value) {
        this._loadingDelay = coerceNumberProperty(value);
    }
    /**
     * 是否显示边框
     * @return {?}
     */
    get bordered() {
        return this._bordered;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set bordered(value) {
        this._bordered = coerceBooleanProperty(value);
    }
    /**
     * 是否显示pagination中改变页数
     * @return {?}
     */
    get showSizeChanger() {
        return this._showSizeChanger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showSizeChanger(value) {
        this._showSizeChanger = coerceBooleanProperty(value);
    }
    /**
     * 是否显示pagination中快速跳转
     * @return {?}
     */
    get showQuickJumper() {
        return this._showQuickJumper;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showQuickJumper(value) {
        this._showQuickJumper = coerceBooleanProperty(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showTotal(value) {
        if (typeof value === 'string' && value.length) {
            this._totalTpl = value;
        }
        else if (coerceBooleanProperty(value)) {
            this._totalTpl = `共 {{total}} 条`;
        }
        else {
            this._totalTpl = '';
        }
    }
    /**
     * @param {?} total
     * @param {?} range
     * @return {?}
     */
    renderTotal(total, range) {
        return this._totalTpl
            ? this._totalTpl
                .replace('{{total}}', total)
                .replace('{{range[0]}}', range[0])
                .replace('{{range[1]}}', range[1])
            : '';
    }
    /**
     * 数据变更后是否保留在数据变更前的页码
     * @return {?}
     */
    get isPageIndexReset() {
        return this._isPageIndexReset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isPageIndexReset(value) {
        this._isPageIndexReset = coerceBooleanProperty(value);
    }
    /**
     * 切换分页时返回顶部
     * @return {?}
     */
    get toTopInChange() {
        return this._toTopInChange;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set toTopInChange(value) {
        this._toTopInChange = coerceBooleanProperty(value);
    }
    /**
     * 返回顶部偏移值
     * @return {?}
     */
    get toTopOffset() {
        return this._toTopOffset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set toTopOffset(value) {
        this._toTopOffset = coerceNumberProperty(value);
    }
    /**
     * 是否多排序，建议后端支持时使用，默认：`false`
     * @return {?}
     */
    get multiSort() {
        return this._multiSort;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiSort(value) {
        this._multiSort = coerceBooleanProperty(value);
    }
    /**
     * @param {?=} url
     * @return {?}
     */
    getAjaxData(url) {
        const /** @type {?} */ params = Object.assign({
            [this.reqReName.pi]: this.pi,
            [this.reqReName.ps]: this.ps,
        }, this.extraParams, this.getReqSortMap(), this.getReqFilterMap());
        return this.http
            .request(this.reqMehtod || 'GET', url || this._url, {
            params,
            body: this.reqBody,
            headers: this.reqHeaders,
        })
            .pipe(map((res) => {
            // list
            const /** @type {?} */ ret = deepGet(res, /** @type {?} */ (this.resReName.list), []);
            if (ret == null || !Array.isArray(ret))
                return [];
            // total
            const /** @type {?} */ retTotal = this.resReName.total &&
                deepGet(res, /** @type {?} */ (this.resReName.total), null);
            this.total = retTotal == null ? this.total || 0 : +retTotal;
            return /** @type {?} */ (ret);
        }));
    }
    /**
     * 根据页码重新加载数据
     *
     * @param {?=} pi 指定当前页码，默认：`1`
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    load(pi = 1, extraParams) {
        if (pi !== -1)
            this.pi = pi;
        this.extraParams = extraParams || null;
        this._change('pi');
    }
    /**
     * 重新刷新当前页
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    reload(extraParams) {
        this.load(-1, extraParams);
    }
    /**
     * 重置且重新设置 `pi` 为 `1`
     *
     * @param {?=} extraParams 重新指定 `extraParams` 值
     * @return {?}
     */
    reset(extraParams) {
        this.load(1, extraParams);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    _change(type) {
        if (!this._inited)
            return;
        this._genAjax();
        this._genData();
        this._toTop();
        this.change.emit({
            type: type,
            pi: this.pi,
            ps: this.ps,
            total: this.total,
        });
    }
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    _genAjax(forceRefresh = false) {
        if (!this._isAjax)
            return;
        this.loading = true;
        if (forceRefresh === true)
            this.pi = 1;
        this.getAjaxData().subscribe((res) => this._subscribeData(res), err => {
            this.loading = false;
            this.reqError.emit(err);
        });
    }
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    _genData(forceRefresh = false) {
        if (this._isAjax)
            return;
        let /** @type {?} */ data = /** @type {?} */ (this.data) || [];
        // sort
        data = data.slice(0);
        const /** @type {?} */ sorterFn = this.getSorterFn();
        if (sorterFn) {
            data = this.recursiveSort(data, sorterFn);
        }
        // filter
        this._columns.filter(w => w.filters && w.filters.length).forEach(c => {
            const /** @type {?} */ values = c.filters.filter(w => w.checked);
            if (values.length === 0)
                return;
            const /** @type {?} */ onFilter = c.filter;
            data = data.filter(record => {
                return values.some(v => onFilter(v, record));
            });
        });
        if (forceRefresh) {
            if (this.isPageIndexReset) {
                this.pi = 1;
            }
            else {
                const /** @type {?} */ maxPageIndex = Math.ceil(data.length / this.ps);
                this.pi = !this.pi
                    ? 1
                    : this.pi > maxPageIndex
                        ? maxPageIndex
                        : this.pi;
            }
        }
        this.total = data.length;
        this._isPagination =
            typeof this.showPagination === 'undefined'
                ? this.ps > 0 && this.total > this.ps
                : this.showPagination;
        this._subscribeData(this._isPagination
            ? data.slice((this.pi - 1) * this.ps, this.pi * this.ps)
            : data);
    }
    /**
     * @return {?}
     */
    _toTop() {
        if (!this.toTopInChange)
            return;
        if (this.scroll) {
            (/** @type {?} */ (this.el.nativeElement))
                .querySelector('.ant-table-body')
                .scrollTo(0, 0);
            return;
        }
        if (this.el.nativeElement.scrollIntoView)
            this.el.nativeElement.scrollIntoView();
        // todo: toTopOffset
        // fix header height
        this.doc.documentElement.scrollTop -= this.toTopOffset;
    }
    /**
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    _get(item, col) {
        if (col.format)
            return col.format(item, col);
        const /** @type {?} */ value = deepGet(item, /** @type {?} */ (col.index), col.default);
        if (typeof value === 'undefined')
            return col.default;
        let /** @type {?} */ ret = value;
        switch (col.type) {
            case 'img':
                ret = `<img src="${value}" class="img">`;
                break;
            case 'number':
                ret = this.number.transform(value, col.numberDigits);
                break;
            case 'currency':
                ret = this.currenty.transform(value);
                break;
            case 'date':
                ret = this.date.transform(value, col.dateFormat);
                break;
            case 'yn':
                ret = this.yn.transform(value === col.ynTruth, col.ynYes, col.ynNo);
                break;
        }
        return ret || col.default;
    }
    /**
     * @param {?} e
     * @param {?} item
     * @param {?} col
     * @return {?}
     */
    _click(e, item, col) {
        e.preventDefault();
        e.stopPropagation();
        if (col.click)
            col.click(item, this);
        return false;
    }
    /**
     * @param {?=} urlOrData
     * @return {?}
     */
    getDataObs(urlOrData) {
        return urlOrData || Array.isArray(this.data)
            ? of$1((/** @type {?} */ (urlOrData)) || (/** @type {?} */ (this.data)))
            : (/** @type {?} */ (this.data));
    }
    /**
     * @return {?}
     */
    processData() {
        if (!this.data) {
            this._isAjax = false;
            this.data = [];
            return;
        }
        this._isAjax = false;
        if (typeof this.data === 'string') {
            this._url = /** @type {?} */ (this.data);
            this._isAjax = true;
            this._genAjax(true);
        }
        else if (Array.isArray(this.data)) {
            this._genData(true);
        }
        else {
            if (!this.data$) {
                this.data$ = /** @type {?} */ (this.data
                    .pipe(tap(() => (this.loading = true)))
                    .subscribe(res => {
                    this.data = res;
                    this._genData(true);
                }));
            }
        }
    }
    /**
     * @param {?} res
     * @return {?}
     */
    _subscribeData(res) {
        if (this.preDataChange)
            res = this.preDataChange(res);
        this.loading = false;
        this._data = res;
        this._refCheck();
    }
    /**
     * @return {?}
     */
    getReqSortMap() {
        const /** @type {?} */ ret = {};
        if (!this._sortOrder)
            return ret;
        if (this.multiSort) {
            Object.keys(this._sortMap).forEach(key => {
                const /** @type {?} */ item = this._sortMap[key];
                if (item.v) {
                    ret[item.key] =
                        (item.column.sortReName || this.sortReName || {})[item.v] || item.v;
                }
            });
        }
        else {
            const /** @type {?} */ mapData = this._sortMap[this._sortIndex];
            ret[mapData.key] =
                (this._sortColumn.sortReName || this.sortReName || {})[mapData.v] ||
                    mapData.v;
        }
        return ret;
    }
    /**
     * @param {?} data
     * @param {?} sorterFn
     * @return {?}
     */
    recursiveSort(data, sorterFn) {
        const /** @type {?} */ childrenColumnName = 'children';
        return data.sort(sorterFn).map((item) => item[childrenColumnName]
            ? Object.assign({}, item, { [childrenColumnName]: this.recursiveSort(item[childrenColumnName], sorterFn) }) : item);
    }
    /**
     * @return {?}
     */
    getSorterFn() {
        // _sortMap
        if (!this._sortOrder ||
            !this._sortColumn ||
            typeof this._sortColumn.sorter !== 'function') {
            return;
        }
        return (a, b) => {
            const /** @type {?} */ result = (/** @type {?} */ (((this._sortColumn)).sorter))(a, b);
            if (result !== 0) {
                return this._sortOrder === 'descend' ? -result : result;
            }
            return 0;
        };
    }
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    sort(index, value) {
        if (this._sortIndex === index && this._sortOrder === value)
            return;
        this._sortColumn = this._columns[index];
        this._sortOrder = value;
        this._sortIndex = index;
        if (this.multiSort) {
            this._sortMap[index].v = value;
        }
        else {
            Object.keys(this._sortMap).forEach(key => (this._sortMap[key].v = +key === index ? value : null));
        }
        this._genAjax(true);
        this._genData(true);
        this.sortChange.emit({
            value,
            map: this.getReqSortMap(),
            column: this._sortColumn,
        });
    }
    /**
     * @return {?}
     */
    getReqFilterMap() {
        let /** @type {?} */ ret = {};
        this._columns.filter(w => w.filtered === true).forEach(col => {
            const /** @type {?} */ values = col.filters.filter(f => f.checked === true);
            let /** @type {?} */ obj = {};
            if (col.filterReName)
                obj = col.filterReName(col.filters, col);
            else
                obj[col.filterKey || col["indexKey"]] = values.map(i => i.value).join(',');
            ret = Object.assign(ret, obj);
        });
        return ret;
    }
    /**
     * @param {?} col
     * @return {?}
     */
    handleFilter(col) {
        col.filtered = col.filters.findIndex(w => w.checked) !== -1;
        this._genAjax(true);
        this._genData(true);
        this.filterChange.emit(col);
    }
    /**
     * @param {?} col
     * @return {?}
     */
    filterConfirm(col) {
        this.handleFilter(col);
    }
    /**
     * @param {?} col
     * @return {?}
     */
    filterClear(col) {
        col.filters.forEach(i => (i.checked = false));
        this.handleFilter(col);
    }
    /**
     * @param {?} col
     * @param {?} item
     * @param {?} checked
     * @return {?}
     */
    filterRadio(col, item, checked) {
        col.filters.forEach(i => (i.checked = false));
        item.checked = checked;
    }
    /**
     * 清除所有 `checkbox`
     * @return {?}
     */
    clearCheck() {
        return this._checkAll(false);
    }
    /**
     * @param {?=} checked
     * @return {?}
     */
    _checkAll(checked) {
        checked = typeof checked === 'undefined' ? this._allChecked : checked;
        this._data.filter(w => !w.disabled).forEach(i => (i.checked = checked));
        return this._refCheck()._checkNotify();
    }
    /**
     * @param {?} i
     * @param {?} value
     * @return {?}
     */
    _checkSelection(i, value) {
        i.checked = value;
        return this._refCheck()._checkNotify();
    }
    /**
     * @return {?}
     */
    _refCheck() {
        const /** @type {?} */ validData = this._data.filter(w => !w.disabled);
        const /** @type {?} */ checkedList = validData.filter(w => w.checked === true);
        this._allChecked =
            checkedList.length > 0 && checkedList.length === validData.length;
        const /** @type {?} */ allUnChecked = validData.every(value => !value.checked);
        this._indeterminate = !this._allChecked && !allUnChecked;
        return this;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    _rowSelection(row) {
        if (row.select)
            row.select(this._data);
        return this._refCheck()._checkNotify();
    }
    /**
     * @return {?}
     */
    _checkNotify() {
        this.checkboxChange.emit(this._data.filter(w => !w.disabled && w.checked === true));
        return this;
    }
    /**
     * 清除所有 `radio`
     * @return {?}
     */
    clearRadio() {
        this._data.filter(w => w.checked).forEach(item => (item.checked = false));
        this.radioChange.emit(null);
        return this;
    }
    /**
     * @param {?} idx
     * @param {?} checked
     * @param {?} item
     * @return {?}
     */
    _refRadio(idx, checked, item) {
        if (item.disabled === true)
            return;
        this._data.filter(w => !w.disabled).forEach(i => (i.checked = false));
        item.checked = checked;
        this.radioChange.emit(item);
        return this;
    }
    /**
     * @param {?} list
     * @return {?}
     */
    btnCoerceIf(list) {
        for (const /** @type {?} */ item of list) {
            if (!item.if)
                item.if = () => true;
            if (!item.children)
                item.children = [];
            if (item.children.length > 0)
                this.btnCoerceIf(item.children);
        }
    }
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    btnClick(record, btn) {
        if (btn.type === 'modal' || btn.type === 'static') {
            const /** @type {?} */ obj = {};
            obj[btn.paramName || this.defConfig.modalParamsName || 'record'] = record;
            (/** @type {?} */ (this.modal[btn.type === 'modal' ? 'open' : 'static']))(btn.component, Object.assign(obj, btn.params && btn.params(record)), btn.size, btn.modalOptions)
                .pipe(filter(w => typeof w !== 'undefined'))
                .subscribe(res => {
                if (btn.click)
                    this.btnCallback(record, btn, res);
            });
            return;
        }
        this.btnCallback(record, btn);
    }
    /**
     * @param {?} record
     * @param {?} btn
     * @param {?=} modal
     * @return {?}
     */
    btnCallback(record, btn, modal) {
        if (!btn.click)
            return;
        if (typeof btn.click === 'string') {
            switch (btn.click) {
                case 'load':
                    this.load();
                    break;
                case 'reload':
                    this.reload();
                    break;
            }
        }
        else {
            btn.click(record, modal, this);
        }
    }
    /**
     * @param {?} record
     * @param {?} btn
     * @return {?}
     */
    btnText(record, btn) {
        if (btn.format)
            return btn.format(record, btn);
        return btn.text;
    }
    /**
     * @param {?} list
     * @return {?}
     */
    fixedCoerce(list) {
        list.forEach((item, idx) => {
            if (item.fixed && item.width) {
                if (item.fixed === 'left') {
                    item["_left"] = idx === 0 ? '0px' : list[idx - 1].width;
                }
                else if (item.fixed === 'right') {
                    item["_right"] = idx === list.length - 1 ? '0px' : list[idx + 1].width;
                }
            }
        });
    }
    /**
     * 导出Excel，确保已经注册 `AdXlsxModule`
     * @param {?=} urlOrData 重新指定数据，例如希望导出所有数据非常有用
     * @param {?=} opt 额外参数
     * @return {?}
     */
    export(urlOrData, opt) {
        ((!urlOrData && this._isAjax) ||
            (urlOrData && typeof urlOrData === 'string')
            ? this.getAjaxData(/** @type {?} */ (urlOrData))
            : this.getDataObs(urlOrData)).subscribe((res) => this.exportSrv.export(Object.assign({}, opt, /** @type {?} */ ({
            _d: res,
            _c: this._columns,
        }))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._inited = true;
        this.updateColumns();
        this.processData();
    }
    /**
     * @return {?}
     */
    setClass() {
        this._classMap.forEach(cls => this.renderer.removeClass(this.el.nativeElement, cls));
        this._classMap = [];
        if (this.pagePlacement)
            this._classMap.push('ad-st__p' + this.pagePlacement);
        this._classMap.forEach(cls => this.renderer.addClass(this.el.nativeElement, cls));
    }
    /**
     * @return {?}
     */
    updateColumns() {
        this._columns = [];
        if (!this.columns || this.columns.length === 0)
            throw new Error(`the columns property muse be define!`);
        let /** @type {?} */ checkboxCount = 0;
        let /** @type {?} */ radioCount = 0;
        const /** @type {?} */ sortMap = {};
        let /** @type {?} */ idx = 0;
        const /** @type {?} */ newColumns = [];
        const /** @type {?} */ copyColumens = deepCopy(this.columns);
        for (const /** @type {?} */ item of copyColumens) {
            if (this.acl && item.acl && !this.acl.can(item.acl))
                continue;
            if (item.index) {
                if (!Array.isArray(item.index))
                    item.index = item.index.split('.');
                item.indexKey = item.index.join('.');
            }
            // rowSelection
            if (!item.selections)
                item.selections = [];
            if (item.type === 'checkbox') {
                ++checkboxCount;
                if (!item.width)
                    item.width = `${item.selections.length > 0 ? 60 : 50}px`;
            }
            if (item.type === 'radio') {
                ++radioCount;
                item.selections = [];
                if (!item.width)
                    item.width = '50px';
            }
            if (!item.className) {
                item.className = {
                    // 'checkbox': 'text-center',
                    // 'radio': 'text-center',
                    number: 'text-right',
                    currency: 'text-right',
                    date: 'text-center',
                }[item.type];
            }
            if (item.type === 'yn' && typeof item.ynTruth === 'undefined')
                item.ynTruth = true;
            // sorter
            if (item.sorter) {
                sortMap[idx] = {
                    enabled: true,
                    v: item.sort,
                    key: item.sortKey || item.indexKey,
                    column: item,
                };
                if (item.sort && !this._sortColumn) {
                    this._sortColumn = item;
                    this._sortOrder = item.sort;
                    this._sortIndex = idx;
                }
            }
            else {
                sortMap[idx] = {
                    enabled: false,
                };
            }
            // filter
            if (!item.filter || !item.filters)
                item.filters = [];
            if (typeof item.filterMultiple === 'undefined')
                item.filterMultiple = true;
            if (!item.filterConfirmText)
                item.filterConfirmText = `确认`;
            if (!item.filterClearText)
                item.filterClearText = `重置`;
            if (!item.filterIcon)
                item.filterIcon = `anticon anticon-filter`;
            item.filtered = item.filters.findIndex(w => w.checked) !== -1;
            if (this.acl) {
                item.selections = item.selections.filter(w => !w.acl || this.acl.can(w.acl));
                item.filters = item.filters.filter(w => !w.acl || this.acl.can(w.acl));
            }
            // buttons
            const /** @type {?} */ buttons = [];
            if (item.buttons) {
                for (const /** @type {?} */ btn of item.buttons) {
                    if (this.acl && btn.acl && !this.acl.can(btn.acl))
                        continue;
                    if (btn.type === 'del' && typeof btn.pop === 'undefined')
                        btn.pop = true;
                    if (btn.pop === true) {
                        btn._type = 2;
                        if (typeof btn.popTitle === 'undefined')
                            btn.popTitle = `确认删除吗？`;
                    }
                    if (btn.children && btn.children.length > 0) {
                        btn._type = 3;
                    }
                    if (!btn._type)
                        btn._type = 1;
                    // i18n
                    if (btn.i18n && this.i18nSrv)
                        btn.text = this.i18nSrv.fanyi(btn.i18n);
                    buttons.push(btn);
                }
                if (buttons.length === 0)
                    continue;
                this.btnCoerceIf(buttons);
            }
            item.buttons = buttons;
            // i18n
            if (item.i18n && this.i18nSrv)
                item.title = this.i18nSrv.fanyi(item.i18n);
            ++idx;
            newColumns.push(item);
        }
        this.fixedCoerce(newColumns);
        this._columns = newColumns;
        if (checkboxCount > 1)
            throw new Error(`just only one column checkbox`);
        if (radioCount > 1)
            throw new Error(`just only one column radio`);
        this._sortMap = sortMap;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && this._inited)
            this.updateColumns();
        if (changes.data && this._inited)
            this.processData();
        this.setClass();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.data$) {
            this.data$.unsubscribe();
            this.data$ = null;
        }
    }
}
SimpleTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'simple-table',
                template: `<nz-table [nzData]="_data" [(nzPageIndex)]="pi" (nzPageIndexChange)="_change('pi')" [(nzPageSize)]="ps" (nzPageSizeChange)="_change('ps')" [nzTotal]="total" [nzShowPagination]="_isPagination" [nzFrontPagination]="false" [nzBordered]="bordered" [nzSize]="size" [nzLoading]="loading" [nzLoadingDelay]="loadingDelay" [nzScroll]="scroll" [nzTitle]="header" [nzFooter]="footer" [nzNoResult]="noResult" [nzPageSizeOptions]="pageSizeOptions" [nzShowQuickJumper]="showQuickJumper" [nzShowSizeChanger]="showSizeChanger" [nzShowTotal]="totalTpl"> <thead> <tr> <th *ngIf="expand" [nzShowExpand]="expand"></th> <th *ngFor="let c of _columns; let index=index" [nzWidth]="c.width" [nzLeft]="c._left" [nzRight]="c._right" [ngClass]="c.className" [attr.colspan]="c.colSpan" [attr.data-col]="c.indexKey" [nzShowSort]="_sortMap[index].enabled" [(nzSort)]="_sortMap[index].v" (nzSortChange)="sort(index, $event)"> <ng-template #renderTitle [ngTemplateOutlet]="c.__renderTitle" [ngTemplateOutletContext]="{$implicit: c, index: index }"></ng-template> <ng-container *ngIf="!c.__renderTitle; else renderTitle"> <ng-container [ngSwitch]="c.type"> <ng-container *ngSwitchCase="'checkbox'"> <label nz-checkbox [(ngModel)]="_allChecked" [nzIndeterminate]="_indeterminate" (ngModelChange)="_checkAll()"></label> <nz-dropdown *ngIf="c.selections.length"> <span nz-dropdown> <i class="anticon anticon-down"></i> </span> <ul nz-menu> <li nz-menu-item *ngFor="let rw of c.selections" (click)="_rowSelection(rw)" [innerHTML]="rw.text"> </li> </ul> </nz-dropdown> </ng-container> <ng-container *ngSwitchDefault> <span [innerHTML]="c.title"></span> </ng-container> </ng-container> <nz-dropdown *ngIf="c.filters.length > 0" nzTrigger="click" [hasFilterButton]="true" [nzClickHide]="false" [(nzVisible)]="c.filterVisible"> <i class="{{c.filterIcon}}" [ngClass]="{'ant-table-filter-selected': c.filtered}" nz-dropdown></i> <ul nz-menu> <ng-container *ngIf="c.filterMultiple"> <li nz-menu-item *ngFor="let filter of c.filters"> <label nz-checkbox [(ngModel)]="filter.checked">{{filter.text}}</label> </li> </ng-container> <ng-container *ngIf="!c.filterMultiple"> <li nz-menu-item *ngFor="let filter of c.filters"> <label nz-radio [ngModel]="filter.checked" (ngModelChange)="filterRadio(c, filter, $event)">{{filter.text}}</label> </li> </ng-container> </ul> <div class="ant-table-filter-dropdown-btns"> <a class="ant-table-filter-dropdown-link confirm" (click)="c.filterVisible = false"> <span (click)="filterConfirm(c)">{{c.filterConfirmText}}</span> </a> <a class="ant-table-filter-dropdown-link clear" (click)="c.filterVisible = false"> <span (click)="filterClear(c)">{{c.filterClearText}}</span> </a> </div> </nz-dropdown> </ng-container> </th> </tr> </thead> <tbody> <ng-container *ngFor="let i of _data; let index=index"> <tr> <td *ngIf="expand" [nzShowExpand]="expand" [(nzExpand)]="i.expand"></td> <td *ngFor="let c of _columns" [nzLeft]="c._left" [nzRight]="c._right" [nzCheckbox]="c.type === 'checkbox'" [ngClass]="c.className" [attr.colspan]="c.colSpan"> <ng-template #render [ngTemplateOutlet]="c.__render" [ngTemplateOutletContext]="{$implicit: i, index: index, column: c }"></ng-template> <ng-container *ngIf="!c.__render; else render"> <ng-container *ngIf="c.index" [ngSwitch]="c.type"> <ng-container *ngSwitchCase="'checkbox'"> <label nz-checkbox [nzDisabled]="i.disabled" [ngModel]="i.checked" (ngModelChange)="_checkSelection(i, $event)"></label> </ng-container> <ng-container *ngSwitchCase="'radio'"> <label nz-radio [nzDisabled]="i.disabled" [ngModel]="i.checked" (ngModelChange)="_refRadio(index, $event, i)"></label> </ng-container> <ng-container *ngSwitchCase="'link'"> <a (click)="_click($event, i, c)" [innerHTML]="_get(i, c)"></a> </ng-container> <span *ngSwitchDefault [innerHTML]="_get(i, c)"></span> </ng-container> <ng-container *ngFor="let btn of c.buttons; let last=last"> <ng-container *ngIf="btn.if(i, btn, c)" [ngSwitch]="btn._type"> <ng-container *ngSwitchCase="2"> <nz-popconfirm [nzTitle]="btn.popTitle" (nzOnConfirm)="btnClick(i, btn)"> <a nz-popconfirm [innerHTML]="btnText(i, btn)"></a> </nz-popconfirm> </ng-container> <ng-container *ngSwitchCase="3"> <nz-dropdown> <a class="ant-dropdown-link" nz-dropdown> {{btnText(i, btn)}} <i class="anticon anticon-down"></i> </a> <ul nz-menu> <ng-container *ngFor="let subBtn of btn.children"> <li nz-menu-item *ngIf="btn.if(i, btn, c)"> <a (click)="btnClick(i, subBtn)" [innerHTML]="btnText(i, subBtn)"></a> </li> </ng-container> </ul> </nz-dropdown> </ng-container> <a *ngSwitchDefault (click)="btnClick(i, btn)" [innerHTML]="btnText(i, btn)"></a> <nz-divider *ngIf="!last" nzType="vertical"></nz-divider> </ng-container> </ng-container> <ng-template [ngIf]="!c.__renderExpanded" [ngTemplateOutlet]="c.__renderExpanded" [ngTemplateOutletContext]="{$implicit: i, index: index, column: c }"></ng-template> </ng-container> </td> </tr> <tr [nzExpand]="i.expand"> <td></td> <td [attr.colspan]="_columns.length"> <ng-template [ngTemplateOutlet]="expand" [ngTemplateOutletContext]="{$implicit: i, index: index, column: c }"></ng-template> </td> </tr> </ng-container> <ng-template [ngIf]="!loading" [ngTemplateOutlet]="body"></ng-template> </tbody> <ng-template #totalTpl let-range="range" let-total>{{ renderTotal(total, range) }}</ng-template> </nz-table> `,
                host: { '[class.ad-st]': 'true' },
                providers: [SimpleTableExport, CNCurrencyPipe, DatePipe, YNPipe, DecimalPipe],
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
SimpleTableComponent.ctorParameters = () => [
    { type: AdSimpleTableConfig, },
    { type: HttpClient, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: SimpleTableExport, },
    { type: ACLService, decorators: [{ type: Optional },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
    { type: ModalHelper, },
    { type: CNCurrencyPipe, },
    { type: DatePipe, },
    { type: YNPipe, },
    { type: DecimalPipe, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
];
SimpleTableComponent.propDecorators = {
    "data": [{ type: Input },],
    "extraParams": [{ type: Input },],
    "reqMehtod": [{ type: Input },],
    "reqBody": [{ type: Input },],
    "reqHeaders": [{ type: Input },],
    "reqReName": [{ type: Input },],
    "reqError": [{ type: Output },],
    "resReName": [{ type: Input },],
    "columns": [{ type: Input },],
    "ps": [{ type: Input },],
    "pi": [{ type: Input },],
    "total": [{ type: Input },],
    "showPagination": [{ type: Input },],
    "loading": [{ type: Input },],
    "loadingDelay": [{ type: Input },],
    "bordered": [{ type: Input },],
    "size": [{ type: Input },],
    "scroll": [{ type: Input },],
    "showSizeChanger": [{ type: Input },],
    "pageSizeOptions": [{ type: Input },],
    "showQuickJumper": [{ type: Input },],
    "showTotal": [{ type: Input },],
    "isPageIndexReset": [{ type: Input },],
    "pagePlacement": [{ type: Input },],
    "toTopInChange": [{ type: Input },],
    "toTopOffset": [{ type: Input },],
    "sortReName": [{ type: Input },],
    "multiSort": [{ type: Input },],
    "preDataChange": [{ type: Input },],
    "header": [{ type: ContentChild, args: ['header',] },],
    "body": [{ type: ContentChild, args: ['body',] },],
    "footer": [{ type: ContentChild, args: ['footer',] },],
    "expand": [{ type: ContentChild, args: ['expand',] },],
    "noResult": [{ type: Input },],
    "widthConfig": [{ type: Input },],
    "change": [{ type: Output },],
    "checkboxChange": [{ type: Output },],
    "radioChange": [{ type: Output },],
    "sortChange": [{ type: Output },],
    "filterChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SimpleTableRowDirective {
    /**
     * @param {?} templateRef
     * @param {?} table
     */
    constructor(templateRef, table) {
        this.templateRef = templateRef;
        this.table = table;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ col = this.table._columns.find(w => w.render === this.id);
        if (!col)
            return;
        switch (this.type) {
            case 'title':
                col["__renderTitle"] = this.templateRef;
                break;
            default:
                col["__render"] = this.templateRef;
                break;
        }
    }
}
SimpleTableRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[st-row]',
            },] },
];
/** @nocollapse */
SimpleTableRowDirective.ctorParameters = () => [
    { type: TemplateRef, },
    { type: SimpleTableComponent, },
];
SimpleTableRowDirective.propDecorators = {
    "id": [{ type: Input, args: ['st-row',] },],
    "type": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$15 = [SimpleTableComponent, SimpleTableRowDirective];
const ZORROMODULES$5 = [NgZorroAntdModule];
class AdSimpleTableModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdSimpleTableModule, providers: [AdSimpleTableConfig] };
    }
}
AdSimpleTableModule.decorators = [
    { type: NgModule, args: [{
                schemas: [NO_ERRORS_SCHEMA],
                imports: [CommonModule, FormsModule, DelonUtilModule, ...ZORROMODULES$5],
                declarations: [...COMPONENTS$15],
                exports: [...COMPONENTS$15],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const ReuseTabMatchMode = {
    /**
       * （推荐）按菜单 `Menu` 配置
       *
       * 可复用：
       * - `{ text:'Dashboard' }`
       * - `{ text:'Dashboard', reuse: true }`
       *
       * 不可复用：
       * - `{ text:'Dashboard', reuse: false }`
       */
    Menu: 0,
    /**
       * 按菜单 `Menu` 强制配置
       *
       * 可复用：
       * - `{ text:'Dashboard', reuse: true }`
       *
       * 不可复用：
       * - `{ text:'Dashboard' }`
       * - `{ text:'Dashboard', reuse: false }`
       */
    MenuForce: 1,
    /**
       * 对所有路由有效，可以配合 `excludes` 过滤无须复用路由
       */
    URL: 2,
};
ReuseTabMatchMode[ReuseTabMatchMode.Menu] = "Menu";
ReuseTabMatchMode[ReuseTabMatchMode.MenuForce] = "MenuForce";
ReuseTabMatchMode[ReuseTabMatchMode.URL] = "URL";
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 路由复用类，提供复用所需要一些基本接口
 *
 * **注：** 所有缓存数据来源于路由离开后才会产生
 */
class ReuseTabService {
    /**
     * @param {?} injector
     * @param {?} menuService
     */
    constructor(injector, menuService) {
        this.injector = injector;
        this.menuService = menuService;
        this._max = 10;
        this._debug = false;
        this._mode = ReuseTabMatchMode.Menu;
        this._excludes = [];
        this._cachedChange = new BehaviorSubject$1(null);
        this._cached = [];
        this._titleCached = {};
        this._closableCached = {};
    }
    /**
     * 允许最多复用多少个页面，取值范围 `2-100`
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = Math.min(Math.max(value, 2), 100);
        for (let /** @type {?} */ i = this._cached.length; i > this._max; i--) {
            this._cached.pop();
        }
    }
    /**
     * 设置匹配模式
     * @param {?} value
     * @return {?}
     */
    set mode(value) {
        this._mode = value;
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * 设置Debug模式
     * @param {?} value
     * @return {?}
     */
    set debug(value) {
        this._debug = value;
    }
    /**
     * @return {?}
     */
    get debug() {
        return this._debug;
    }
    /**
     * 排除规则，限 `mode=URL`
     * @param {?} values
     * @return {?}
     */
    set excludes(values) {
        if (!values)
            return;
        this._excludes = values;
    }
    /**
     * @return {?}
     */
    get excludes() {
        return this._excludes;
    }
    /**
     * 获取已缓存的路由
     * @return {?}
     */
    get items() {
        return this._cached;
    }
    /**
     * 获取当前缓存的路由总数
     * @return {?}
     */
    get count() {
        return this._cached.length;
    }
    /**
     * 订阅缓存变更通知
     * @return {?}
     */
    get change() {
        return this._cachedChange.asObservable(); // .pipe(filter(w => w !== null));
    }
    /**
     * 自定义当前标题
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        const /** @type {?} */ curUrl = this.getUrl(this.injector.get(ActivatedRoute).snapshot);
        if (typeof value === 'string')
            value = { text: value };
        this._titleCached[curUrl] = value;
        this.di('update current tag title: ', value);
        this._cachedChange.next({
            active: 'title',
            title: value,
            list: this._cached,
        });
    }
    /**
     * 获取指定路径缓存所在位置，`-1` 表示无缓存
     * @param {?} url
     * @return {?}
     */
    index(url) {
        return this._cached.findIndex(w => w.url === url);
    }
    /**
     * 获取指定路径缓存是否存在
     * @param {?} url
     * @return {?}
     */
    exists(url) {
        return this.index(url) !== -1;
    }
    /**
     * 获取指定路径缓存
     * @param {?} url
     * @return {?}
     */
    get(url) {
        return url ? this._cached.find(w => w.url === url) || null : null;
    }
    /**
     * @param {?} url
     * @param {?} includeNonCloseable
     * @return {?}
     */
    remove(url, includeNonCloseable) {
        const /** @type {?} */ idx = typeof url === 'string' ? this.index(url) : url;
        const /** @type {?} */ item = idx !== -1 ? this._cached[idx] : null;
        if (!item || (!includeNonCloseable && !item.closable))
            return false;
        this.destroy(item._handle);
        this._cached.splice(idx, 1);
        delete this._titleCached[url];
        return true;
    }
    /**
     * 根据URL移除标签
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    close(url, includeNonCloseable = false) {
        this.removeUrlBuffer = url;
        this.remove(url, includeNonCloseable);
        this._cachedChange.next({ active: 'close', url, list: this._cached });
        this.di('close tag', url);
        return true;
    }
    /**
     * 清除右边
     *
     * @param {?} url
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    closeRight(url, includeNonCloseable = false) {
        const /** @type {?} */ start = this.index(url);
        for (let /** @type {?} */ i = this.count - 1; i > start; i--) {
            this.remove(i, includeNonCloseable);
        }
        this.removeUrlBuffer = null;
        this._cachedChange.next({ active: 'closeRight', url, list: this._cached });
        this.di('close right tages', url);
        return true;
    }
    /**
     * 清除所有缓存
     *
     * @param {?=} includeNonCloseable
     * @return {?}
     */
    clear(includeNonCloseable = false) {
        this._cached.forEach(w => {
            if (!includeNonCloseable && w.closable)
                this.destroy(w._handle);
        });
        this._cached = this._cached.filter(w => !includeNonCloseable && !w.closable);
        this.removeUrlBuffer = null;
        this._cachedChange.next({ active: 'clear', list: this._cached });
        this.di('clear all catch');
    }
    /**
     * 移动缓存数据
     * \@example
     * ```
     * // source
     * [ '/a/1', '/a/2', '/a/3', '/a/4', '/a/5' ]
     * move('/a/1', 2);
     * // output
     * [ '/a/2', '/a/3', '/a/1', '/a/4', '/a/5' ]
     * move('/a/1', -1);
     * // output
     * [ '/a/2', '/a/3', '/a/4', '/a/5', '/a/1' ]
     * ```
     * @param {?} url 要移动的URL地址
     * @param {?} position 新位置，下标从 `0` 开始
     *
     * @return {?}
     */
    move(url, position) {
        const /** @type {?} */ start = this._cached.findIndex(w => w.url === url);
        if (start === -1)
            return;
        const /** @type {?} */ data = this._cached.slice();
        data.splice(position < 0 ? data.length + position : position, 0, data.splice(start, 1)[0]);
        this._cached = data;
        this._cachedChange.next({
            active: 'move',
            url,
            position,
            list: this._cached,
        });
    }
    /**
     * 获取标题，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.title = 'new title'` 重新指定文本
     * 2. 路由配置中 data 属性中包含 titleI18n > title
     * 3. 菜单数据中 text 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    getTitle(url, route) {
        if (this._titleCached[url])
            return this._titleCached[url];
        if (route && route.data && (route.data["titleI18n"] || route.data["title"]))
            return /** @type {?} */ ({ text: route.data["title"], i18n: route.data["titleI18n"] });
        const /** @type {?} */ menu = this.mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        return menu ? { text: menu.text, i18n: menu.i18n } : { text: url };
    }
    /**
     * 清除标题缓存
     * @return {?}
     */
    clearTitleCached() {
        this._titleCached = {};
    }
    /**
     * 自定义当前 `closable` 状态
     * @param {?} value
     * @return {?}
     */
    set closable(value) {
        const /** @type {?} */ curUrl = this.getUrl(this.injector.get(ActivatedRoute).snapshot);
        this._closableCached[curUrl] = value;
        this.di('update current tag closable: ', value);
        this._cachedChange.next({
            active: 'closable',
            closable: value,
            list: this._cached,
        });
    }
    /**
     * 获取 `closable` 状态，顺序如下：
     *
     * 1. 组件内使用 `ReuseTabService.closable = true` 重新指定 `closable` 状态
     * 2. 路由配置中 data 属性中包含 `reuseClosable`
     * 3. 菜单数据中 `reuseClosable` 属性
     *
     * @param {?} url 指定URL
     * @param {?=} route 指定路由快照
     * @return {?}
     */
    getClosable(url, route) {
        if (typeof this._closableCached[url] !== 'undefined')
            return this._closableCached[url];
        if (route && route.data && typeof route.data["reuseClosable"] === 'boolean')
            return route.data["reuseClosable"];
        const /** @type {?} */ menu = this.mode !== ReuseTabMatchMode.URL ? this.getMenu(url) : null;
        if (menu && typeof menu["reuseClosable"] === 'boolean')
            return menu["reuseClosable"];
        return true;
    }
    /**
     * 清空 `closable` 缓存
     * @return {?}
     */
    clearClosableCached() {
        this._closableCached = {};
    }
    /**
     * @param {?} route
     * @return {?}
     */
    getTruthRoute(route) {
        let /** @type {?} */ next = route;
        while (next.firstChild)
            next = next.firstChild;
        return next;
    }
    /**
     * 根据快照获取URL地址
     * @param {?} route
     * @return {?}
     */
    getUrl(route) {
        let /** @type {?} */ next = this.getTruthRoute(route);
        const /** @type {?} */ segments = [];
        while (next) {
            segments.push(next.url.join('/'));
            next = next.parent;
        }
        const /** @type {?} */ url = '/' +
            segments
                .filter(i => i)
                .reverse()
                .join('/');
        return url;
    }
    /**
     * 检查快照是否允许被复用
     * @param {?} route
     * @return {?}
     */
    can(route) {
        const /** @type {?} */ url = this.getUrl(route);
        if (url === this.removeUrlBuffer)
            return false;
        if (route.data && typeof route.data["reuse"] === 'boolean')
            return route.data["reuse"];
        if (this.mode !== ReuseTabMatchMode.URL) {
            const /** @type {?} */ menu = this.getMenu(url);
            if (!menu)
                return false;
            if (this.mode === ReuseTabMatchMode.Menu) {
                if (menu.reuse === false)
                    return false;
            }
            else {
                if (!menu.reuse || menu.reuse !== true)
                    return false;
            }
            return true;
        }
        return this._excludes.findIndex(r => r.test(url)) === -1;
    }
    /**
     * 刷新，触发一个 refresh 类型事件
     * @param {?=} data
     * @return {?}
     */
    refresh(data) {
        this._cachedChange.next({ active: 'refresh', data });
    }
    /**
     * @param {?} _handle
     * @return {?}
     */
    destroy(_handle) {
        if (_handle && _handle.componentRef && _handle.componentRef.destroy)
            _handle.componentRef.destroy();
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    di(...args) {
        if (!this.debug)
            return;
        // tslint:disable-next-line:no-console
        console.warn(...args);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getMenu(url) {
        const /** @type {?} */ menus = this.menuService ? this.menuService.getPathByUrl(url) : [];
        if (!menus || menus.length === 0)
            return null;
        return menus.pop();
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} comp
     * @return {?}
     */
    runHook(method, url, comp) {
        if (comp.instance && comp.instance.hasOwnProperty(method))
            comp.instance[method]();
    }
    /**
     * @param {?} route
     * @return {?}
     */
    hasInValidRoute(route) {
        return (!route.routeConfig ||
            route.routeConfig.loadChildren ||
            route.routeConfig.children);
    }
    /**
     * 决定是否允许路由复用，若 `true` 会触发 `store`
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) {
        if (this.hasInValidRoute(route))
            return false;
        this.di('#shouldDetach', this.can(route), this.getUrl(route));
        return this.can(route);
    }
    /**
     * 存储
     * @param {?} _snapshot
     * @param {?} _handle
     * @return {?}
     */
    store(_snapshot, _handle) {
        if (this.count >= this._max)
            this._cached.shift();
        const /** @type {?} */ url = this.getUrl(_snapshot);
        const /** @type {?} */ idx = this.index(url);
        const /** @type {?} */ item = {
            title: this.getTitle(url, _snapshot),
            closable: this.getClosable(url, _snapshot),
            url,
            _snapshot,
            _handle,
        };
        if (idx === -1) {
            this._cached.push(item);
        }
        else {
            this._cached[idx] = item;
        }
        this.removeUrlBuffer = null;
        this.di('#store', idx === -1 ? '[new]' : '[override]', url);
        if (_handle && _handle.componentRef) {
            this.runHook('_onReuseDestroy', url, _handle.componentRef);
        }
        this._cachedChange.next({ active: 'add', item, list: this._cached });
    }
    /**
     * 决定是否允许应用缓存数据
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) {
        if (this.hasInValidRoute(route))
            return false;
        const /** @type {?} */ url = this.getUrl(route);
        const /** @type {?} */ data = this.get(url);
        const /** @type {?} */ ret = !!(data && data._handle);
        this.di('#shouldAttach', ret, url);
        return ret;
    }
    /**
     * 提取复用数据
     * @param {?} route
     * @return {?}
     */
    retrieve(route) {
        if (this.hasInValidRoute(route))
            return null;
        const /** @type {?} */ url = this.getUrl(route);
        const /** @type {?} */ data = this.get(url);
        const /** @type {?} */ ret = (data && data._handle) || null;
        this.di('#retrieve', url, ret);
        if (ret && ret.componentRef) {
            this.runHook('_onReuseInit', url, ret.componentRef);
        }
        return ret;
    }
    /**
     * 决定是否应该进行复用路由处理
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        let /** @type {?} */ ret = future.routeConfig === curr.routeConfig;
        if (!ret)
            return false;
        const /** @type {?} */ path = /** @type {?} */ (((future.routeConfig && future.routeConfig.path) ||
            ''));
        if (path.length > 0 && ~path.indexOf(':')) {
            const /** @type {?} */ futureUrl = this.getUrl(future);
            const /** @type {?} */ currUrl = this.getUrl(curr);
            ret = futureUrl === currUrl;
        }
        this.di('=====================');
        this.di('#shouldReuseRoute', ret, `${this.getUrl(curr)}=>${this.getUrl(future)}`, future, curr);
        return ret;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._cached = [];
        this._cachedChange.unsubscribe();
    }
}
ReuseTabService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ReuseTabService.ctorParameters = () => [
    { type: Injector, },
    { type: MenuService, decorators: [{ type: Optional },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabContextMenuComponent {
    constructor() {
        this.close = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set i18n(value) {
        this._i18n = Object.assign({
            close: '关闭标签',
            closeOther: '关闭其它标签',
            closeRight: '关闭右侧标签',
            clear: '清空',
        }, value);
    }
    /**
     * @return {?}
     */
    get i18n() {
        return this._i18n;
    }
    /**
     * @return {?}
     */
    get includeNonCloseable() {
        return this.event.ctrlKey;
    }
    /**
     * @param {?} type
     * @param {?} item
     * @return {?}
     */
    notify(type, item) {
        this.close.next({
            type,
            item: this.item,
            includeNonCloseable: this.includeNonCloseable,
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.includeNonCloseable)
            this.item.closable = true;
    }
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    click(e, type) {
        e.preventDefault();
        e.stopPropagation();
        if (type === 'close' && !this.item.closable)
            return;
        if (type === 'closeRight' && this.item.last)
            return;
        this.notify(type, this.item);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeMenu(event) {
        if (event.type === 'click' && event.button === 2)
            return;
        this.notify(null, null);
    }
}
ReuseTabContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'reuse-tab-context-menu',
                template: `
  <ul nz-menu>
      <li nz-menu-item (click)="click($event, 'close')" data-type="close" [nzDisabled]="!item.closable" [innerHTML]="i18n.close"></li>
      <li nz-menu-item (click)="click($event, 'closeOther')" data-type="closeOther" [innerHTML]="i18n.closeOther"></li>
      <li nz-menu-item (click)="click($event, 'closeRight')" data-type="closeRight" [nzDisabled]="item.last" [innerHTML]="i18n.closeRight"></li>
      <li nz-menu-item (click)="click($event, 'clear')" data-type="clear" [innerHTML]="i18n.clear"></li>
  </ul>`,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
ReuseTabContextMenuComponent.propDecorators = {
    "i18n": [{ type: Input },],
    "item": [{ type: Input },],
    "event": [{ type: Input },],
    "close": [{ type: Output },],
    "closeMenu": [{ type: HostListener, args: ['document:click', ['$event'],] }, { type: HostListener, args: ['document:contextmenu', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabContextService {
    /**
     * @param {?} overlay
     */
    constructor(overlay$$1) {
        this.overlay = overlay$$1;
        this.show = new Subject$1();
        this.close = new Subject$1();
    }
    /**
     * @return {?}
     */
    remove() {
        if (!this.ref)
            return;
        this.ref.detach();
        this.ref.dispose();
        this.ref = null;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    open(context) {
        this.remove();
        const { event, item } = context;
        const /** @type {?} */ fakeElement = {
            getBoundingClientRect: () => ({
                bottom: event.clientY,
                height: 0,
                left: event.clientX,
                right: event.clientX,
                top: event.clientY,
                width: 0,
            }),
        };
        const /** @type {?} */ positionStrategy = this.overlay
            .position()
            .connectedTo({ nativeElement: fakeElement }, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
        this.ref = this.overlay.create({
            positionStrategy,
            panelClass: 'reuse-tab-cm',
            scrollStrategy: this.overlay.scrollStrategies.close(),
        });
        const /** @type {?} */ comp = this.ref.attach(new ComponentPortal(ReuseTabContextMenuComponent));
        const /** @type {?} */ instance = comp.instance;
        instance.i18n = this.i18n;
        instance.item = Object.assign({}, item);
        instance.event = event;
        const /** @type {?} */ sub$ = new Subscription$1();
        sub$.add(instance.close.subscribe((res) => {
            this.close.next(res);
            this.remove();
        }));
        comp.onDestroy(() => sub$.unsubscribe());
    }
}
ReuseTabContextService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ReuseTabContextService.ctorParameters = () => [
    { type: Overlay, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabComponent {
    /**
     * @param {?} srv
     * @param {?} cd
     * @param {?} router
     * @param {?} route
     * @param {?} el
     * @param {?} render
     * @param {?} doc
     * @param {?} i18nSrv
     */
    constructor(srv, cd, router$$1, route, el, render, doc, i18nSrv) {
        this.srv = srv;
        this.cd = cd;
        this.router = router$$1;
        this.route = route;
        this.el = el;
        this.render = render;
        this.doc = doc;
        this.i18nSrv = i18nSrv;
        this.list = [];
        this.pos = 0;
        /**
         * 设置匹配模式
         */
        this.mode = ReuseTabMatchMode.Menu;
        this._debug = false;
        this._allowClose = true;
        this._fixed = true;
        this._showCurrent = true;
        /**
         * 切换时回调
         */
        this.change = new EventEmitter();
        /**
         * 关闭回调
         */
        this.close = new EventEmitter();
        const /** @type {?} */ route$ = this.router.events.pipe(filter(evt => evt instanceof NavigationEnd));
        this.sub$ = /** @type {?} */ (combineLatest$1(this.srv.change, route$).subscribe(([res, e]) => this.genList(res)));
        if (this.i18nSrv)
            this.i18n$ = this.i18nSrv.change.subscribe(() => this.genList());
    }
    /**
     * 是否Debug模式
     * @return {?}
     */
    get debug() {
        return this._debug;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set debug(value) {
        this._debug = coerceBooleanProperty(value);
    }
    /**
     * 允许最多复用多少个页面
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set max(value) {
        this._max = coerceNumberProperty(value);
    }
    /**
     * 允许关闭
     * @return {?}
     */
    get allowClose() {
        return this._allowClose;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowClose(value) {
        this._allowClose = coerceBooleanProperty(value);
    }
    /**
     * 是否固定
     * @return {?}
     */
    get fixed() {
        return this._fixed;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fixed(value) {
        this._fixed = coerceBooleanProperty(value);
    }
    /**
     * 总是显示当前页
     * @return {?}
     */
    get showCurrent() {
        return this._showCurrent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showCurrent(value) {
        this._showCurrent = coerceBooleanProperty(value);
    }
    /**
     * @param {?} title
     * @return {?}
     */
    genTit(title) {
        return title.i18n && this.i18nSrv
            ? this.i18nSrv.fanyi(title.i18n)
            : title.text;
    }
    /**
     * @param {?=} notify
     * @return {?}
     */
    genList(notify) {
        const /** @type {?} */ isClosed = notify && notify.active === 'close';
        const /** @type {?} */ beforeClosePos = isClosed
            ? this.list.findIndex(w => w.url === notify["url"])
            : -1;
        const /** @type {?} */ ls = this.srv.items.map((item, index) => {
            return /** @type {?} */ ({
                url: item.url,
                title: this.genTit(item.title),
                closable: this.allowClose && item.closable && this.srv.count > 0,
                index,
                active: false,
                last: false,
            });
        });
        if (this.showCurrent) {
            const /** @type {?} */ snapshot = this.route.snapshot;
            const /** @type {?} */ url = this.srv.getUrl(snapshot);
            const /** @type {?} */ idx = ls.findIndex(w => w.url === url);
            // jump directly when the current exists in the list
            // or create a new current item and jump
            if (idx !== -1 || (isClosed && notify["url"] === url)) {
                this.pos = isClosed
                    ? idx >= beforeClosePos
                        ? this.pos - 1
                        : this.pos
                    : idx;
            }
            else {
                const /** @type {?} */ snapshotTrue = this.srv.getTruthRoute(snapshot);
                ls.push(/** @type {?} */ ({
                    url,
                    title: this.genTit(this.srv.getTitle(url, snapshotTrue)),
                    closable: this.allowClose &&
                        this.srv.count > 0 &&
                        this.srv.getClosable(url, snapshotTrue),
                    index: ls.length,
                    active: false,
                    last: false,
                }));
                this.pos = ls.length - 1;
            }
            // fix unabled close last item
            if (ls.length <= 1)
                ls[0].closable = false;
        }
        this.list = ls;
        if (ls.length && isClosed) {
            this.to(null, this.pos);
        }
        this.refStatus(false);
        this.visibility();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    visibility() {
        if (this.showCurrent)
            return;
        this.render.setStyle(this.el.nativeElement, 'display', this.list.length === 0 ? 'none' : 'block');
    }
    /**
     * @param {?} res
     * @return {?}
     */
    cmChange(res) {
        switch (res.type) {
            case 'close':
                this._close(null, res.item.index, res.includeNonCloseable);
                break;
            case 'closeRight':
                this.srv.closeRight(res.item.url, res.includeNonCloseable);
                this.close.emit(null);
                break;
            case 'clear':
            case 'closeOther':
                this.srv.clear(res.includeNonCloseable);
                this.close.emit(null);
                break;
        }
    }
    /**
     * @param {?=} dc
     * @return {?}
     */
    refStatus(dc = true) {
        if (this.list.length) {
            this.list[this.list.length - 1].last = true;
            this.list.forEach((i, idx) => (i.active = this.pos === idx));
        }
        if (dc)
            this.cd.detectChanges();
    }
    /**
     * @param {?} e
     * @param {?} index
     * @return {?}
     */
    to(e, index) {
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }
        index = Math.max(0, Math.min(index, this.list.length - 1));
        const /** @type {?} */ item = this.list[index];
        this.router.navigateByUrl(item.url).then(res => {
            if (!res)
                return;
            this.pos = index;
            this.item = item;
            this.refStatus();
            this.change.emit(item);
        });
    }
    /**
     * @param {?} e
     * @param {?} idx
     * @param {?} includeNonCloseable
     * @return {?}
     */
    _close(e, idx, includeNonCloseable) {
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }
        const /** @type {?} */ item = this.list[idx];
        this.srv.close(item.url, includeNonCloseable);
        this.close.emit(item);
        this.cd.detectChanges();
        return false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClass();
        this.genList();
    }
    /**
     * @return {?}
     */
    setClass() {
        const /** @type {?} */ el = this.el.nativeElement;
        const /** @type {?} */ body = this.doc.querySelector('body');
        const /** @type {?} */ fixedCls = `fixed`;
        const /** @type {?} */ bodyCls = `has-reuse-tab`;
        if (this.fixed) {
            this.render.addClass(el, fixedCls);
            this.render.addClass(body, bodyCls);
        }
        else {
            this.render.removeClass(el, fixedCls);
            this.render.removeClass(body, bodyCls);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.max)
            this.srv.max = this.max;
        if (changes.excludes)
            this.srv.excludes = this.excludes;
        if (changes.mode)
            this.srv.mode = this.mode;
        this.srv.debug = this.debug;
        this.setClass();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.sub$.unsubscribe();
        if (this.i18n$)
            this.i18n$.unsubscribe();
    }
}
ReuseTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'reuse-tab',
                template: `<nz-tabset [nzSelectedIndex]="pos" [nzAnimated]="false" nzType="line"> <nz-tab *ngFor="let i of list; let index = index" [nzTitle]="titleTemplate"> <ng-template #titleTemplate> <span [context-menu]="i" (click)="to($event, index)" class="name">{{i.title}}</span> <i *ngIf="i.closable" class="anticon anticon-close op" (click)="_close($event, index, false)"></i> </ng-template> </nz-tab> </nz-tabset> <reuse-tab-context [i18n]="i18n" (change)="cmChange($event)"></reuse-tab-context> `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                providers: [ReuseTabContextService],
            },] },
];
/** @nocollapse */
ReuseTabComponent.ctorParameters = () => [
    { type: ReuseTabService, },
    { type: ChangeDetectorRef, },
    { type: Router, },
    { type: ActivatedRoute, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ALAIN_I18N_TOKEN,] },] },
];
ReuseTabComponent.propDecorators = {
    "mode": [{ type: Input },],
    "i18n": [{ type: Input },],
    "debug": [{ type: Input },],
    "max": [{ type: Input },],
    "excludes": [{ type: Input },],
    "allowClose": [{ type: Input },],
    "fixed": [{ type: Input },],
    "showCurrent": [{ type: Input },],
    "change": [{ type: Output },],
    "close": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabContextComponent {
    /**
     * @param {?} srv
     */
    constructor(srv) {
        this.srv = srv;
        this.sub$ = new Subscription$1();
        this.change = new EventEmitter();
        this.sub$.add(srv.show.subscribe(context => this.srv.open(context)));
        this.sub$.add(srv.close.subscribe(res => this.change.emit(res)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set i18n(value) {
        this.srv.i18n = value;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.sub$.unsubscribe();
    }
}
ReuseTabContextComponent.decorators = [
    { type: Component, args: [{
                selector: 'reuse-tab-context',
                template: ``,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
ReuseTabContextComponent.ctorParameters = () => [
    { type: ReuseTabContextService, },
];
ReuseTabContextComponent.propDecorators = {
    "i18n": [{ type: Input },],
    "change": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabContextDirective {
    /**
     * @param {?} srv
     */
    constructor(srv) {
        this.srv = srv;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextMenu(event) {
        this.srv.show.next({
            event,
            item: this.item,
        });
        event.preventDefault();
        event.stopPropagation();
    }
}
ReuseTabContextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[context-menu]',
            },] },
];
/** @nocollapse */
ReuseTabContextDirective.ctorParameters = () => [
    { type: ReuseTabContextService, },
];
ReuseTabContextDirective.propDecorators = {
    "item": [{ type: Input, args: ['context-menu',] },],
    "onContextMenu": [{ type: HostListener, args: ['contextmenu', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$16 = [ReuseTabComponent];
const NOEXPORTS = [
    ReuseTabContextMenuComponent,
    ReuseTabContextComponent,
    ReuseTabContextDirective,
];
class AdReuseTabModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AdReuseTabModule,
            providers: [
                ReuseTabService
            ],
        };
    }
}
AdReuseTabModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, NgZorroAntdModule, OverlayModule],
                declarations: [...COMPONENTS$16, ...NOEXPORTS],
                entryComponents: [ReuseTabContextMenuComponent],
                exports: [...COMPONENTS$16],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FullContentService {
    constructor() {
        this._change = new BehaviorSubject$1(null);
    }
    /**
     * 切换全屏工作区状态
     * @return {?}
     */
    toggle() {
        this._change.next(true);
    }
    /**
     * @return {?}
     */
    get change() {
        return this._change.pipe(share());
    }
}
FullContentService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const cls = `ad-full-content-wrap`;
const fsCls = `ad-full-content-fs`;
const hideTitleCls = `ad-full-content-ht`;
class FullContentComponent {
    /**
     * @param {?} el
     * @param {?} router
     * @param {?} cd
     * @param {?} srv
     * @param {?} doc
     */
    constructor(el, router$$1, cd, srv, doc) {
        this.el = el;
        this.router = router$$1;
        this.cd = cd;
        this.srv = srv;
        this.doc = doc;
        this.inited = false;
        this.id = `_full-content-${Math.random()
            .toString(36)
            .substring(2)}`;
        this._height = 0;
        this._hideTitle = true;
        this._padding = 24;
        this.fullscreenChange = new EventEmitter();
        this.scroll$ = null;
    }
    /**
     * @return {?}
     */
    get fullscreen() {
        return this._fullscreen;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fullscreen(value) {
        this._fullscreen = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get hideTitle() {
        return this._hideTitle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hideTitle(value) {
        this._hideTitle = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get padding() {
        return this._padding;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set padding(value) {
        this._padding = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inited = true;
        this.bodyEl = this.doc.querySelector('body');
        this.bodyEl.classList.add(cls);
        (/** @type {?} */ (this.el.nativeElement)).id = this.id;
        this.update();
        this.installResizeEvent();
        this.srv$ = /** @type {?} */ (this.srv.change.subscribe(res => {
            if (res)
                this.toggle();
        }));
        this.route$ = /** @type {?} */ (this.router.events
            .pipe(filter((e) => e instanceof ActivationStart || e instanceof ActivationEnd), debounceTime(200))
            .subscribe(e => {
            if (!!document.querySelector('#' + this.id)) {
                this.bodyEl.classList.add(cls);
                this.updateFsCls();
            }
            else {
                this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => this.updateHeight());
    }
    /**
     * @return {?}
     */
    updateFsCls() {
        if (this.fullscreen) {
            this.bodyEl.classList.add(fsCls);
            if (this.hideTitle)
                this.bodyEl.classList.add(hideTitleCls);
        }
        else {
            this.bodyEl.classList.remove(fsCls);
            if (this.hideTitle)
                this.bodyEl.classList.remove(hideTitleCls);
        }
    }
    /**
     * @return {?}
     */
    update() {
        this.updateFsCls();
        this.fullscreenChange.emit(this.fullscreen);
    }
    /**
     * @return {?}
     */
    updateHeight() {
        this._height =
            this.bodyEl.getBoundingClientRect().height -
                (/** @type {?} */ (this.el.nativeElement)).getBoundingClientRect().top -
                this.padding;
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    toggle() {
        this.fullscreen = !this.fullscreen;
        this.update();
        this.updateHeight();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.inited)
            this.update();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.bodyEl.classList.remove(cls, fsCls, hideTitleCls);
        this.uninstallResizeEvent();
        this.srv$.unsubscribe();
        this.route$.unsubscribe();
    }
    /**
     * @return {?}
     */
    installResizeEvent() {
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(() => this.updateHeight()));
    }
    /**
     * @return {?}
     */
    uninstallResizeEvent() {
        this.scroll$.unsubscribe();
    }
}
FullContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'full-content',
                template: `<ng-content></ng-content>`,
                host: { '[class.ad-full-content]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
// endregion
/** @nocollapse */
FullContentComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Router, },
    { type: ChangeDetectorRef, },
    { type: FullContentService, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
];
FullContentComponent.propDecorators = {
    "_height": [{ type: HostBinding, args: ['style.height.px',] },],
    "fullscreen": [{ type: Input },],
    "hideTitle": [{ type: Input },],
    "padding": [{ type: Input },],
    "fullscreenChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FullContentToggleDirective {
    /**
     * @param {?} parent
     */
    constructor(parent) {
        this.parent = parent;
    }
    /**
     * @return {?}
     */
    _click() {
        this.parent.toggle();
    }
}
FullContentToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[full-toggle]',
            },] },
];
/** @nocollapse */
FullContentToggleDirective.ctorParameters = () => [
    { type: FullContentComponent, },
];
FullContentToggleDirective.propDecorators = {
    "_click": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$17 = [FullContentComponent, FullContentToggleDirective];
class AdFullContentModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AdFullContentModule,
            providers: [FullContentService],
        };
    }
}
AdFullContentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$17],
                exports: [...COMPONENTS$17],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class XlsxDirective {
    /**
     * @param {?} srv
     */
    constructor(srv) {
        this.srv = srv;
    }
    /**
     * @return {?}
     */
    _click() {
        this.srv.export(this.data);
    }
}
XlsxDirective.decorators = [
    { type: Directive, args: [{ selector: '[xlsx]' },] },
];
/** @nocollapse */
XlsxDirective.ctorParameters = () => [
    { type: XlsxService, },
];
XlsxDirective.propDecorators = {
    "data": [{ type: Input, args: ['xlsx',] },],
    "_click": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$18 = [XlsxDirective];
class AdXlsxModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: AdXlsxModule,
            providers: [XlsxService, { provide: DA_XLSX_CONFIG, useValue: config }],
        };
    }
}
AdXlsxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, DelonUtilModule],
                declarations: [...COMPONENTS$18],
                exports: [...COMPONENTS$18],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DA_ZIP_CONFIG = new InjectionToken('DA_ZIP_CONFIG');
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ZipService {
    /**
     * @param {?} config
     * @param {?} http
     * @param {?} lazy
     */
    constructor(config, http$$1, lazy) {
        this.config = config;
        this.http = http$$1;
        this.lazy = lazy;
    }
    /**
     * @return {?}
     */
    init() {
        const /** @type {?} */ config = Object.assign({
            url: `//cdn.bootcss.com/jszip/3.1.5/jszip.min.js`,
            utils: [],
        }, this.config);
        return this.lazy.load([config.url].concat(config.utils));
    }
    /**
     * @param {?} zip
     * @return {?}
     */
    check(zip) {
        if (!zip)
            throw new Error('get instance via `ZipService.create()`');
    }
    /**
     * 解压
     * @param {?} fileOrUrl
     * @param {?=} options
     * @return {?}
     */
    read(fileOrUrl, options) {
        return new Promise((resolve, reject) => {
            this.init().then(() => {
                // from url
                if (typeof fileOrUrl === 'string') {
                    this.http
                        .request('GET', fileOrUrl, { responseType: 'arraybuffer' })
                        .subscribe((res) => {
                        JSZip.loadAsync(res, options).then(ret => resolve(ret));
                    }, (err) => {
                        reject(err);
                    });
                    return;
                }
                // from file
                const /** @type {?} */ reader = new FileReader();
                reader.onload = (e) => {
                    JSZip.loadAsync(e.target.result, options).then(ret => resolve(ret));
                };
                reader.readAsBinaryString(/** @type {?} */ (fileOrUrl));
            });
        });
    }
    /**
     * 创建 Zip 实例，用于创建压缩文件
     * @return {?}
     */
    create() {
        return new Promise(resolve => {
            this.init().then(() => {
                const /** @type {?} */ zipFile = new JSZip();
                resolve(zipFile);
            });
        });
    }
    /**
     * 下载URL资源并写入 zip
     * @param {?} zip Zip 实例
     * @param {?} path Zip 路径，例如： `text.txt`、`txt/hi.txt`
     * @param {?} url URL 地址
     * @return {?}
     */
    pushUrl(zip, path, url) {
        this.check(zip);
        return new Promise((resolve, reject) => {
            this.http.request('GET', url, { responseType: 'arraybuffer' }).subscribe((res) => {
                zip.file(path, res);
                resolve();
            }, (error) => {
                reject({ url, error });
            });
        });
    }
    /**
     * 保存Zip并执行打开保存对话框
     *
     * @param {?} zip zip 对象，务必通过 `create()` 构建
     * @param {?=} options 额外参数，
     * @return {?}
     */
    save(zip, options) {
        this.check(zip);
        const /** @type {?} */ opt = Object.assign({}, options);
        return new Promise((resolve, reject) => {
            zip
                .generateAsync(Object.assign({ type: 'blob' }, opt.options), opt.update)
                .then((data) => {
                if (opt.callback)
                    opt.callback(data);
                saveAs(data, opt.filename || 'download.zip');
                resolve();
            }, err => {
                reject(err);
            });
        });
    }
}
ZipService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ZipService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DA_ZIP_CONFIG,] },] },
    { type: HttpClient, },
    { type: LazyService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdZipModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: AdZipModule,
            providers: [ZipService, { provide: DA_ZIP_CONFIG, useValue: config }],
        };
    }
}
AdZipModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, DelonUtilModule],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @param {?=} rmb
 * @param {?=} options
 * @return {?}
 */
function numberToChinese(value, rmb = true, options) {
    options = Object.assign({
        minusSymbol: '负',
        validThrow: false,
    }, options);
    if (typeof value === 'number')
        value = value.toString();
    if (!/^-?\d+(\.\d+)?$/.test(value) && options.validThrow)
        throw new Error(`${value} is invalid number type`);
    let /** @type {?} */ integer, /** @type {?} */ decimal;
    [integer, decimal] = value.split('.');
    let /** @type {?} */ symbol = '';
    if (integer.startsWith('-')) {
        symbol = options.minusSymbol;
        integer = integer.substr(1);
    }
    if (/^-?\d+$/.test(value))
        decimal = null;
    integer = (+integer).toString();
    const /** @type {?} */ unit = {
        num: rmb
            ? ['', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖', '点']
            : ['', '一', '二', '三', '四', '五', '六', '七', '八', '九', '点'],
        radice: rmb
            ? [
                '',
                '拾',
                '佰',
                '仟',
                '万',
                '拾',
                '佰',
                '仟',
                '亿',
                '拾',
                '佰',
                '仟',
                '万亿',
                '拾',
                '佰',
                '仟',
                '兆',
                '拾',
                '佰',
                '仟',
            ]
            : [
                '',
                '十',
                '百',
                '千',
                '万',
                '十',
                '百',
                '千',
                '亿',
                '十',
                '百',
                '千',
                '万亿',
                '十',
                '百',
                '千',
                '兆',
                '十',
                '百',
                '千',
            ],
        dec: ['角', '分', '厘', '毫'],
    };
    if (rmb)
        value = (+value).toFixed(5).toString();
    let /** @type {?} */ integerRes = '';
    const /** @type {?} */ integerCount = integer.length;
    if (integer === '0' || integerCount === 0) {
        integerRes = '零';
    }
    else {
        let /** @type {?} */ cnDesc = '';
        for (let /** @type {?} */ i = 0; i < integerCount; i++) {
            const /** @type {?} */ n = +integer[i], /** @type {?} */
            j = integerCount - i - 1, /** @type {?} */
            isZero = i > 1 && n !== 0 && integer[i - 1] === '0', /** @type {?} */
            cnZero = isZero ? '零' : '', /** @type {?} */
            isEmpptyUnit = (n === 0 && j % 4 !== 0) || integer.substr(i - 3, 4) === '0000', /** @type {?} */
            descMark = cnDesc;
            let /** @type {?} */ cnNum = unit.num[n];
            cnDesc = isEmpptyUnit ? '' : unit.radice[j];
            // 第一位是一十
            if (i === 0 && cnNum === '一' && cnDesc === '十')
                cnNum = '';
            const /** @type {?} */ isChangeEr = n > 1 &&
                cnNum === '二' && // 去除首位
                // 去除首位
                ['', '十', '百'].indexOf(cnDesc) === -1 && // 不读两\两十\两百
                // 不读两\两十\两百
                descMark !== '十'; // 不读十两
            if (isChangeEr)
                cnNum = '两';
            integerRes += cnZero + cnNum + cnDesc;
        }
    }
    // 小数部分拼接
    let /** @type {?} */ decimalRes = '';
    const /** @type {?} */ decimalCount = decimal ? decimal.toString().length : 0;
    if (decimal === null) {
        decimalRes = rmb ? '整' : '';
    }
    else if (decimal === '0') {
        decimalRes = '零';
    }
    else {
        for (let /** @type {?} */ i = 0; i < decimalCount; i++) {
            if (rmb && i > unit.dec.length - 1)
                break;
            const /** @type {?} */ n = decimal[i], /** @type {?} */
            cnZero = n === '0' ? '零' : '', /** @type {?} */
            cnNum = unit.num[n], /** @type {?} */
            cnDesc = rmb ? unit.dec[i] : '';
            decimalRes += cnZero + cnNum + cnDesc;
        }
    }
    const /** @type {?} */ ret = symbol +
        (rmb
            ? integerRes + (decimalRes === '零' ? '元整' : `元${decimalRes}`)
            : integerRes + (decimalRes === '' ? '' : `点${decimalRes}`));
    return ret;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NumberToChinesePipe {
    /**
     * @param {?} value
     * @param {?=} rmb
     * @param {?=} minusSymbol
     * @return {?}
     */
    transform(value, rmb = true, minusSymbol = '负') {
        return numberToChinese(value, rmb, { minusSymbol });
    }
}
NumberToChinesePipe.decorators = [
    { type: Pipe, args: [{ name: 'n2c' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const PIPES = [NumberToChinesePipe];
class AdNumberToChineseModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdNumberToChineseModule, providers: [] };
    }
}
AdNumberToChineseModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: PIPES,
                exports: PIPES,
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdLodopConfig {
}
AdLodopConfig.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LodopService {
    /**
     * @param {?} defCog
     * @param {?} scriptSrv
     */
    constructor(defCog, scriptSrv) {
        this.defCog = defCog;
        this.scriptSrv = scriptSrv;
        this.pending = false;
        this._lodop = null;
        this._init = new Subject$1();
        this._events = new Subject$1();
        this.printBuffer = [];
        this.cog = defCog;
    }
    /**
     * 获取或重新设置配置
     *
     * **注：**重新设置会倒置重新加载脚本资源
     * @return {?}
     */
    get cog() {
        return this._cog;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set cog(value) {
        this._cog = Object.assign({
            url: 'https://localhost:8443/CLodopfuncs.js',
            name: 'CLODOP',
            companyName: '',
            checkMaxCount: 100,
        }, this.defCog, value);
    }
    /**
     * 事件变更通知
     * @return {?}
     */
    get events() {
        return this._events.asObservable();
    }
    /**
     * @return {?}
     */
    check() {
        if (!this._lodop)
            throw new Error(`请务必先调用 lodop 获取对象`);
    }
    /**
     * @return {?}
     */
    request() {
        this.pending = true;
        const /** @type {?} */ url = `${this.cog.url}?name=${this.cog.name}`;
        let /** @type {?} */ checkMaxCount = this.cog.checkMaxCount;
        const /** @type {?} */ onResolve = (status, error) => {
            this._init.next({
                ok: status === 'ok',
                status,
                error,
                lodop: this._lodop,
            });
        };
        const /** @type {?} */ checkStatus = () => {
            --checkMaxCount;
            if (this._lodop.webskt && this._lodop.webskt.readyState === 1) {
                onResolve('ok');
            }
            else {
                if (checkMaxCount < 0) {
                    onResolve('check-limit');
                    return;
                }
                setTimeout(() => checkStatus(), 100);
            }
        };
        this.scriptSrv.load(url).then((res) => {
            if (res.length === 1 && res[0].status !== 'ok') {
                this.pending = false;
                onResolve('script-load-error', res[0]);
                return;
            }
            this._lodop =
                window.hasOwnProperty(this.cog.name) &&
                    (/** @type {?} */ (window[this.cog.name]));
            if (this._lodop === null) {
                onResolve('load-variable-name-error', { name: this.cog.name });
                return;
            }
            this._lodop.SET_LICENSES(this.cog.companyName, this.cog.license, this.cog.licenseA, this.cog.licenseB);
            checkStatus();
        });
    }
    /**
     * 重置 lodop 对象
     * @return {?}
     */
    reset() {
        this._lodop = null;
        this.pending = false;
        this.request();
    }
    /**
     * 获取 lodop 对象
     * @return {?}
     */
    get lodop() {
        if (this._lodop)
            return of$1(/** @type {?} */ ({ ok: true, lodop: this._lodop }));
        if (this.pending)
            return this._init.asObservable();
        this.request();
        return this._init.asObservable();
    }
    /**
     * 获取打印机列表
     * @return {?}
     */
    get printer() {
        this.check();
        const /** @type {?} */ ret = [];
        const /** @type {?} */ count = this._lodop.GET_PRINTER_COUNT();
        for (let /** @type {?} */ index = 0; index < count; index++) {
            ret.push(this._lodop.GET_PRINTER_NAME(index));
        }
        return ret;
    }
    /**
     * 附加代码至 `lodop` 对象上，字符串类支持 `{{key}}` 的动态参数
     *
     * **注：** 代码是指打印设计所产生字符串数据
     *
     * @param {?} code 代码
     * @param {?=} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    attachCode(code, contextObj, parser) {
        this.check();
        if (!parser)
            parser = /LODOP\.([^(]+)\(([^\n]+)\);/i;
        code.split('\n').forEach(line => {
            const /** @type {?} */ res = parser.exec(line.trim());
            if (!res)
                return;
            const /** @type {?} */ fn = this._lodop[res[1]];
            if (fn) {
                let /** @type {?} */ arr;
                try {
                    const /** @type {?} */ fakeFn = new Function(`return [${res[2]}]`);
                    arr = /** @type {?} */ (fakeFn());
                }
                catch (_a) { }
                if (Array.isArray(arr) && contextObj) {
                    for (let /** @type {?} */ i = 0; i < arr.length; i++) {
                        if (typeof arr[i] === 'string') {
                            arr[i] = arr[i].replace(/{{(.*?)}}/g, (match, key) => contextObj[key.trim()] || '');
                        }
                    }
                }
                fn.apply(this._lodop, arr);
            }
        });
    }
    /**
     * 打开打印设计关闭后自动返回代码
     *
     * **注：** 自动监听 `On_Return` 事件，运行后会移除
     * @return {?}
     */
    design() {
        this.check();
        const /** @type {?} */ tid = this._lodop.PRINT_DESIGN();
        return new Promise(resolve => {
            this._lodop.On_Return = (taskID, value) => {
                if (tid !== taskID)
                    return;
                this._lodop.On_Return = null;
                resolve('' + value);
            };
        });
    }
    /**
     * @return {?}
     */
    printDo() {
        const /** @type {?} */ data = this.printBuffer.shift();
        if (!data)
            return;
        this.attachCode(data.code, data.item, data.parser);
        const /** @type {?} */ tid = this._lodop.PRINT();
        this._lodop.On_Return = (taskID, value) => {
            if (tid !== taskID)
                return;
            this._lodop.On_Return = null;
            this._events.next(Object.assign(/** @type {?} */ ({
                ok: value === true,
                error: value === true ? null : value,
            }), data));
            this.printDo();
        };
    }
    /**
     * 立即打印，一般用于批量套打
     *
     * @param {?} code 代码
     * @param {?} contextObj 动态参数上下文对象
     * @param {?=} parser 自定义解析表达式，默认：`/LODOP\.([^(]+)\(([^\n]+)\);/i`
     * @return {?}
     */
    print(code, contextObj, parser) {
        this.check();
        if (contextObj) {
            this.printBuffer.push(...(Array.isArray(contextObj) ? contextObj : [contextObj]).map(item => {
                return { code, parser, item };
            }));
        }
        this.printDo();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._init.unsubscribe();
        this._events.unsubscribe();
    }
}
LodopService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LodopService.ctorParameters = () => [
    { type: AdLodopConfig, },
    { type: LazyService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdLodopModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AdLodopModule,
            providers: [LodopService, AdLodopConfig],
        };
    }
}
AdLodopModule.decorators = [
    { type: NgModule, args: [{
                imports: [DelonUtilModule],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class QuickMenuComponent {
    /**
     * @param {?} cd
     * @param {?} el
     * @param {?} render
     */
    constructor(cd, el, render) {
        this.cd = cd;
        this.el = el;
        this.render = render;
        // region: fields
        this.icon = 'anticon anticon-question-circle-o';
        this.top = 120;
        this.width = 200;
        this.bgColor = '#fff';
        this.borderColor = '#ddd';
        this.show = false;
        this.ctrlStyle = {};
        this.initFlag = false;
    }
    /**
     * @return {?}
     */
    _click() {
        this.show = !this.show;
        this.setStyle();
    }
    /**
     * @return {?}
     */
    setStyle() {
        this.ctrlStyle = {
            'background-color': this.bgColor,
            'border-color': this.borderColor,
        };
        const /** @type {?} */ res = [
            `top:${this.top}px`,
            `width:${this.width}px`,
            `background-color:${this.bgColor}`,
            `border-color:${this.borderColor}`,
            `margin-right:-${this.show ? 0 : this.width}px`,
        ];
        this.render.setAttribute(this.el.nativeElement, 'style', res.join(';'));
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.setStyle();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.setStyle();
    }
}
QuickMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'quick-menu',
                template: `
  <div class="ad-quick-menu__inner">
    <div class="ad-quick-menu__ctrl" [ngStyle]="ctrlStyle">
      <i [ngClass]="icon"></i>
    </div>
    <ng-content></ng-content>
  </div>
  `,
                host: { '[class.ad-quick-menu]': 'true' },
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
QuickMenuComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
    { type: Renderer2, },
];
QuickMenuComponent.propDecorators = {
    "icon": [{ type: Input },],
    "top": [{ type: Input },],
    "width": [{ type: Input },],
    "bgColor": [{ type: Input },],
    "borderColor": [{ type: Input },],
    "_click": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$19 = [QuickMenuComponent];
class AdQuickMenuModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdQuickMenuModule, providers: [] };
    }
}
AdQuickMenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$19],
                exports: [...COMPONENTS$19],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AdQRConfig {
    constructor() {
        /**
         * 背景，默认：`white`
         */
        this.background = 'white';
        /**
         * 背景透明级别，范围：`0-1` 之间，默认：`1.0`
         */
        this.backgroundAlpha = 1.0;
        /**
         * 前景，默认：`black`
         */
        this.foreground = 'black';
        /**
         * 前景透明级别，范围：`0-1` 之间，默认：`1.0`
         */
        this.foregroundAlpha = 1.0;
        /**
         * 误差校正级别，默认：`L`
         */
        this.level = 'L';
        /**
         * 二维码输出图片MIME类型，默认：`image/png`
         */
        this.mime = 'image/png';
        /**
         * 内边距（单位：px），默认：`10`
         */
        this.padding = 10;
        /**
         * 大小（单位：px），默认：`220`
         */
        this.size = 220;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class QRService {
    /**
     * @param {?} cog
     */
    constructor(cog) {
        /**
         * 背景透明级别，范围：`0-1` 之间
         */
        this.backgroundAlpha = 1.0;
        Object.assign(this, cog);
        this.qr = new QRious();
    }
    /**
     * 生成二维码，并返回Base64编码
     *
     * @param {?=} value
     * @return {?}
     */
    refresh(value) {
        this.qr.set(typeof value === 'object' ? value : {
            background: this.background,
            backgroundAlpha: this.backgroundAlpha,
            foreground: this.foreground,
            foregroundAlpha: this.foregroundAlpha,
            level: this.level,
            padding: this.padding,
            size: this.size,
            value: value || this.value,
        });
        return this.dataURL;
    }
    /**
     * 返回当前二维码Base64编码
     * @return {?}
     */
    get dataURL() {
        return this.qr.toDataURL();
    }
}
QRService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
QRService.ctorParameters = () => [
    { type: AdQRConfig, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class QRComponent {
    /**
     * @param {?} cog
     * @param {?} srv
     * @param {?} cd
     */
    constructor(cog, srv, cd) {
        this.srv = srv;
        this.cd = cd;
        /**
         * 变更时回调
         */
        this.change = new EventEmitter();
        Object.assign(this, cog);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.dataURL = this.srv.refresh({
            background: this.background,
            backgroundAlpha: this.backgroundAlpha,
            foreground: this.foreground,
            foregroundAlpha: this.foregroundAlpha,
            level: this.level,
            mime: this.mime,
            padding: this.padding,
            size: this.size,
            value: this.value
        });
        this.cd.detectChanges();
        this.change.emit(this.dataURL);
    }
}
QRComponent.decorators = [
    { type: Component, args: [{
                selector: 'qr',
                template: `
  <img src="{{dataURL}}">
  `,
                preserveWhitespaces: false,
                host: { '[class.ad-qr]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
QRComponent.ctorParameters = () => [
    { type: AdQRConfig, },
    { type: QRService, },
    { type: ChangeDetectorRef, },
];
QRComponent.propDecorators = {
    "background": [{ type: Input },],
    "backgroundAlpha": [{ type: Input },],
    "foreground": [{ type: Input },],
    "foregroundAlpha": [{ type: Input },],
    "level": [{ type: Input },],
    "mime": [{ type: Input },],
    "padding": [{ type: Input },],
    "size": [{ type: HostBinding, args: ['style.height.px',] }, { type: HostBinding, args: ['style.width.px',] }, { type: Input },],
    "value": [{ type: Input },],
    "change": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$20 = [QRComponent];
class AdQRModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdQRModule, providers: [AdQRConfig, QRService] };
    }
}
AdQRModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$20],
                exports: [...COMPONENTS$20],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2BarComponent {
    /**
     * @param {?} el
     * @param {?} cd
     */
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._autoLabel = true;
        // endregion
        this._cls = true;
        this.autoHideXLabels = false;
        this.scroll$ = null;
        this.cd.detach();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get autoLabel() {
        return this._autoLabel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoLabel(value) {
        this._autoLabel = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    install() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // this.uninstall();
        this.node.nativeElement.innerHTML = '';
        let /** @type {?} */ padding = Object.assign([], this.padding);
        if (padding.length <= 0)
            padding = [32, 0, this.autoHideXLabels ? 8 : 32, 40];
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - 22,
            legend: null,
            padding: padding,
        });
        chart.axis('x', !this.autoHideXLabels);
        chart.axis('y', {
            title: false,
            line: false,
            tickLine: false,
        });
        chart.source(this.data, {
            x: {
                type: 'cat',
            },
            y: {
                min: 0,
            },
        });
        chart.tooltip({
            showTitle: false,
        });
        chart
            .interval()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', (x, y) => {
            return {
                name: x,
                value: y,
            };
        });
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        }, 30);
        this.chart = chart;
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.installResizeEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.resize();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstallResizeEvent();
        this.uninstall();
    }
    /**
     * @return {?}
     */
    installResizeEvent() {
        if (!this.autoLabel || this.scroll$)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(() => this.resize()));
    }
    /**
     * @return {?}
     */
    uninstallResizeEvent() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    resize() {
        const /** @type {?} */ canvasWidth = this.el.nativeElement.clientWidth;
        const /** @type {?} */ minWidth = this.data.length * 30;
        if (canvasWidth <= minWidth) {
            if (!this.autoHideXLabels) {
                this.autoHideXLabels = true;
                this.install();
                return;
            }
        }
        else if (this.autoHideXLabels) {
            this.autoHideXLabels = false;
            this.install();
            return;
        }
        if (!this.chart)
            this.install();
    }
}
G2BarComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-bar',
                template: `
  <ng-container *ngIf="_title; else _titleTpl"><h4>{{_title}}</h4></ng-container>
  <div #container></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
G2BarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
G2BarComponent.propDecorators = {
    "title": [{ type: Input },],
    "color": [{ type: Input },],
    "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
    "padding": [{ type: Input },],
    "data": [{ type: Input },],
    "autoLabel": [{ type: Input },],
    "_cls": [{ type: HostBinding, args: ['class.g2-chart',] },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$21 = [G2BarComponent];
class AdG2BarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2BarModule, providers: [] };
    }
}
AdG2BarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$21],
                exports: [...COMPONENTS$21],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2CardComponent {
    constructor() {
        this._bordered = false;
        this._avatar = '';
        this._title = '';
        this._action = '';
        this.total = '';
        this._height = 'auto';
        this._footer = '';
        this._loading = false;
    }
    /**
     * 是否显示边框
     * @return {?}
     */
    get bordered() {
        return this._bordered;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set bordered(value) {
        this._bordered = coerceBooleanProperty(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set avatar(value) {
        if (value instanceof TemplateRef) {
            this._avatar = null;
            this._avatarTpl = value;
        }
        else
            this._avatar = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set action(value) {
        if (value instanceof TemplateRef) {
            this._action = null;
            this._actionTpl = value;
        }
        else
            this._action = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set contentHeight(value) {
        this._orgHeight = value;
        this._height =
            typeof value === 'number' ? (this._height = `${value}px`) : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set footer(value) {
        if (value instanceof TemplateRef) {
            this._footer = null;
            this._footerTpl = value;
        }
        else
            this._footer = value;
    }
    /**
     * 是否显示Loading
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = coerceBooleanProperty(value);
    }
}
G2CardComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-card',
                template: `
  <nz-card [nzBodyStyle]="{padding: '20px 24px 8px 24px'}" [nzBordered]="bordered">
    <nz-spin [nzSpinning]="loading">
      <div class="chart-card">
        <div class="chart-top">
          <div class="avatar"><ng-container *ngIf="_avatar; else _avatarTpl">{{ _avatar }}</ng-container></div>
          <div class="meta-wrap">
            <div class="meta">
              <span class="title" *ngIf="_title; else _titleTpl">{{ _title }}</span>
              <span class="action" *ngIf="_action || _actionTpl">
                <ng-container *ngIf="_action; else _actionTpl">{{ _action }}</ng-container>
              </span>
            </div>
            <p *ngIf="total" class="total" [innerHTML]="total"></p>
          </div>
        </div>
        <div class="desc" [ngStyle]="{'height':_height}">
          <div [ngClass]="{'fixed': !!_orgHeight }">
            <ng-content></ng-content>
          </div>
        </div>
        <div class="footer" *ngIf="_footer || _footerTpl">
          <ng-container *ngIf="_footer; else _footerTpl">{{ _footer }}</ng-container>
        </div>
      </div>
    </nz-spin>
  </nz-card>`,
                host: { '[class.ad-g2-card]': 'true' },
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
G2CardComponent.propDecorators = {
    "bordered": [{ type: Input },],
    "avatar": [{ type: Input },],
    "title": [{ type: Input },],
    "action": [{ type: Input },],
    "total": [{ type: Input },],
    "contentHeight": [{ type: Input },],
    "footer": [{ type: Input },],
    "loading": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$22 = [G2CardComponent];
class AdG2CardModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2CardModule, providers: [] };
    }
}
AdG2CardModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$22],
                exports: [...COMPONENTS$22],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2ChartComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this._resizeTime = 0;
        this.render = new EventEmitter();
        this.resize = new EventEmitter();
        this.destroy = new EventEmitter();
        this.resize$ = null;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get resizeTime() {
        return this._resizeTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set resizeTime(value) {
        this._resizeTime = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    renderChart() {
        this.el.nativeElement.innerHTML = '';
        this.render.emit(this.el);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout(() => this.renderChart(), 200);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy.emit(this.el);
        this.uninstallResizeEvent();
    }
    /**
     * @return {?}
     */
    installResizeEvent() {
        if (this.resizeTime <= 0 || !this.resize$)
            return;
        if (this.resizeTime <= 200)
            this.resizeTime = 200;
        this.resize$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(this.resizeTime))
            .subscribe(() => this.resize.emit(this.el)));
    }
    /**
     * @return {?}
     */
    uninstallResizeEvent() {
        if (this.resize$)
            this.resize$.unsubscribe();
    }
}
G2ChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-chart',
                template: ``,
            },] },
];
// endregion
/** @nocollapse */
G2ChartComponent.ctorParameters = () => [
    { type: ElementRef, },
];
G2ChartComponent.propDecorators = {
    "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
    "resizeTime": [{ type: Input },],
    "render": [{ type: Output },],
    "resize": [{ type: Output },],
    "destroy": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$23 = [G2ChartComponent];
class AdG2ChartModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2ChartModule, providers: [] };
    }
}
AdG2ChartModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$23],
                exports: [...COMPONENTS$23],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2GaugeComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.color = '#2F9CFF';
        this.bgColor = '#F0F2F5';
        this.initFlag = false;
        this.cd.detach();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percent(value) {
        this._percent = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.install();
    }
    /**
     * @return {?}
     */
    createData() {
        return [{ name: this.title, value: +this.percent }];
    }
    /**
     * @return {?}
     */
    draw() {
        if (!this.chart)
            return;
        this.chart.guide().clear();
        const /** @type {?} */ data = this.createData();
        // 绘制仪表盘背景
        this.chart.guide().arc({
            zIndex: 0,
            top: false,
            start: [0, 0.95],
            end: [100, 0.95],
            style: {
                // 底灰色
                stroke: this.bgColor,
                lineWidth: 12,
            },
        });
        // 绘制指标
        this.chart.guide().arc({
            zIndex: 1,
            start: [0, 0.95],
            end: [data[0].value, 0.95],
            style: {
                stroke: this.color,
                lineWidth: 12,
            },
        });
        this.chart.changeData(data);
    }
    /**
     * @return {?}
     */
    install() {
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ Shape = G2.Shape;
        // 自定义Shape 部分
        Shape.registerShape('point', 'pointer', {
            /**
             * @param {?} cfg
             * @param {?} group
             * @return {?}
             */
            drawShape(cfg, group) {
                let /** @type {?} */ point = cfg.points[0]; // 获取第一个标记点
                point = this.parsePoint(point);
                const /** @type {?} */ center = this.parsePoint({
                    // 获取极坐标系下画布中心点
                    x: 0,
                    y: 0,
                });
                // 绘制指针
                group.addShape('line', {
                    attrs: {
                        x1: center.x,
                        y1: center.y,
                        x2: point.x,
                        y2: point.y,
                        stroke: cfg.color,
                        lineWidth: 2,
                        lineCap: 'round',
                    },
                });
                const { origin } = cfg;
                group.addShape('text', {
                    attrs: {
                        x: center.x,
                        y: center.y + 80,
                        text: `${origin._origin.value}%`,
                        textAlign: 'center',
                        fontSize: 24,
                        fill: 'rgba(0, 0, 0, 0.85)',
                    },
                });
                return group.addShape('circle', {
                    attrs: {
                        x: center.x,
                        y: center.y,
                        r: 9.75,
                        stroke: cfg.color,
                        lineWidth: 2,
                        fill: '#fff',
                    },
                });
            },
        });
        const /** @type {?} */ data = this.createData();
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: [10, 10, 30, 10],
        });
        chart.source(data);
        chart.coord('polar', {
            startAngle: -1.2 * Math.PI,
            endAngle: 0.2 * Math.PI,
        });
        chart.scale('value', {
            min: 0,
            max: 100,
            nice: true,
            tickCount: 6,
        });
        chart.axis('1', false);
        // 刻度值
        chart.axis('value', {
            zIndex: 2,
            line: null,
            label: {
                offset: -12,
                formatter: this.format,
            },
            tickLine: null,
            grid: null,
        });
        chart.legend(false);
        chart
            .point({
            generatePoints: true,
        })
            .position('value*1')
            .shape('pointer')
            .color(this.color)
            .active(false);
        this.chart = chart;
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.draw();
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart)
            this.chart.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.draw();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2GaugeComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-gauge',
                template: `<div #container></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
G2GaugeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
G2GaugeComponent.propDecorators = {
    "title": [{ type: Input },],
    "height": [{ type: Input },],
    "color": [{ type: Input },],
    "bgColor": [{ type: Input },],
    "format": [{ type: Input },],
    "percent": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$24 = [G2GaugeComponent];
class AdG2GaugeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2GaugeModule, providers: [] };
    }
}
AdG2GaugeModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$24],
                exports: [...COMPONENTS$24],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2MiniAreaComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.2)';
        this.borderColor = '#1890FF';
        this._borderWidth = 2;
        this._fit = true;
        this._line = false;
        this._animate = true;
        this.padding = [8, 8, 8, 8];
        this.cd.detach();
    }
    /**
     * @return {?}
     */
    get borderWidth() {
        return this._borderWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set borderWidth(value) {
        this._borderWidth = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get fit() {
        return this._fit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fit(value) {
        this._fit = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get line() {
        return this._line;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set line(value) {
        this._line = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get animate() {
        return this._animate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set animate(value) {
        this._animate = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    install() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: this.fit,
            height: +this.height,
            animate: this.animate,
            padding: this.padding,
            legend: null,
        });
        if (!this.xAxis && !this.yAxis) {
            chart.axis(false);
        }
        if (this.xAxis) {
            chart.axis('x', this.xAxis);
        }
        else {
            chart.axis('x', false);
        }
        if (this.yAxis) {
            chart.axis('y', this.yAxis);
        }
        else {
            chart.axis('y', false);
        }
        const /** @type {?} */ dataConfig = {
            x: {
                type: 'cat',
                range: [0, 1],
                xAxis: this.xAxis,
            },
            y: {
                min: 0,
                yAxis: this.yAxis,
            },
        };
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: `0px 4px` },
        });
        const /** @type {?} */ view = chart.view();
        view.source(this.data, dataConfig);
        view
            .area()
            .position('x*y')
            .color(this.color)
            .tooltip('x*y', (x, y) => {
            return {
                name: x,
                value: y,
            };
        })
            .shape('smooth')
            .style({ fillOpacity: 1 });
        if (this.line) {
            const /** @type {?} */ view2 = chart.view();
            view2.source(this.data, dataConfig);
            view2
                .line()
                .position('x*y')
                .color(this.borderColor)
                .size(this.borderWidth)
                .shape('smooth');
            view2.tooltip(false);
        }
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2MiniAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-mini-area',
                template: `<div #container></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
G2MiniAreaComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
G2MiniAreaComponent.propDecorators = {
    "color": [{ type: Input },],
    "borderColor": [{ type: Input },],
    "borderWidth": [{ type: Input },],
    "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
    "fit": [{ type: Input },],
    "line": [{ type: Input },],
    "animate": [{ type: Input },],
    "xAxis": [{ type: Input },],
    "yAxis": [{ type: Input },],
    "padding": [{ type: Input },],
    "data": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$25 = [G2MiniAreaComponent];
class AdG2MiniAreaModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2MiniAreaModule, providers: [] };
    }
}
AdG2MiniAreaModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$25],
                exports: [...COMPONENTS$25],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2MiniBarComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        // region: fields
        this.color = '#1890FF';
        this._height = 0;
        this._borderWidth = 5;
        this.padding = [8, 8, 8, 8];
        this.cd.detach();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get borderWidth() {
        return this._borderWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set borderWidth(value) {
        this._borderWidth = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    install() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
            legend: null,
        });
        chart.axis(false);
        chart.source(this.data, {
            x: {
                type: 'cat',
            },
            y: {
                min: 0,
            },
        });
        chart.tooltip({
            showTitle: false,
            hideMarkders: false,
            crosshairs: false,
            'g2-tooltip': { padding: 4 },
            'g2-tooltip-list-item': { margin: `0px 4px` },
        });
        chart
            .interval()
            .position('x*y')
            .size(this.borderWidth)
            .color(this.color)
            .tooltip('x*y', (x, y) => {
            return {
                name: x,
                value: y,
            };
        });
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2MiniBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-mini-bar',
                template: `<div #container></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
G2MiniBarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
G2MiniBarComponent.propDecorators = {
    "color": [{ type: Input },],
    "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
    "borderWidth": [{ type: Input },],
    "padding": [{ type: Input },],
    "data": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$26 = [G2MiniBarComponent];
class AdG2MiniBarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2MiniBarModule, providers: [] };
    }
}
AdG2MiniBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [...COMPONENTS$26],
                exports: [...COMPONENTS$26],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2ProgressComponent {
    constructor() {
        // region: fields
        this.color = '#1890FF';
    }
    /**
     * @return {?}
     */
    get target() {
        return this._target;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set target(value) {
        this._target = Math.min(Math.max(coerceNumberProperty(value), 0), 100);
    }
    /**
     * @return {?}
     */
    get strokeWidth() {
        return this._strokeWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set strokeWidth(value) {
        this._strokeWidth = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percent(value) {
        this._percent = Math.min(Math.max(coerceNumberProperty(value), 0), 100);
    }
}
G2ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-mini-progress',
                template: `
  <nz-tooltip [nzTitle]="'目标值: ' + target + '%'">
    <div nz-tooltip class="target" [ngStyle]="{'left.%': target}">
      <span [ngStyle]="{'background-color': color}"></span>
      <span [ngStyle]="{'background-color': color}"></span>
    </div>
  </nz-tooltip>
  <div class="progress-wrap">
    <div class="progress" [ngStyle]="{'background-color': color, 'width.%': percent, 'height.px':strokeWidth}"></div>
  </div>
  `,
                host: { '[class.ad-g2-progress]': 'true' },
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
G2ProgressComponent.propDecorators = {
    "color": [{ type: Input },],
    "target": [{ type: Input },],
    "strokeWidth": [{ type: Input },],
    "percent": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$27 = [G2ProgressComponent];
class AdG2MiniProgressModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2MiniProgressModule, providers: [] };
    }
}
AdG2MiniProgressModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$27],
                exports: [...COMPONENTS$27],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2PieComponent {
    /**
     * @param {?} el
     * @param {?} cd
     */
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        this._animate = true;
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this._hasLegend = false;
        this._legendBlock = false;
        this.inner = 0.75;
        this.padding = [12, 0, 12, 0];
        this._tooltip = true;
        this._lineWidth = 0;
        this._select = true;
        this.initFlag = false;
        this.legendData = [];
        this.scroll$ = null;
    }
    /**
     * @return {?}
     */
    get animate() {
        return this._animate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set animate(value) {
        this._animate = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get hasLegend() {
        return this._hasLegend;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasLegend(value) {
        this._hasLegend = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get legendBlock() {
        return this._legendBlock;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set legendBlock(value) {
        this._legendBlock = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percent(value) {
        this._percent = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tooltip(value) {
        this._tooltip = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get lineWidth() {
        return this._lineWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set lineWidth(value) {
        this._lineWidth = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get select() {
        return this._select;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set select(value) {
        this._select = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    install() {
        let /** @type {?} */ formatColor;
        if (typeof this.percent !== 'undefined') {
            this.select = false;
            this.tooltip = false;
            formatColor = value => value === '占比' ? this.color || 'rgba(24, 144, 255, 0.85)' : '#F0F2F5';
            /* eslint no-param-reassign: */
            this.data = [
                {
                    x: '占比',
                    y: +this.percent,
                },
                {
                    x: '反比',
                    y: 100 - +this.percent,
                },
            ];
        }
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: this.height,
            padding: this.padding,
            animate: this.animate,
        });
        if (!this.tooltip) {
            chart.tooltip(false);
        }
        else {
            chart.tooltip({
                showTitle: false,
                itemTpl: '<li><span style="background-color:{color};" class="g2-tooltip-marker"></span>{name}: {value} %</li>',
            });
        }
        chart.axis(false);
        chart.legend(false);
        const /** @type {?} */ dv = new DataSet.DataView();
        dv.source(this.data).transform({
            type: 'percent',
            field: 'y',
            dimension: 'x',
            as: 'percent',
        });
        chart.source(dv, {
            x: {
                type: 'cat',
                range: [0, 1],
            },
            y: {
                min: 0,
            },
        });
        chart.coord('theta', { innerRadius: this.inner });
        chart
            .intervalStack()
            .position('y')
            .style({ lineWidth: this.lineWidth, stroke: '#fff' })
            .tooltip('x*percent', (item, percent) => {
            return {
                name: item,
                value: percent,
            };
        })
            .color('x', this.percent ? formatColor : this.colors)
            .select(this.select);
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart
                .getAllGeoms()[0]
                ._attrs.dataArray.map((item) => {
                const /** @type {?} */ origin = item[0]._origin;
                origin.color = item[0].color;
                origin.checked = true;
                origin.percent = (origin.percent * 100).toFixed(2);
                return origin;
            });
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @param {?} i
     * @return {?}
     */
    handleLegendClick(i) {
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            this.chart.filter('x', (val, item) => item.checked);
            this.chart.repaint();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        setTimeout(() => this.install(), 100);
        this.installResizeEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstallResizeEvent();
        this.uninstall();
    }
    /**
     * @return {?}
     */
    installResizeEvent() {
        if (!this.hasLegend)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(200))
            .subscribe(() => this.resize()));
    }
    /**
     * @return {?}
     */
    uninstallResizeEvent() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    resize() {
        if (this.el.nativeElement.clientWidth <= 380) {
            if (!this.legendBlock) {
                this.legendBlock = true;
            }
        }
        else if (this.legendBlock) {
            this.legendBlock = false;
        }
        if (!this.chart)
            this.install();
    }
}
G2PieComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-pie',
                template: `
  <div class="chart">
    <div #container></div>
    <div *ngIf="subTitle || total" class="total">
      <h4 *ngIf="subTitle" class="pie-sub-title" [innerHTML]="subTitle"></h4>
      <div *ngIf="total" class="pie-stat" [innerHTML]="total"></div>
    </div>
  </div>
  <ul *ngIf="hasLegend && legendData?.length" class="legend">
    <li *ngFor="let item of legendData; let index = index" (click)="handleLegendClick(index)">
      <span class="dot" [ngStyle]="{'background-color': !item.checked ? '#aaa' : item.color}"></span>
      <span class="legend-title">{{item.x}}</span>
      <nz-divider nzType="vertical"></nz-divider>
      <span class="percent">{{item.percent}}%</span>
      <span class="value" [innerHTML]="valueFormat ? valueFormat(item.y) : item.y"></span>
    </li>
  </ul>`,
                host: { '[class.ad-pie]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
G2PieComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
G2PieComponent.propDecorators = {
    "animate": [{ type: Input },],
    "color": [{ type: Input },],
    "subTitle": [{ type: Input },],
    "total": [{ type: Input },],
    "height": [{ type: Input },],
    "hasLegend": [{ type: HostBinding, args: ['class.has-legend',] }, { type: Input },],
    "legendBlock": [{ type: HostBinding, args: ['class.legend-block',] }, { type: Input },],
    "inner": [{ type: Input },],
    "padding": [{ type: Input },],
    "percent": [{ type: Input },],
    "tooltip": [{ type: Input },],
    "lineWidth": [{ type: Input },],
    "select": [{ type: Input },],
    "data": [{ type: Input },],
    "valueFormat": [{ type: Input },],
    "colors": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$28 = [G2PieComponent];
class AdG2PieModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2PieModule, providers: [] };
    }
}
AdG2PieModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$28],
                exports: [...COMPONENTS$28],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2RadarComponent {
    /**
     * @param {?} el
     * @param {?} cd
     */
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this._title = '';
        this._height = 0;
        this.padding = [44, 30, 16, 30];
        this._hasLegend = true;
        this._tickCount = 4;
        this.data = [];
        this.initFlag = false;
        this.legendData = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get hasLegend() {
        return this._hasLegend;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasLegend(value) {
        this._hasLegend = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get tickCount() {
        return this._tickCount;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tickCount(value) {
        this._tickCount = coerceNumberProperty(value);
    }
    /**
     * @param {?} i
     * @return {?}
     */
    handleLegendClick(i) {
        this.legendData[i].checked = !this.legendData[i].checked;
        if (this.chart) {
            // const filterItem = this.legendData.filter(l => l.checked).map(l => l.name);
            this.chart.filter('name', (val) => this.legendData.find(w => w.name === val).checked);
            this.chart.repaint();
        }
    }
    /**
     * @return {?}
     */
    install() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ colors = [
            '#1890FF',
            '#FACC14',
            '#2FC25B',
            '#8543E0',
            '#F04864',
            '#13C2C2',
            '#fa8c16',
            '#a0d911',
        ];
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height - (this.hasLegend ? 80 : 22),
            padding: this.padding,
        });
        chart.source(this.data, {
            value: {
                min: 0,
                tickCount: this.tickCount,
            },
        });
        chart.coord('polar');
        chart.legend(false);
        chart.axis('label', {
            line: null,
            labelOffset: 8,
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)',
                },
            },
            grid: {
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0],
                },
            },
        });
        chart.axis('value', {
            grid: {
                type: 'polygon',
                line: {
                    stroke: '#e9e9e9',
                    lineWidth: 1,
                    lineDash: [0, 0],
                },
            },
            labels: {
                label: {
                    fill: 'rgba(0, 0, 0, .65)',
                },
            },
        });
        chart
            .line()
            .position('label*value')
            .color('name', colors);
        chart
            .point()
            .position('label*value')
            .color('name', colors)
            .shape('circle')
            .size(3);
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
        if (this.hasLegend) {
            this.legendData = chart
                .getAllGeoms()[0]
                ._attrs.dataArray.map((item) => {
                const /** @type {?} */ origin = item[0]._origin;
                const /** @type {?} */ result = {
                    name: origin.name,
                    color: item[0].color,
                    checked: true,
                    value: item.reduce((p, n) => p + n._origin.value, 0),
                };
                return result;
            });
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.install();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2RadarComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-radar',
                template: `
  <h4 *ngIf="_title; else _titleTpl">{{ _title }}</h4>
  <div #container></div>
  <div nz-row class="legend" *ngIf="hasLegend">
    <div nz-col [nzSpan]="24 / legendData.length" *ngFor="let i of legendData; let idx = index" (click)="handleLegendClick(idx)">
      <div class="legend-item">
        <p>
          <i class="dot" [ngStyle]="{'background-color': !i.checked ? '#aaa' : i.color}"></i>
          <span>{{i.name}}</span>
        </p>
        <h6>{{i.value}}</h6>
      </div>
    </div>
  </div>`,
                host: { '[class.ad-radar]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
G2RadarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
G2RadarComponent.propDecorators = {
    "title": [{ type: Input },],
    "height": [{ type: HostBinding, args: ['style.height.px',] }, { type: Input },],
    "padding": [{ type: Input },],
    "hasLegend": [{ type: Input },],
    "tickCount": [{ type: Input },],
    "data": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$29 = [G2RadarComponent];
class AdG2RadarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2RadarModule, providers: [] };
    }
}
AdG2RadarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$29],
                exports: [...COMPONENTS$29],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2TagCloudComponent {
    /**
     * @param {?} el
     * @param {?} cd
     */
    constructor(el, cd) {
        this.el = el;
        this.cd = cd;
        // region: fields
        this.color = 'rgba(24, 144, 255, 0.85)';
        this._height = 0;
        this.padding = 0;
        this._autoLabel = true;
        this.initFlag = false;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get autoLabel() {
        return this._autoLabel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set autoLabel(value) {
        this._autoLabel = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    initTagCloud() {
        // 给point注册一个词云的shape
        G2.Shape.registerShape('point', 'cloud', {
            /**
             * @param {?} cfg
             * @param {?} container
             * @return {?}
             */
            drawShape(cfg, container) {
                const /** @type {?} */ attrs = Object.assign({}, {
                    fillOpacity: cfg.opacity,
                    fontSize: cfg.origin._origin.size,
                    rotate: cfg.origin._origin.rotate,
                    text: cfg.origin._origin.text,
                    textAlign: 'center',
                    fontFamily: cfg.origin._origin.font,
                    fill: cfg.color,
                    textBaseline: 'Alphabetic',
                }, cfg.style);
                return container.addShape('text', {
                    attrs: Object.assign(attrs, {
                        x: cfg.x,
                        y: cfg.y,
                    }),
                });
            },
        });
    }
    /**
     * @return {?}
     */
    renderChart() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ dv = new DataSet.View().source(this.data);
        const /** @type {?} */ range = dv.range('value');
        const /** @type {?} */ min = range[0];
        const /** @type {?} */ max = range[1];
        const /** @type {?} */ height = +this.height;
        const /** @type {?} */ width = +this.el.nativeElement.offsetWidth;
        dv.transform({
            type: 'tag-cloud',
            fields: ['name', 'value'],
            size: [width, height],
            padding: this.padding,
            timeInterval: 5000,
            /**
             * @return {?}
             */
            rotate() {
                let /** @type {?} */ random = ~~(Math.random() * 4) % 4;
                if (random === 2) {
                    random = 0;
                }
                return random * 90; // 0, 90, 270
            },
            /**
             * @param {?} d
             * @return {?}
             */
            fontSize(d) {
                if (d.value) {
                    return (d.value - min) / (max - min) * (80 - 24) + 24;
                }
                return 0;
            },
        });
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            width: width,
            height: height,
            padding: this.padding,
            forceFit: true,
        });
        chart.source(dv, {
            x: { nice: false },
            y: { nice: false },
        });
        chart.legend(false);
        chart.axis(false);
        chart.tooltip({
            showTitle: false,
        });
        chart.coord().reflect();
        chart
            .point()
            .position('x*y')
            .color('text')
            .shape('cloud')
            .tooltip('value*category');
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        });
        this.chart = chart;
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.initTagCloud();
        this.renderChart();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.renderChart();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2TagCloudComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-tag-cloud',
                template: `<div #container [ngStyle]="{'height.px': height}"></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
G2TagCloudComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
G2TagCloudComponent.propDecorators = {
    "color": [{ type: Input },],
    "height": [{ type: Input },],
    "padding": [{ type: Input },],
    "data": [{ type: Input },],
    "autoLabel": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$30 = [G2TagCloudComponent];
class AdG2TagCloudModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2TagCloudModule, providers: [] };
    }
}
AdG2TagCloudModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$30],
                exports: [...COMPONENTS$30],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2TimelineComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        // region: fields
        this._title = '';
        this.colorMap = { y1: '#1890FF', y2: '#2FC25B' };
        this._height = 400;
        this.padding = [60, 20, 40, 40];
        this._borderWidth = 2;
        this.initFlag = false;
        cd.detach();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get borderWidth() {
        return this._borderWidth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set borderWidth(value) {
        this._borderWidth = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.install();
    }
    /**
     * @return {?}
     */
    install() {
        if (!this.data || (this.data && this.data.length < 1))
            return;
        // clean
        this.sliderNode.nativeElement.innerHTML = '';
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ MAX = 8;
        const /** @type {?} */ begin = this.data.length > MAX ? (this.data.length - MAX) / 2 : 0;
        const /** @type {?} */ ds = new DataSet({
            state: {
                start: this.data[begin - 1].x,
                end: this.data[begin - 1 + MAX].x,
            },
        });
        const /** @type {?} */ dv = ds.createView().source(this.data);
        dv.source(this.data).transform({
            type: 'filter',
            /**
             * @param {?} obj
             * @return {?}
             */
            callback(obj) {
                const /** @type {?} */ time = new Date(obj.x).getTime(); // !注意：时间格式，建议转换为时间戳进行比较
                return time >= ds.state.start && time <= ds.state.end;
            },
        });
        const /** @type {?} */ chart = new G2.Chart({
            container: this.node.nativeElement,
            forceFit: true,
            height: +this.height,
            padding: this.padding,
        });
        chart.axis('x', { title: false });
        chart.axis('y1', {
            title: false,
        });
        chart.axis('y2', false);
        let /** @type {?} */ max;
        if (this.data[0] && this.data[0].y1 && this.data[0].y2) {
            max = Math.max(this.data.sort((a, b) => b.y1 - a.y1)[0].y1, this.data.sort((a, b) => b.y2 - a.y2)[0].y2);
        }
        chart.source(dv, {
            x: {
                type: 'timeCat',
                tickCount: MAX,
                mask: 'HH:mm',
                range: [0, 1],
            },
            y1: {
                alias: this.titleMap.y1,
                max,
                min: 0,
            },
            y2: {
                alias: this.titleMap.y2,
                max,
                min: 0,
            },
        });
        chart.legend({
            position: 'top',
            custom: true,
            clickable: false,
            items: [
                { value: this.titleMap.y1, fill: this.colorMap.y1 },
                { value: this.titleMap.y2, fill: this.colorMap.y2 },
            ],
        });
        chart
            .line()
            .position('x*y1')
            .color(this.colorMap.y1)
            .size(this.borderWidth);
        chart
            .line()
            .position('x*y2')
            .color(this.colorMap.y2)
            .size(this.borderWidth);
        chart.render();
        setTimeout(() => {
            chart.forceFit();
            chart.repaint();
        }, 60);
        const /** @type {?} */ sliderPadding = Object.assign([], this.padding);
        sliderPadding[0] = 0;
        const /** @type {?} */ slider = new Slider({
            container: this.sliderNode.nativeElement,
            height: 26,
            padding: sliderPadding,
            scales: {
                x: {
                    type: 'time',
                    tickCount: 16,
                    mask: 'HH:MM',
                },
            },
            backgroundChart: {
                type: 'line',
            },
            start: ds.state.start,
            end: ds.state.end,
            xAxis: 'x',
            yAxis: 'y1',
            data: this.data,
            /**
             * @param {?} __0
             * @return {?}
             */
            onChange({ startValue, endValue }) {
                ds.setState('start', startValue);
                ds.setState('end', endValue);
            },
        });
        slider.render();
        setTimeout(() => {
            slider.forceFit();
            slider.repaint();
        }, 60);
        this.chart = chart;
        this.slider = slider;
    }
    /**
     * @return {?}
     */
    uninstall() {
        if (this.chart)
            this.chart.destroy();
        if (this.slider)
            this.slider.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.install();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.uninstall();
    }
}
G2TimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-timeline',
                template: `
  <ng-container *ngIf="_title; else _titleTpl"><h4>{{_title}}</h4></ng-container>
  <div #container></div>
  <div #slider></div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
/** @nocollapse */
G2TimelineComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
G2TimelineComponent.propDecorators = {
    "title": [{ type: Input },],
    "data": [{ type: Input },],
    "titleMap": [{ type: Input },],
    "colorMap": [{ type: Input },],
    "height": [{ type: Input },],
    "padding": [{ type: Input },],
    "borderWidth": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
    "sliderNode": [{ type: ViewChild, args: ['slider',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$31 = [G2TimelineComponent];
class AdG2TimelineModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2TimelineModule, providers: [] };
    }
}
AdG2TimelineModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$31],
                exports: [...COMPONENTS$31],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class G2WaterWaveComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} cd
     */
    constructor(el, renderer, cd) {
        this.el = el;
        this.renderer = renderer;
        this.cd = cd;
        // region: fields
        this._title = '';
        this.color = '#1890FF';
        this._height = 160;
        this.initFlag = false;
        this.autoHideXLabels = false;
        this.scroll$ = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set title(value) {
        if (value instanceof TemplateRef) {
            this._title = null;
            this._titleTpl = value;
        }
        else
            this._title = value;
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set percent(value) {
        this._percent = coerceNumberProperty(value);
    }
    /**
     * @return {?}
     */
    renderChart() {
        const /** @type {?} */ data = this.percent / 100;
        if (!data)
            return;
        this.node.nativeElement.innerHTML = '';
        const /** @type {?} */ self = this;
        const /** @type {?} */ canvas = /** @type {?} */ (this.node.nativeElement);
        const /** @type {?} */ ctx = canvas.getContext('2d');
        const /** @type {?} */ canvasWidth = canvas.width;
        const /** @type {?} */ canvasHeight = canvas.height;
        const /** @type {?} */ radius = canvasWidth / 2;
        const /** @type {?} */ lineWidth = 2;
        const /** @type {?} */ cR = radius - lineWidth;
        ctx.beginPath();
        ctx.lineWidth = lineWidth * 2;
        const /** @type {?} */ axisLength = canvasWidth - lineWidth;
        const /** @type {?} */ unit = axisLength / 8;
        const /** @type {?} */ range = 0.2; // 振幅
        let /** @type {?} */ currRange = range;
        const /** @type {?} */ xOffset = lineWidth;
        let /** @type {?} */ sp = 0; // 周期偏移量
        let /** @type {?} */ currData = 0;
        const /** @type {?} */ waveupsp = 0.005; // 水波上涨速度
        let /** @type {?} */ arcStack = [];
        const /** @type {?} */ bR = radius - lineWidth;
        const /** @type {?} */ circleOffset = -(Math.PI / 2);
        let /** @type {?} */ circleLock = true;
        for (let /** @type {?} */ i = circleOffset; i < circleOffset + 2 * Math.PI; i += 1 / (8 * Math.PI)) {
            arcStack.push([radius + bR * Math.cos(i), radius + bR * Math.sin(i)]);
        }
        const /** @type {?} */ cStartPoint = arcStack.shift();
        ctx.strokeStyle = this.color;
        ctx.moveTo(cStartPoint[0], cStartPoint[1]);
        /**
         * @return {?}
         */
        function drawSin() {
            ctx.beginPath();
            ctx.save();
            const /** @type {?} */ sinStack = [];
            for (let /** @type {?} */ i = xOffset; i <= xOffset + axisLength; i += 20 / axisLength) {
                const /** @type {?} */ x = sp + (xOffset + i) / unit;
                const /** @type {?} */ y = Math.sin(x) * currRange;
                const /** @type {?} */ dx = i;
                const /** @type {?} */ dy = 2 * cR * (1 - currData) + (radius - cR) - unit * y;
                ctx.lineTo(dx, dy);
                sinStack.push([dx, dy]);
            }
            const /** @type {?} */ startPoint = sinStack.shift();
            ctx.lineTo(xOffset + axisLength, canvasHeight);
            ctx.lineTo(xOffset, canvasHeight);
            ctx.lineTo(startPoint[0], startPoint[1]);
            const /** @type {?} */ gradient = ctx.createLinearGradient(0, 0, 0, canvasHeight);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#1890FF');
            ctx.fillStyle = gradient;
            ctx.fill();
            ctx.restore();
        }
        /**
         * @return {?}
         */
        function render() {
            ctx.clearRect(0, 0, canvasWidth, canvasHeight);
            if (circleLock) {
                if (arcStack.length) {
                    const /** @type {?} */ temp = arcStack.shift();
                    ctx.lineTo(temp[0], temp[1]);
                    ctx.stroke();
                }
                else {
                    circleLock = false;
                    ctx.lineTo(cStartPoint[0], cStartPoint[1]);
                    ctx.stroke();
                    arcStack = null;
                    ctx.globalCompositeOperation = 'destination-over';
                    ctx.beginPath();
                    ctx.lineWidth = lineWidth;
                    ctx.arc(radius, radius, bR, 0, 2 * Math.PI, true);
                    ctx.beginPath();
                    ctx.save();
                    ctx.arc(radius, radius, radius - 3 * lineWidth, 0, 2 * Math.PI, true);
                    ctx.restore();
                    ctx.clip();
                    ctx.fillStyle = '#1890FF';
                }
            }
            else {
                if (data >= 0.85) {
                    if (currRange > range / 4) {
                        const /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                else if (data <= 0.1) {
                    if (currRange < range * 1.5) {
                        const /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                }
                else {
                    if (currRange <= range) {
                        const /** @type {?} */ t = range * 0.01;
                        currRange += t;
                    }
                    if (currRange >= range) {
                        const /** @type {?} */ t = range * 0.01;
                        currRange -= t;
                    }
                }
                if (data - currData > 0) {
                    currData += waveupsp;
                }
                if (data - currData < 0) {
                    currData -= waveupsp;
                }
                sp += 0.07;
                drawSin();
            }
            self.timer = requestAnimationFrame(render);
        }
        render();
    }
    /**
     * @return {?}
     */
    uninstall() { }
    /**
     * @param {?} radio
     * @return {?}
     */
    updateRadio(radio) {
        this.renderer.setStyle(this.el.nativeElement, 'transform', `scale(${radio})`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.cd.detectChanges();
        this.updateRadio(1);
        this.installResizeEvent();
        setTimeout(() => this.resize(), 130);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag) {
            this.cd.detectChanges();
            this.renderChart();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.timer)
            cancelAnimationFrame(this.timer);
        this.uninstallResizeEvent();
        this.uninstall();
    }
    /**
     * @return {?}
     */
    installResizeEvent() {
        if (this.scroll$)
            return;
        this.scroll$ = /** @type {?} */ (FromEventObservable$1.create(window, 'resize')
            .pipe(debounceTime(500))
            .subscribe(() => this.resize()));
    }
    /**
     * @return {?}
     */
    uninstallResizeEvent() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    resize() {
        const { offsetWidth } = this.el.nativeElement.parentNode;
        this.updateRadio(offsetWidth < this.height ? offsetWidth / this.height : 1);
        this.renderChart();
    }
}
G2WaterWaveComponent.decorators = [
    { type: Component, args: [{
                selector: 'g2-water-wave',
                template: `
  <div [ngStyle]="{'height.px': height, 'width.px': height, 'overflow': 'hidden'}">
    <canvas #container class="canvas-wrap" width="{{height*2}}" height="{{height*2}}"></canvas>
  </div>
  <div class="text" [ngStyle]="{'width.px': height}">
    <ng-container *ngIf="_title; else _titleTpl"><span>{{_title}}</span></ng-container>
    <h4>{{percent}}%</h4>
  </div>`,
                host: { '[class.ad-water-wave]': 'true' },
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
            },] },
];
// endregion
/** @nocollapse */
G2WaterWaveComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
G2WaterWaveComponent.propDecorators = {
    "title": [{ type: Input },],
    "color": [{ type: Input },],
    "height": [{ type: Input },],
    "percent": [{ type: Input },],
    "node": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMPONENTS$32 = [G2WaterWaveComponent];
class AdG2WaterWaveModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AdG2WaterWaveModule, providers: [] };
    }
}
AdG2WaterWaveModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NgZorroAntdModule],
                declarations: [...COMPONENTS$32],
                exports: [...COMPONENTS$32],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const MODULES = [
    AdErrorCollectModule,
    AdFooterToolbarModule,
    AdSidebarNavModule,
    AdDownFileModule,
    AdImageModule,
    AdAvatarListModule,
    AdDescListModule,
    AdEllipsisModule,
    AdGlobalFooterModule,
    AdExceptionModule,
    AdNoticeIconModule,
    AdNumberInfoModule,
    AdPageHeaderModule,
    AdResultModule,
    AdStandardFormRowModule,
    AdTagSelectModule,
    AdTrendModule,
    AdCountDownModule,
    AdSimpleTableModule,
    AdReuseTabModule,
    AdFullContentModule,
    AdXlsxModule,
    AdZipModule,
    AdNumberToChineseModule,
    AdLodopModule,
    AdQuickMenuModule,
    AdQRModule,
    AdG2BarModule,
    AdG2CardModule,
    AdG2ChartModule,
    AdG2GaugeModule,
    AdG2MiniAreaModule,
    AdG2MiniBarModule,
    AdG2MiniProgressModule,
    AdG2PieModule,
    AdG2RadarModule,
    AdG2TagCloudModule,
    AdG2TimelineModule,
    AdG2WaterWaveModule,
];
class DelonABCRootModule {
}
DelonABCRootModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    AdErrorCollectModule.forRoot(),
                    AdFooterToolbarModule.forRoot(),
                    AdSidebarNavModule.forRoot(),
                    AdDownFileModule.forRoot(),
                    AdImageModule.forRoot(),
                    AdAvatarListModule.forRoot(),
                    AdDescListModule.forRoot(),
                    AdEllipsisModule.forRoot(),
                    AdExceptionModule.forRoot(),
                    AdExceptionModule.forRoot(),
                    AdNoticeIconModule.forRoot(),
                    AdNumberInfoModule.forRoot(),
                    AdPageHeaderModule.forRoot(),
                    AdResultModule.forRoot(),
                    AdStandardFormRowModule.forRoot(),
                    AdTagSelectModule.forRoot(),
                    AdTrendModule.forRoot(),
                    AdCountDownModule.forRoot(),
                    AdSimpleTableModule.forRoot(),
                    AdReuseTabModule.forRoot(),
                    AdFullContentModule.forRoot(),
                    AdXlsxModule.forRoot(),
                    AdZipModule.forRoot(),
                    AdNumberToChineseModule.forRoot(),
                    AdLodopModule.forRoot(),
                    AdQuickMenuModule.forRoot(),
                    AdQRModule.forRoot(),
                    // charts
                    AdG2BarModule.forRoot(),
                    AdG2CardModule.forRoot(),
                    AdG2ChartModule.forRoot(),
                    AdG2GaugeModule.forRoot(),
                    AdG2MiniAreaModule.forRoot(),
                    AdG2MiniBarModule.forRoot(),
                    AdG2MiniProgressModule.forRoot(),
                    AdG2PieModule.forRoot(),
                    AdG2RadarModule.forRoot(),
                    AdG2TagCloudModule.forRoot(),
                    AdG2TimelineModule.forRoot(),
                    AdG2WaterWaveModule.forRoot(),
                ],
                exports: MODULES,
            },] },
];
class DelonABCModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: DelonABCRootModule };
    }
}
DelonABCModule.decorators = [
    { type: NgModule, args: [{ exports: MODULES },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReuseTabStrategy {
    /**
     * @param {?} srv
     */
    constructor(srv) {
        this.srv = srv;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) {
        return this.srv.shouldDetach(route);
    }
    /**
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    store(route, handle) {
        this.srv.store(route, handle);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) {
        return this.srv.shouldAttach(route);
    }
    /**
     * @param {?} route
     * @return {?}
     */
    retrieve(route) {
        return this.srv.retrieve(route);
    }
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        return this.srv.shouldReuseRoute(future, curr);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { DelonABCModule, ErrorCollectComponent, AdErrorCollectModule, FooterToolbarComponent, AdFooterToolbarModule, SidebarNavComponent, AdSidebarNavModule, DownFileDirective, AdDownFileModule, ImageDirective, AdImageConfig, AdImageModule, AvatarListItemComponent, AvatarListComponent, AdAvatarListModule, DescListComponent, DescListItemComponent, AdDescListModule, EllipsisComponent, AdEllipsisModule, GlobalFooterComponent, AdGlobalFooterModule, ExceptionComponent, AdExceptionModule, NoticeIconComponent, AdNoticeIconModule, NumberInfoComponent, AdNumberInfoModule, AdPageHeaderConfig, PageHeaderComponent, AdPageHeaderModule, ResultComponent, AdResultModule, StandardFormRowComponent, AdStandardFormRowModule, TagSelectComponent, AdTagSelectModule, TrendComponent, AdTrendModule, CountDownComponent, AdCountDownModule, SimpleTableComponent, SimpleTableRowDirective, AdSimpleTableConfig, AdSimpleTableModule, ReuseTabComponent, ReuseTabService, ReuseTabStrategy, AdReuseTabModule, ReuseTabMatchMode, FullContentComponent, FullContentService, FullContentToggleDirective, AdFullContentModule, XlsxService, XlsxDirective, AdXlsxModule, DA_XLSX_CONFIG, ZipService, AdZipModule, DA_ZIP_CONFIG, numberToChinese, NumberToChinesePipe, AdNumberToChineseModule, AdLodopConfig, LodopService, AdLodopModule, QuickMenuComponent, AdQuickMenuModule, QRService, QRComponent, AdQRConfig, AdQRModule, G2BarComponent, AdG2BarModule, G2CardComponent, AdG2CardModule, G2ChartComponent, AdG2ChartModule, G2GaugeComponent, AdG2GaugeModule, G2MiniAreaComponent, AdG2MiniAreaModule, G2MiniBarComponent, AdG2MiniBarModule, G2ProgressComponent, AdG2MiniProgressModule, G2PieComponent, AdG2PieModule, G2RadarComponent, AdG2RadarModule, G2TagCloudComponent, AdG2TagCloudModule, G2TimelineComponent, AdG2TimelineModule, G2WaterWaveComponent, AdG2WaterWaveModule, DelonABCRootModule as ɵa, AvatarListItemComponent as ɵp, AvatarListComponent as ɵo, AdAvatarListModule as ɵn, G2BarComponent as ɵdd, AdG2BarModule as ɵdc, G2CardComponent as ɵdf, AdG2CardModule as ɵde, G2ChartComponent as ɵdh, AdG2ChartModule as ɵdg, G2GaugeComponent as ɵdj, AdG2GaugeModule as ɵdi, G2MiniAreaComponent as ɵdl, AdG2MiniAreaModule as ɵdk, G2MiniBarComponent as ɵdn, AdG2MiniBarModule as ɵdm, G2ProgressComponent as ɵdp, AdG2MiniProgressModule as ɵdo, G2PieComponent as ɵdr, AdG2PieModule as ɵdq, G2RadarComponent as ɵdt, AdG2RadarModule as ɵds, G2TagCloudComponent as ɵdv, AdG2TagCloudModule as ɵdu, G2TimelineComponent as ɵdx, AdG2TimelineModule as ɵdw, G2WaterWaveComponent as ɵdz, AdG2WaterWaveModule as ɵdy, CountDownComponent as ɵbr, AdCountDownModule as ɵbq, DescListItemComponent as ɵs, DescListComponent as ɵr, AdDescListConfig as ɵt, AdDescListModule as ɵq, DownFileDirective as ɵj, AdDownFileModule as ɵi, EllipsisComponent as ɵv, AdEllipsisModule as ɵu, ErrorCollectComponent as ɵc, AdErrorCollectConfig as ɵd, AdErrorCollectModule as ɵb, ExceptionComponent as ɵz, AdExceptionModule as ɵy, FooterToolbarComponent as ɵf, AdFooterToolbarModule as ɵe, FullContentToggleDirective as ɵck, FullContentComponent as ɵci, AdFullContentModule as ɵch, FullContentService as ɵcj, GlobalFooterComponent as ɵx, AdGlobalFooterModule as ɵw, AdImageConfig as ɵm, ImageDirective as ɵl, AdImageModule as ɵk, AdLodopConfig as ɵcv, AdLodopModule as ɵct, LodopService as ɵcu, NoticeIconTabComponent as ɵbc, NoticeIconComponent as ɵbb, AdNoticeIconModule as ɵba, NumberInfoComponent as ɵbe, AdNumberInfoModule as ɵbd, AdNumberToChineseModule as ɵcr, NumberToChinesePipe as ɵcs, PageHeaderComponent as ɵbg, AdPageHeaderConfig as ɵbh, AdPageHeaderModule as ɵbf, QRComponent as ɵcz, AdQRConfig as ɵda, AdQRModule as ɵcy, QRService as ɵdb, QuickMenuComponent as ɵcx, AdQuickMenuModule as ɵcw, ResultComponent as ɵbj, AdResultModule as ɵbi, ReuseTabContextMenuComponent as ɵce, ReuseTabContextComponent as ɵcf, ReuseTabContextDirective as ɵcg, ReuseTabContextService as ɵcc, ReuseTabComponent as ɵcb, AdReuseTabModule as ɵca, ReuseTabService as ɵcd, SidebarNavComponent as ɵh, AdSidebarNavModule as ɵg, SimpleTableExport as ɵbu, SimpleTableRowDirective as ɵbz, SimpleTableComponent as ɵbt, AdSimpleTableConfig as ɵby, AdSimpleTableModule as ɵbs, StandardFormRowComponent as ɵbl, AdStandardFormRowModule as ɵbk, TagSelectComponent as ɵbn, AdTagSelectModule as ɵbm, TrendComponent as ɵbp, AdTrendModule as ɵbo, DA_XLSX_CONFIG as ɵbw, XlsxDirective as ɵcm, AdXlsxModule as ɵcl, XlsxService as ɵbv, DA_ZIP_CONFIG as ɵcp, AdZipModule as ɵcn, ZipService as ɵco };
//# sourceMappingURL=abc.js.map
