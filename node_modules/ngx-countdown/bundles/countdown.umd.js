(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	(factory((global.ngxCountDown = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Timer = /** @class */ (function () {
    function Timer() {
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    /**
     * @return {?}
     */
    Timer.prototype.start = /**
     * @return {?}
     */
    function () {
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.process();
    };
    /**
     * @return {?}
     */
    Timer.prototype.process = /**
     * @return {?}
     */
    function () {
        var _this = this;
        while (this.commands.length) {
            this.commands.shift()();
        }
        var /** @type {?} */ diff = +new Date() - this.nextTime;
        var /** @type {?} */ count = 1 + Math.floor(diff / 100);
        diff = 100 - diff % 100;
        this.nextTime += 100 * count;
        var /** @type {?} */ frequency, /** @type {?} */ step, /** @type {?} */ i, /** @type {?} */ len;
        for (i = 0, len = this.fns.length; i < len; i += 2) {
            frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = frequency % 20 + 1;
            }
        }
        if (this.ing)
            setTimeout(function () { _this.process(); }, diff);
    };
    /**
     * @param {?} fn
     * @param {?} frequency
     * @return {?}
     */
    Timer.prototype.add = /**
     * @param {?} fn
     * @param {?} frequency
     * @return {?}
     */
    function (fn, frequency) {
        var _this = this;
        this.commands.push(function () {
            _this.fns.push(fn);
            _this.fns.push(frequency === 1000 ? 1 : 0);
            _this.ing = _this.fns.length > 0;
        });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Timer.prototype.remove = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var _this = this;
        this.commands.push(function () {
            var /** @type {?} */ i = _this.fns.indexOf(fn);
            if (i !== -1) {
                _this.fns.splice(i, 2);
            }
            _this.ing = _this.fns.length > 0;
        });
    };
    Timer.decorators = [
        { type: core.Injectable },
    ];
    return Timer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CountdownComponent = /** @class */ (function () {
    function CountdownComponent(el, renderer, timer) {
        this.el = el;
        this.renderer = renderer;
        this.timer = timer;
        this.frequency = 1000;
        this._notify = {};
        this.hands = [];
        this.left = 0;
        this.paused = false;
        /**
         * 两种情况会触发：时间终止或调用 `stop()`
         */
        this.stoped = false;
        this.start = new core.EventEmitter();
        this.finished = new core.EventEmitter();
        this.notify = new core.EventEmitter();
        this.event = new core.EventEmitter();
        this.timer.start();
    }
    /** 开始，当 `demand: false` 时触发 */
    /**
     * 开始，当 `demand: false` 时触发
     * @return {?}
     */
    CountdownComponent.prototype.begin = /**
     * 开始，当 `demand: false` 时触发
     * @return {?}
     */
    function () {
        this.paused = false;
        this.start.emit();
        this.callEvent('start');
    };
    /** 重新开始 */
    /**
     * 重新开始
     * @return {?}
     */
    CountdownComponent.prototype.restart = /**
     * 重新开始
     * @return {?}
     */
    function () {
        if (!this.stoped)
            this.destroy();
        this.init();
        this.timer.start();
        this.callEvent('restart');
    };
    /** 停止 */
    /**
     * 停止
     * @return {?}
     */
    CountdownComponent.prototype.stop = /**
     * 停止
     * @return {?}
     */
    function () {
        if (this.stoped)
            return;
        this.stoped = true;
        this.destroy();
        this.callEvent('stop');
    };
    /** 暂停（限未终止有效） */
    /**
     * 暂停（限未终止有效）
     * @return {?}
     */
    CountdownComponent.prototype.pause = /**
     * 暂停（限未终止有效）
     * @return {?}
     */
    function () {
        if (this.stoped || this.paused)
            return;
        this.paused = true;
        this.callEvent('pause');
    };
    /** 恢复 */
    /**
     * 恢复
     * @return {?}
     */
    CountdownComponent.prototype.resume = /**
     * 恢复
     * @return {?}
     */
    function () {
        if (this.stoped || !this.paused)
            return;
        this.paused = false;
        this.callEvent('resume');
    };
    /**
     * @return {?}
     */
    CountdownComponent.prototype.mergeConfig = /**
     * @return {?}
     */
    function () {
        this.config = Object.assign(/** @type {?} */ ({
            demand: false,
            leftTime: 0,
            template: '$!h!时$!m!分$!s!秒',
            effect: 'normal',
            varRegular: /\$\!([\-\w]+)\!/g,
            clock: ['d', 100, 2, 'h', 24, 2, 'm', 60, 2, 's', 60, 2, 'u', 10, 1]
        }), this.config);
    };
    /**
     * @param {?} action
     * @return {?}
     */
    CountdownComponent.prototype.callEvent = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this.event.emit({ action: action, left: this.left });
    };
    /**
     * @return {?}
     */
    CountdownComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ me = this;
        var /** @type {?} */ el = me.el.nativeElement;
        me.paused = me.config.demand;
        me.stoped = false;
        // 分析markup
        var /** @type {?} */ tmpl = el.innerHTML || me.config.template;
        me.config.varRegular.lastIndex = 0;
        el.innerHTML = tmpl.replace(me.config.varRegular, function (str, type) {
            // 时钟频率校正.
            if (type === 'u' || type === 's-ext')
                me.frequency = 100;
            // 生成hand的markup
            var /** @type {?} */ content = '';
            if (type === 's-ext') {
                me.hands.push({ type: 's' });
                me.hands.push({ type: 'u' });
                content = me.html('', 's', 'handlet') +
                    me.html('.', '', 'digital') +
                    me.html('', 'u', 'handlet');
            }
            else {
                me.hands.push({ type: type });
            }
            return me.html(content, type, 'hand');
        });
        var /** @type {?} */ clock = me.config.clock;
        me.hands.forEach(function (hand) {
            var /** @type {?} */ type = hand.type;
            var /** @type {?} */ base = 100, /** @type {?} */
            i;
            hand.node = el.querySelector(".hand-" + type);
            // radix, bits 初始化
            for (i = clock.length - 3; i > -1; i -= 3) {
                if (type === clock[i]) {
                    break;
                }
                base *= clock[i + 1];
            }
            hand.base = base;
            hand.radix = clock[i + 1];
            hand.bits = clock[i + 2];
        });
        me.getLeft();
        me.reflow(0, true);
        // bind reflow to me
        var /** @type {?} */ _reflow = me.reflow;
        me.reflow = function (count) {
            if (count === void 0) { count = 0; }
            return _reflow.apply(me, [count]);
        };
        // 构建 notify
        if (me.config.notify) {
            me.config.notify.forEach(function (time) {
                if (time < 1)
                    throw new Error("the notify config must be a positive integer.");
                time = time * 1000;
                time = time - time % me.frequency;
                me._notify[time] = true;
            });
        }
        me.timer.add(me.reflow, me.frequency);
        // show
        el.style.display = 'inline';
        return me;
    };
    /**
     * @return {?}
     */
    CountdownComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.timer.remove(this.reflow);
        return this;
    };
    /**
     * 更新时钟
     * @param {?=} count
     * @param {?=} force
     * @return {?}
     */
    CountdownComponent.prototype.reflow = /**
     * 更新时钟
     * @param {?=} count
     * @param {?=} force
     * @return {?}
     */
    function (count, force) {
        if (count === void 0) { count = 0; }
        if (force === void 0) { force = false; }
        if (!force && (this.paused || this.stoped))
            return;
        var /** @type {?} */ me = this;
        me.left = me.left - me.frequency * count;
        me.hands.forEach(function (hand) {
            hand.lastValue = hand.value;
            hand.value = Math.floor(me.left / hand.base) % hand.radix;
        });
        me.repaint();
        if (me._notify[me.left]) {
            me.notify.emit(me.left);
            this.callEvent('notify');
        }
        if (me.left < 1) {
            me.finished.emit(0);
            this.stoped = true;
            this.callEvent('finished');
            this.destroy();
        }
    };
    /**
     * 重绘时钟
     * @return {?}
     */
    CountdownComponent.prototype.repaint = /**
     * 重绘时钟
     * @return {?}
     */
    function () {
        var /** @type {?} */ me = this;
        if (me.config.repaint) {
            me.config.repaint.apply(me);
            return;
        }
        var /** @type {?} */ content;
        me.hands.forEach(function (hand) {
            if (hand.lastValue !== hand.value) {
                content = '';
                me.toDigitals(hand.value, hand.bits).forEach(function (digital) {
                    content += me.html(digital.toString(), '', 'digital');
                });
                hand.node.innerHTML = content;
            }
        });
    };
    /**
     * 获取倒计时剩余帧数
     * @return {?}
     */
    CountdownComponent.prototype.getLeft = /**
     * 获取倒计时剩余帧数
     * @return {?}
     */
    function () {
        var /** @type {?} */ left = this.config.leftTime * 1000;
        var /** @type {?} */ end = this.config.stopTime;
        if (!left && end)
            left = end - new Date().getTime();
        this.left = left - left % this.frequency;
    };
    /**
     * 生成需要的html代码，辅助工具
     * @param {?} con
     * @param {?} className
     * @param {?} type
     * @return {?}
     */
    CountdownComponent.prototype.html = /**
     * 生成需要的html代码，辅助工具
     * @param {?} con
     * @param {?} className
     * @param {?} type
     * @return {?}
     */
    function (con, className, type) {
        switch (type) {
            case 'hand':
            case 'handlet':
                className = type + ' hand-' + className;
                break;
            case 'digital':
                if (con === '.') {
                    className = type + ' ' + type + '-point ' + className;
                }
                else {
                    className = type + ' ' + type + '-' + con + ' ' + className;
                }
                break;
        }
        return '<span class="' + className + '">' + con + '</span>';
    };
    /**
     * 把值转换为独立的数字形式
     * @param {?} value
     * @param {?} bits
     * @return {?}
     */
    CountdownComponent.prototype.toDigitals = /**
     * 把值转换为独立的数字形式
     * @param {?} value
     * @param {?} bits
     * @return {?}
     */
    function (value, bits) {
        value = value < 0 ? 0 : value;
        var /** @type {?} */ digitals = [];
        // 把时、分、秒等换算成数字.
        while (bits--) {
            digitals[bits] = value % 10;
            value = Math.floor(value / 10);
        }
        return digitals;
    };
    /**
     * @return {?}
     */
    CountdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.mergeConfig();
        this.init();
        if (!this.config.demand)
            this.begin();
    };
    /**
     * @return {?}
     */
    CountdownComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CountdownComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes.config.firstChange) {
            this.mergeConfig();
            this.destroy().init();
        }
    };
    CountdownComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'countdown',
                    template: "<ng-content></ng-content>",
                    styles: [":host { display: none; }"],
                    host: { '[class.count-down]': 'true' }
                },] },
    ];
    /** @nocollapse */
    CountdownComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.Renderer, },
        { type: Timer, },
    ]; };
    CountdownComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "start": [{ type: core.Output },],
        "finished": [{ type: core.Output },],
        "notify": [{ type: core.Output },],
        "event": [{ type: core.Output },],
    };
    return CountdownComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CountdownModule = /** @class */ (function () {
    function CountdownModule() {
    }
    CountdownModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    providers: [Timer],
                    declarations: [CountdownComponent],
                    exports: [CountdownComponent]
                },] },
    ];
    return CountdownModule;
}());

exports.CountdownComponent = CountdownComponent;
exports.CountdownModule = CountdownModule;
exports.ɵa = Timer;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=countdown.umd.js.map
