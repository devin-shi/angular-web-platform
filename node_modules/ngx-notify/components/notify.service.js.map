{"version":3,"file":"notify.service.js","sourceRoot":"","sources":["../../.tmp/components/notify.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Injectable, Optional, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef, EventEmitter\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\nimport { HolderOptions } from './interfaces/holder.options';\nimport { Notify } from './interfaces/notify.type';\nimport { Options } from './interfaces/options.type';\nimport { NotifyEvent } from './interfaces/notify-event.type';\nimport { NotifyServiceConfig } from './notify.service.config';\nimport { Icons, defaultIcons } from './interfaces/icons';\nimport { NotifyComponent } from './notify.component';\nimport { NotifyHolderComponent } from './notify-holder.component';\n\n@Injectable()\nexport class NotifyService {\n\n    private emitter: Subject<NotifyEvent> = new Subject<NotifyEvent>();\n    private icons: Icons = defaultIcons;\n\n    private notifyHolderComponent: NotifyHolderComponent;\n\n    private container: HTMLElement;\n\n    constructor(private resolver: ComponentFactoryResolver,\n        private applicationRef: ApplicationRef,\n        private injector: Injector,\n        @Optional() private config: NotifyServiceConfig) {\n        if (config) {\n            this.container = config.container;\n        }\n    }\n\n    set(notify: Notify, to: boolean = true) {\n        if (!this.notifyHolderComponent) {\n            this.notifyHolderComponent = this.createNotifyHolder();\n            this.updateSetting({});\n        }\n\n        if (to) {\n            notify = Object.assign({}, this.config.notify, notify);\n            notify.id = notify.id ? notify.id : Math.random().toString(36).substring(3);\n            notify.click = new EventEmitter<{}>();\n        }\n\n        this.emitter.next({ command: 'set', notify: notify, add: to });\n        return notify;\n    }\n\n    updateSetting(options: HolderOptions) {\n        this.emitter.next({ command: 'options', holderOptions: Object.assign({}, this.config.options, options) });\n    }\n\n    private createNotifyHolder(): NotifyHolderComponent {\n        const factory = this.resolver.resolveComponentFactory(NotifyHolderComponent),\n              ref = factory.create(this.injector),\n              rootNode = (ref.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n        if (!this.container) {\n            this.container = document.body;\n        }\n\n        this.applicationRef.attachView(ref.hostView);\n        ref.onDestroy(() => {\n            this.applicationRef.detachView(ref.hostView);\n        });\n\n        this.container.appendChild(rootNode);\n        return ref.instance;\n    }\n\n    getChangeEmitter() {\n        return this.emitter;\n    }\n\n    success(title: string, content?: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'success', icon: this.icons.success }));\n    }\n\n    error(title: string, content?: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'error', icon: this.icons.error }));\n    }\n\n    alert(title: string, content?: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'alert', icon: this.icons.alert }));\n    }\n\n    info(title: string, content?: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'info', icon: this.icons.info }));\n    }\n\n    bare(title: string, content: string, type: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', type: type }));\n    }\n\n    html(title: string, content: string, html: string, type?: string, override?: Options) {\n        return this.set(Object.assign({}, override, { title: title, content: content || '', html: html, type: type }));\n    }\n\n    remove(id: string) {\n        this.emitter.next({ command: 'remove', id: id });\n    }\n\n    clear() {\n        this.emitter.next({ command: 'clear' });\n    }\n}\n"]}