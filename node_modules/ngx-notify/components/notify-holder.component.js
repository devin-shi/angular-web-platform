import { Component, ViewEncapsulation, Injector } from '@angular/core';
import { NotifyService } from './notify.service';
var NotifyHolderComponent = (function () {
    function NotifyHolderComponent(injector) {
        var _this = this;
        this.notifies = [];
        this.styles = {};
        this.listener = injector.get(NotifyService).getChangeEmitter().subscribe(function (item) {
            switch (item.command) {
                case 'clear':
                    _this.notifies = [];
                    break;
                case 'remove':
                    _this.remove((item.id));
                    break;
                case 'set':
                    if (item.add)
                        _this.add((item.notify));
                    else
                        _this.defaultBehavior(item);
                    break;
                case 'options':
                    _this.options = Object.assign({
                        lastOnBottom: true,
                        minWidth: 300,
                        maxWidth: 300,
                        maxStack: 8,
                        position: ['right', 'bottom'],
                        offset: [20, 20],
                        zIndex: 1031
                    }, (item.holderOptions));
                    _this.styles = {
                        'z-index': _this.options.zIndex,
                        'min-width.px': _this.options.minWidth,
                        'max-width.px': _this.options.maxWidth
                    };
                    _this.styles[_this.options.position[0] + '.px'] = _this.options.offset[0];
                    _this.styles[_this.options.position[1] + '.px'] = _this.options.offset[1];
                    break;
                default:
                    _this.defaultBehavior(item);
                    break;
            }
        });
    }
    NotifyHolderComponent.prototype.ngOnInit = function () {
    };
    NotifyHolderComponent.prototype.defaultBehavior = function (value) {
        this.notifies.splice(this.notifies.indexOf(value.notify), 1);
        if (value.notify.onDestroy || this.options.onDestroy) {
            var emitItem = this.getEmit(value.notify, false);
            if (value.notify.onDestroy)
                value.notify.onDestroy(emitItem);
            if (this.options.onDestroy)
                this.options.onDestroy(emitItem);
        }
    };
    NotifyHolderComponent.prototype.getEmit = function (notify, to) {
        var res = {
            createdOn: notify.createdOn,
            id: notify.id,
            type: notify.type,
            icon: notify.icon,
            title: notify.title,
            content: notify.content,
            html: notify.html
        };
        if (!to)
            res.destroyedOn = new Date();
        return res;
    };
    NotifyHolderComponent.prototype.remove = function (id) {
        var index = 0, item = null, allow = false;
        this.notifies.forEach(function (notify, idx) {
            if (notify.id === id) {
                index = idx;
                allow = true;
                item = notify;
            }
        });
        if (allow) {
            this.notifies.splice(index, 1);
        }
    };
    NotifyHolderComponent.prototype.add = function (item) {
        item = Object.assign({
            type: 'success',
            timeout: 1000 * 3,
            pauseOnHover: true,
            progress: false,
            clickToClose: true,
            theme: 'default',
            animate_in: 'notify-fade-in',
            animate_out: 'notify-fade-out',
            createdOn: new Date()
        }, item);
        if (!item.html) {
            switch (item.theme) {
                case 'bootstrap':
                    item.html = "<div class=\"alert alert-{bstype}\" role=\"alert\">\n                        <strong>{title}</strong> {content}\n                    </div>";
                    break;
                default:
                    item.html = "<div class=\"notify-title\">{title}</div><div class=\"notify-content\">{content}</div><div class=\"notify-icon\">{icon}</div>";
                    break;
            }
        }
        if (this.options.lastOnBottom) {
            if (this.notifies.length >= this.options.maxStack)
                this.notifies.splice(0, 1);
            this.notifies.push(item);
        }
        else {
            if (this.notifies.length >= this.options.maxStack)
                this.notifies.splice(this.notifies.length - 1, 1);
            this.notifies.splice(0, 0, item);
        }
        if (item.onCreate || this.options.onCreate) {
            var emitItem = this.getEmit(item, true);
            if (item.onCreate)
                item.onCreate(emitItem);
            if (this.options.onCreate)
                this.options.onCreate(emitItem);
        }
    };
    NotifyHolderComponent.prototype.ngOnDestroy = function () {
        if (this.listener)
            this.listener.unsubscribe();
    };
    NotifyHolderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notify-holder',
                    template: "\n    <div class=\"notifies\"\n        [ngStyle]=\"styles\"\n        [ngClass]=\"options.position\"\n        [class]=\"options.className\">\n        <notify\n            *ngFor=\"let n of notifies; let i = index\"\n            [item]=\"n\"></notify>\n    </div>\n    ",
                    styles: [".notifies { position: fixed; } "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    NotifyHolderComponent.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return NotifyHolderComponent;
}());
export { NotifyHolderComponent };
//# sourceMappingURL=notify-holder.component.js.map