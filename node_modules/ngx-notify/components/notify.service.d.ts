import { ComponentFactoryResolver, ApplicationRef, Injector } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { HolderOptions } from './interfaces/holder.options';
import { Notify } from './interfaces/notify.type';
import { Options } from './interfaces/options.type';
import { NotifyEvent } from './interfaces/notify-event.type';
import { NotifyServiceConfig } from './notify.service.config';
export declare class NotifyService {
    private resolver;
    private applicationRef;
    private injector;
    private config;
    private emitter;
    private icons;
    private notifyHolderComponent;
    private container;
    constructor(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector, config: NotifyServiceConfig);
    set(notify: Notify, to?: boolean): Notify;
    updateSetting(options: HolderOptions): void;
    private createNotifyHolder();
    getChangeEmitter(): Subject<NotifyEvent>;
    success(title: string, content?: string, override?: Options): Notify;
    error(title: string, content?: string, override?: Options): Notify;
    alert(title: string, content?: string, override?: Options): Notify;
    info(title: string, content?: string, override?: Options): Notify;
    bare(title: string, content: string, type: string, override?: Options): Notify;
    html(title: string, content: string, html: string, type?: string, override?: Options): Notify;
    remove(id: string): void;
    clear(): void;
}
