import { Component, Input, ViewEncapsulation, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NotifyService } from './notify.service';
var NotifyComponent = (function () {
    function NotifyComponent(sanitizer, zone, notifyService) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.zone = zone;
        this.notifyService = notifyService;
        this.classes = {};
        this.stopTime = false;
        this.count = 0;
        this.progressWidth = 0;
        this.instance = function () {
            _this.zone.runOutsideAngular(function () {
                _this.zone.run(function () { return _this.diff = (new Date().getTime() - _this.start) - (_this.count * _this.speed); });
                if (_this.count++ >= _this.steps) {
                    _this.zone.run(function () {
                        _this.remove();
                    });
                }
                else if (!_this.stopTime) {
                    if (_this.item.progress)
                        _this.zone.run(function () { return _this.progressWidth += 100 / _this.steps; });
                    _this.timer = setTimeout(_this.instance, (_this.speed - _this.diff));
                }
            });
        };
    }
    NotifyComponent.prototype.ngOnInit = function () {
        var _this = this;
        switch (this.item.theme) {
            case 'bootstrap':
                switch (this.item.type) {
                    case 'alert':
                        this.item.bstype = 'warning';
                        break;
                    case 'error':
                        this.item.bstype = 'danger';
                        break;
                    default:
                        this.item.bstype = this.item.type;
                        break;
                }
                break;
        }
        this.html = this.sanitizer.bypassSecurityTrustHtml(this.item.html.replace(/\{([a-z]+)\}/g, function (full, key) {
            return _this.item[key] || '';
        }));
        this.classes['notify-theme-' + this.item.theme] = true;
        this.classes['notify-' + this.item.type] = true;
        if (this.item.rtl === true)
            this.classes['notify-rtl'] = true;
        if (this.item.animate_in) {
            this.classes['animated'] = true;
            this.classes[this.item.animate_in] = true;
        }
        if (this.item.className) {
            this.classes[this.item.className] = true;
        }
        if (this.item.timeout > 0)
            this.startTimeout();
    };
    NotifyComponent.prototype.startTimeout = function () {
        var _this = this;
        this.steps = this.item.timeout / 10;
        this.speed = this.item.timeout / this.steps;
        this.start = new Date().getTime();
        this.zone.runOutsideAngular(function () { return _this.timer = setTimeout(_this.instance, _this.speed); });
    };
    NotifyComponent.prototype.onEnter = function () {
        if (this.item.pauseOnHover) {
            this.stopTime = true;
        }
    };
    NotifyComponent.prototype.onLeave = function () {
        if (this.item.pauseOnHover) {
            this.stopTime = false;
            setTimeout(this.instance, (this.speed - this.diff));
        }
    };
    NotifyComponent.prototype.onClick = function ($e) {
        this.item.click.emit($e);
        if (this.item.clickToClose) {
            this.remove();
        }
    };
    NotifyComponent.prototype.remove = function () {
        var _this = this;
        if (this.item.animate_out) {
            this.classes[this.item.animate_in] = false;
            this.classes[this.item.animate_out] = true;
            this.zone.runOutsideAngular(function () {
                setTimeout(function () {
                    _this.zone.run(function () { return _this.notifyService.set(_this.item, false); });
                }, 500);
            });
        }
        else {
            this.notifyService.set(this.item, false);
        }
    };
    NotifyComponent.prototype.ngOnDestroy = function () {
        clearTimeout(this.timer);
    };
    NotifyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notify',
                    template: "\n    <div class=\"notify\"\n        (click)=\"onClick($event)\"\n        [ngClass]=\"classes\"\n        [class]=\"animate\"\n        (mouseenter)=\"onEnter()\"\n        (mouseleave)=\"onLeave()\">\n        <div [innerHTML]=\"html\"></div>\n        <div class=\"notify-progress\" *ngIf=\"item.progress\">\n            <span [ngStyle]=\"{'width': progressWidth + '%'}\"></span>\n        </div>\n    </div>",
                    styles: [".notify { width: 100%; box-sizing: border-box; position: relative; margin-bottom: 10px; color: #fff; cursor: pointer; transition: all 0.5s; } .notify-theme-default { padding: 10px 20px; } .notify-theme-default.notify-alert { background: #ffdb5b; } .notify-theme-default.notify-alert .notify-progress span { background: #edc242; } .notify-theme-default.notify-success { background: #8BC34A; } .notify-theme-default.notify-success .notify-progress span { background: #689F38; } .notify-theme-default.notify-error { background: #F44336; } .notify-theme-default.notify-error .notify-progress span { background: #D32F2F; } .notify-theme-default.notify-info { background: #03A9F4; } .notify-theme-default.notify-info .notify-progress span { background: #0288D1; } .notify-theme-bootstrap.notify-alert .notify-progress span { background: #edc242; } .notify-theme-bootstrap.notify-success .notify-progress span { background: #689F38; } .notify-theme-bootstrap.notify-error .notify-progress span { background: #D32F2F; } .notify-theme-bootstrap.notify-info .notify-progress span { background: #0288D1; } .notify-title { margin: 0; padding: 0; line-height: 30px; font-size: 16px; font-weight: bold; } .notify-content { margin: 0; font-size: 14px; padding: 0 50px 0 0; line-height: 20px; } .notify-icon { position: absolute; box-sizing: border-box; top: 0; right: 0; height: 100%; max-width: 70px; width: 100%; } .notify-icon svg { width: 100%; height: 100%; padding: 10px; fill: #fff; } .notify-icon > * { max-width: 70px; } .notify-progress { position: absolute; top: 0; left: 0; width: 100%; height: 5px; } .notify-progress span { float: left; height: 100%; } .notify-rtl { direction: rtl; } .notify-rtl .notify-content { padding: 0 0 0 50px; } .notify-rtl .notify-icon { left: 0; right: auto; } .notify-fade-in { animation-duration: 1s; animation-fill-mode: both; -webkit-animation-name: fadeIn; animation-name: fadeIn; } .notify-fade-out { animation-duration: 1s; animation-fill-mode: both; -webkit-animation-name: fadeOut; animation-name: fadeOut; } @-webkit-keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } @keyframes fadeIn { 0% { opacity: 0; } 100% { opacity: 1; } } @-webkit-keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } } @keyframes fadeOut { 0% { opacity: 1; } 100% { opacity: 0; } } "],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    NotifyComponent.ctorParameters = function () { return [
        { type: DomSanitizer, },
        { type: NgZone, },
        { type: NotifyService, },
    ]; };
    NotifyComponent.propDecorators = {
        "item": [{ type: Input },],
    };
    return NotifyComponent;
}());
export { NotifyComponent };
//# sourceMappingURL=notify.component.js.map