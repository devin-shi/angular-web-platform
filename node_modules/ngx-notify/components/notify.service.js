import { Injectable, Optional, ComponentFactoryResolver, ApplicationRef, Injector, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { NotifyServiceConfig } from './notify.service.config';
import { defaultIcons } from './interfaces/icons';
import { NotifyHolderComponent } from './notify-holder.component';
var NotifyService = (function () {
    function NotifyService(resolver, applicationRef, injector, config) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.config = config;
        this.emitter = new Subject();
        this.icons = defaultIcons;
        if (config) {
            this.container = config.container;
        }
    }
    NotifyService.prototype.set = function (notify, to) {
        if (to === void 0) { to = true; }
        if (!this.notifyHolderComponent) {
            this.notifyHolderComponent = this.createNotifyHolder();
            this.updateSetting({});
        }
        if (to) {
            notify = Object.assign({}, this.config.notify, notify);
            notify.id = notify.id ? notify.id : Math.random().toString(36).substring(3);
            notify.click = new EventEmitter();
        }
        this.emitter.next({ command: 'set', notify: notify, add: to });
        return notify;
    };
    NotifyService.prototype.updateSetting = function (options) {
        this.emitter.next({ command: 'options', holderOptions: Object.assign({}, this.config.options, options) });
    };
    NotifyService.prototype.createNotifyHolder = function () {
        var _this = this;
        var factory = this.resolver.resolveComponentFactory(NotifyHolderComponent), ref = factory.create(this.injector), rootNode = ref.hostView.rootNodes[0];
        if (!this.container) {
            this.container = document.body;
        }
        this.applicationRef.attachView(ref.hostView);
        ref.onDestroy(function () {
            _this.applicationRef.detachView(ref.hostView);
        });
        this.container.appendChild(rootNode);
        return ref.instance;
    };
    NotifyService.prototype.getChangeEmitter = function () {
        return this.emitter;
    };
    NotifyService.prototype.success = function (title, content, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'success', icon: this.icons.success }));
    };
    NotifyService.prototype.error = function (title, content, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'error', icon: this.icons.error }));
    };
    NotifyService.prototype.alert = function (title, content, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'alert', icon: this.icons.alert }));
    };
    NotifyService.prototype.info = function (title, content, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', type: 'info', icon: this.icons.info }));
    };
    NotifyService.prototype.bare = function (title, content, type, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', type: type }));
    };
    NotifyService.prototype.html = function (title, content, html, type, override) {
        return this.set(Object.assign({}, override, { title: title, content: content || '', html: html, type: type }));
    };
    NotifyService.prototype.remove = function (id) {
        this.emitter.next({ command: 'remove', id: id });
    };
    NotifyService.prototype.clear = function () {
        this.emitter.next({ command: 'clear' });
    };
    NotifyService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
        { type: ApplicationRef, },
        { type: Injector, },
        { type: NotifyServiceConfig, decorators: [{ type: Optional },] },
    ]; };
    return NotifyService;
}());
export { NotifyService };
//# sourceMappingURL=notify.service.js.map