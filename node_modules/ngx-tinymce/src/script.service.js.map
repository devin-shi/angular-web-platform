{"version":3,"file":"script.service.js","sourceRoot":"","sources":["../../.ng_build/src/script.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;;IASnC,uBAAsC;QAAA,QAAG,GAAH,GAAG;sBAJxB,KAAK;oBACF,EAAE;uBACc,IAAI,OAAO,EAAW;KAER;IAElD,wCAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;KACvB;IAED,4BAAI,GAAJ,UAAK,IAAY;QAAjB,iBAgBC;QAfG,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,IAAI,CAAC;SACf;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,IAAM,QAAQ,GAAmB,EAAE,CAAC;QAEpC,CAAE,IAAI,CAAE,CAAC,OAAO,CAAC,UAAC,MAAM,IAAK,OAAA,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAErE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;YAC1B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC;KACf;IAED,kCAAU,GAAV,UAAW,IAAY;QAAvB,iBA4CC;QA3CG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,EAAE,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC3B,OAAO,CAAM;oBACT,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,IAAI;oBACZ,MAAM,EAAE,QAAQ;iBACnB,CAAC,CAAC;gBACH,MAAM,CAAC;aACV;YAED,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAEvB,IAAM,IAAI,GAAG,KAAI,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC9C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;YAC9B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,EAAE,CAAC,CAAO,IAAK,CAAC,UAAU,CAAC,CAAC,CAAC;;gBACnB,IAAK,CAAC,kBAAkB,GAAG;oBAC7B,EAAE,CAAC,CAAO,IAAK,CAAC,UAAU,KAAK,QAAQ,IAAU,IAAK,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;wBACzE,IAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBACtC,OAAO,CAAM;4BACT,IAAI,EAAE,IAAI;4BACV,MAAM,EAAE,IAAI;4BACZ,MAAM,EAAE,QAAQ;yBACnB,CAAC,CAAC;qBACN;iBACJ,CAAC;aACL;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,MAAM,GAAG;oBACV,OAAO,CAAM;wBACT,IAAI,EAAE,IAAI;wBACV,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,QAAQ;qBACnB,CAAC,CAAC;iBACN,CAAC;aACL;YACD,IAAI,CAAC,OAAO,GAAG,UAAC,KAAU;gBAAK,OAAA,OAAO,CAAM;oBACxC,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,KAAK;oBACb,MAAM,EAAE,QAAQ;iBACnB,CAAC;YAJ6B,CAI7B,CAAC;YACH,KAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SAC9D,CAAC,CAAC;KACN;;gBA3EJ,UAAU;;;;gDAOM,MAAM,SAAC,QAAQ;;wBAXhC;;SAKa,aAAa","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class ScriptService {\n\n    private loaded = false;\n    private list: any = {};\n    private emitter: Subject<boolean> = new Subject<boolean>();\n\n    constructor(@Inject(DOCUMENT) private doc: any) {}\n\n    getChangeEmitter() {\n        return this.emitter;\n    }\n\n    load(path: string) {\n        if (this.loaded) {\n            return this;\n        }\n\n        this.loaded = true;\n\n        const promises: Promise<any>[] = [];\n\n        [ path ].forEach((script) => promises.push(this.loadScript(script)));\n\n        Promise.all(promises).then(res => {\n            this.emitter.next(true);\n        });\n\n        return this;\n    }\n\n    loadScript(path: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (this.list[path] === true) {\n                resolve(<any>{\n                    path: path,\n                    loaded: true,\n                    status: 'Loaded'\n                });\n                return;\n            }\n\n            this.list[path] = true;\n\n            const node = this.doc.createElement('script');\n            node.type = 'text/javascript';\n            node.src = path;\n            node.charset = 'utf-8';\n            if ((<any>node).readyState) { // IE\n                (<any>node).onreadystatechange = () => {\n                    if ((<any>node).readyState === 'loaded' || (<any>node).readyState === 'complete') {\n                        (<any>node).onreadystatechange = null;\n                        resolve(<any>{\n                            path: path,\n                            loaded: true,\n                            status: 'Loaded'\n                        });\n                    }\n                };\n            } else {\n                node.onload = () => {\n                    resolve(<any>{\n                        path: path,\n                        loaded: true,\n                        status: 'Loaded'\n                    });\n                };\n            }\n            node.onerror = (error: any) => resolve(<any>{\n                path: path,\n                loaded: false,\n                status: 'Loaded'\n            });\n            this.doc.getElementsByTagName('head')[0].appendChild(node);\n        });\n    }\n}\n"]}