import { Component, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ScriptService } from './script.service';
import { TinymceOptions } from './tinymce.options';
var TinymceComponent = (function () {
    function TinymceComponent(defConfig, ss, cd) {
        this.defConfig = defConfig;
        this.ss = ss;
        this.cd = cd;
        this.inited = false;
        this.load = true;
        this.id = "_tinymce-" + Math.random().toString(36).substring(2);
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(TinymceComponent.prototype, "loading", {
        set: function (value) {
            if (value instanceof TemplateRef)
                this._loadingTpl = value;
            else
                this._loading = value;
        },
        enumerable: true,
        configurable: true
    });
    TinymceComponent.prototype.init = function () {
        var _this = this;
        if (!window.tinymce)
            throw new Error('tinymce js文件加载失败');
        if (this.instance)
            return;
        if (this.defConfig.baseURL)
            tinymce.baseURL = this.defConfig.baseURL;
        var userOptions = Object.assign({}, this.defConfig.config, this.config);
        var options = Object.assign({
            selector: "#" + this.id
        }, this.defConfig.config, this.config, {
            setup: function (editor) {
                _this.instance = editor;
                editor.on('change keyup', function () {
                    _this.value = editor.getContent();
                    _this.onChange(_this.value);
                    _this.onTouched(_this.value);
                });
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            },
            init_instance_callback: function (editor) {
                if (editor && _this.value)
                    editor.setContent(_this.value);
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
                _this.load = false;
                _this.cd.markForCheck();
            }
        });
        if (userOptions.auto_focus)
            options.auto_focus = this.id;
        tinymce.init(options);
    };
    TinymceComponent.prototype.destroy = function () {
        if (!this.instance) {
            return;
        }
        this.instance.off();
        this.instance.remove('#' + this.id);
        this.instance = null;
    };
    TinymceComponent.prototype.ngOnInit = function () {
        this.inited = true;
    };
    TinymceComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // 已经存在对象无须进入懒加载模式
        if (window.tinymce) {
            this.init();
            return;
        }
        var baseURL = this.defConfig && this.defConfig.baseURL;
        var fileName = this.defConfig && this.defConfig.fileName;
        this.ss.load((baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js')).getChangeEmitter().subscribe(function (res) {
            _this.init();
        });
    };
    TinymceComponent.prototype.ngOnChanges = function (changes) {
        if (this.inited && changes.config) {
            this.destroy();
            this.init();
        }
    };
    TinymceComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    TinymceComponent.prototype._onReuseInit = 
    // reuse-tab: http://ng-alain.com/components/reuse-tab#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F
    function () {
        this.destroy();
        this.init();
    };
    TinymceComponent.prototype.writeValue = function (value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this.instance) {
            this.instance.setContent(this.value);
        }
    };
    TinymceComponent.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    TinymceComponent.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    TinymceComponent.prototype.setDisabledState = function (isDisabled) {
        if (!this.instance)
            return;
        if (isDisabled) {
            this.instance.disabled();
        }
        else {
            this.instance.setEnabled();
        }
    };
    TinymceComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'tinymce',
                    template: "\n    <textarea id=\"{{id}}\" class=\"tinymce-selector\"></textarea>\n    <div class=\"loading\" *ngIf=\"load\">\n        <ng-container *ngIf=\"_loading; else _loadingTpl\">{{_loading}}</ng-container>\n    </div>\n    ",
                    styles: [":host .tinymce-selector{display:none}"],
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return TinymceComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false
                },] },
    ];
    /** @nocollapse */
    TinymceComponent.ctorParameters = function () { return [
        { type: TinymceOptions, },
        { type: ScriptService, },
        { type: ChangeDetectorRef, },
    ]; };
    TinymceComponent.propDecorators = {
        "config": [{ type: Input },],
        "loading": [{ type: Input },],
    };
    return TinymceComponent;
}());
export { TinymceComponent };
//# sourceMappingURL=tinymce.component.js.map