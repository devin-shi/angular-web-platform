import { Injectable } from '@angular/core';
import { AqmConfig } from './aqm.config';
var LoaderService = (function () {
    function LoaderService(cog) {
        this._cog = Object.assign({
            apiProtocol: 'auto',
            apiVersion: '2.exp',
            apiCallback: 'angularQQMapsLoader',
            apiHostAndPath: 'map.qq.com/api/js'
        }, cog);
    }
    LoaderService.prototype.load = function () {
        var _this = this;
        if (this._scriptLoadingPromise) {
            return this._scriptLoadingPromise;
        }
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        script.src = this._getSrc();
        this._scriptLoadingPromise = new Promise(function (resolve, reject) {
            window[_this._cog.apiCallback] = function () { resolve(); };
            script.onerror = function (error) { reject(error); };
        });
        document.body.appendChild(script);
        return this._scriptLoadingPromise;
    };
    LoaderService.prototype._getSrc = function () {
        var protocol;
        switch (this._cog.apiProtocol) {
            case 'http':
                protocol = 'http:';
                break;
            case 'https':
                protocol = 'https:';
                break;
            default:
                protocol = '';
                break;
        }
        var queryParams = {
            v: this._cog.apiVersion,
            key: this._cog.apiKey,
            libraries: this._cog.apiLibraries,
            callback: this._cog.apiCallback
        };
        var params = Object.keys(queryParams)
            .filter(function (k) { return queryParams[k] != null; })
            .filter(function (k) {
            return !Array.isArray(queryParams[k]) || (Array.isArray(queryParams[k]) && queryParams[k].length > 0);
        })
            .map(function (k) {
            var i = queryParams[k];
            if (Array.isArray(i))
                return { key: k, value: i.join(',') };
            return { key: k, value: i };
        })
            .map(function (entry) { return entry.key + "=" + entry.value; })
            .join('&');
        return protocol + "//" + this._cog.apiHostAndPath + "?" + params;
    };
    LoaderService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LoaderService.ctorParameters = function () { return [
        { type: AqmConfig, },
    ]; };
    return LoaderService;
}());
export { LoaderService };
//# sourceMappingURL=loader.service.js.map